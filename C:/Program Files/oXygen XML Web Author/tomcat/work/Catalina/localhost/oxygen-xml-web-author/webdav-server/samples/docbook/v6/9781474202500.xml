
  
  
  <?oxygen SCHSchema="docbook-mods.sch"?>
  <?oxygen RNGSchema="bloomsbury-mods.rnc" type="compact"?>
  <book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" role="fullText" version="5.0" xml:id="b-9781474202500" xml:lang="en">
<info xml:id="b-9781474207300-1">
<title xml:id="b-9781474207300-2">A Cultural History of Western Empires in the Modern Age testing ingest</title>
    <volumenum>6</volumenum>
<editor xlink:href="C49128" xlink:role="biblioAuID">
<personname role="first-last">
          <firstname>Patricia</firstname> <othername role="middle-initials">M.E.</othername> <surname>Lorcin</surname>
        </personname>
<personblurb xml:id="b-9781474207300-C49128">
<para xml:id="b-9781474207300-3">Patricia M.E. Lorcin is the Samuel Russell Chair in Humanities and Professor of History at the University of Minnesota-Twin Cities, USA.</para>
</personblurb>
</editor>
    <biblioset xml:id="b-9781474207300-a4" role="series">
        <title xml:id="b-9781474207300-s4" role="series">The Cultural Histories Series</title>
      </biblioset>
<cover role="series" xml:id="b-9781474207300-4">
<bibliolist xml:id="b-9781474207300-5">
<bibliomixed role="series" xml:id="b-9781474207300-6">
<title role="series" xml:id="b-9781474207300-7">A Cultural History of Western Empires</title>
<bibliomisc role="heading1">
              <emphasis role="italic">General Editor: Antoinette Burton</emphasis>
            </bibliomisc>
</bibliomixed>
</bibliolist>
<para role="spaceBefore" xml:id="b-9781474207300-8">
          <emphasis role="bold">Volume 1</emphasis>
        </para>
<bibliolist xml:id="b-9781474207300-9">
<bibliomixed role="series" xml:id="b-9781474207300-10">
<bibliomisc role="previousTitle">A Cultural History of Western Empires in Antiquity</bibliomisc>
<emphasis role="italic">Edited by</emphasis> <editor>
              <personname role="first-last">
                <firstname>Carlos</firstname> <surname>Noreña</surname>
              </personname>
            </editor>
</bibliomixed>
</bibliolist>
<para role="spaceBefore" xml:id="b-9781474207300-11">
          <emphasis role="bold">Volume 2</emphasis>
        </para>
<bibliolist xml:id="b-9781474207300-12">
<bibliomixed role="series" xml:id="b-9781474207300-13">
<bibliomisc role="previousTitle">A Cultural History of Western Empires in the Middle Ages</bibliomisc>
<emphasis role="italic">Edited by</emphasis> <editor>
              <personname role="first-last">
                <firstname>Matthew</firstname> <surname>Gabriele</surname>
              </personname>
            </editor>
</bibliomixed>
</bibliolist>
<para role="spaceBefore" xml:id="b-9781474207300-14">
          <emphasis role="bold">Volume 3</emphasis>
        </para>
<bibliolist xml:id="b-9781474207300-15">
<bibliomixed role="series" xml:id="b-9781474207300-16">
<bibliomisc role="previousTitle">A Cultural History of Western Empires in the Renaissance</bibliomisc>
<emphasis role="italic">Edited by</emphasis> <editor>
              <personname role="first-last">
                <firstname>Ania</firstname> <surname>Loomba</surname>
              </personname>
            </editor>
</bibliomixed>
</bibliolist>
<para role="spaceBefore" xml:id="b-9781474207300-17">
          <emphasis role="bold">Volume 4</emphasis>
        </para>
<bibliolist xml:id="b-9781474207300-18">
<bibliomixed role="series" xml:id="b-9781474207300-19">
<bibliomisc role="previousTitle">A Cultural History of Western Empires in the Age of Enlightenment</bibliomisc>
<emphasis role="italic">Edited by</emphasis> <editor>
              <personname role="first-last">
                <firstname>Ian</firstname> <surname>Coller</surname>
              </personname>
            </editor>
</bibliomixed>
</bibliolist>
<para role="spaceBefore" xml:id="b-9781474207300-20">
          <emphasis role="bold">Volume 5</emphasis>
        </para>
<bibliolist xml:id="b-9781474207300-21">
<bibliomixed role="series" xml:id="b-9781474207300-22">
<bibliomisc role="previousTitle">A Cultural History of Western Empires in the Age of Empire</bibliomisc>
<emphasis role="italic">Edited by</emphasis> <editor>
              <personname role="first-last">
                <firstname>Kirsten</firstname> <surname>McKenzie</surname>
              </personname>
            </editor>
</bibliomixed>
</bibliolist>
<para role="spaceBefore" xml:id="b-9781474207300-23">
          <emphasis role="bold">Volume 6</emphasis>
        </para>
<bibliolist xml:id="b-9781474207300-24">
<bibliomixed role="series" xml:id="b-9781474207300-25">
<bibliomisc role="previousTitle">A Cultural History of Western Empires in the Modern Age</bibliomisc>
<emphasis role="italic">Edited by</emphasis> <editor>
              <personname role="first-last">
                <firstname>Patricia</firstname> <surname>Lorcin</surname>
              </personname>
            </editor>
</bibliomixed>
</bibliolist>
</cover>
<edition role="1">First edition</edition>
<pubdate role="published">2019</pubdate>
<biblioset role="publisher" xml:id="b-9781474207300-26">
<bibliomisc role="imprint">Bloomsbury Academic</bibliomisc>
<publisher>
<publishername>Bloomsbury Publishing Plc</publishername>
<address xml:id="b-9781474207300-27">
<street>50 Bedford Square</street>
<city>London</city>
<postcode>WC1B 3DP</postcode>
<country>UK</country>
</address>
<address xml:id="b-9781474207300-28">
<street>1385 Broadway</street>
<city>New York</city>
<postcode>NY 10018</postcode>
<country>USA</country>
<phrase>BLOOMSBURY, BLOOMSBURY ACADEMIC and the Diana logo are trademarks of Bloomsbury Publishing Plc</phrase>
</address>
</publisher>
<printhistory xml:id="b-9781474207300-29">
          <para xml:id="b-9781474207300-30">First published in Great Britain 2019</para>
        </printhistory>
</biblioset>
<copyright>
<year>2019</year>
<holder>Bloomsbury Publishing</holder>
</copyright>
<bibliomisc role="legalRef">Cover image: © Joe McNally/Getty Images</bibliomisc>
<bibliomisc role="legalRef">All rights reserved. No part of this publication may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopying, recording, or any information storage or retrieval system, without prior permission in writing from the publishers.</bibliomisc>
<bibliomisc role="legalRef">Bloomsbury Publishing Plc does not have any control over, or responsibility for, any third-party websites referred to or in this book. All internet addresses given in this book were correct at the time of going to press. The author and publisher regret any inconvenience caused if addresses have changed or sites have ceased to exist, but can accept no responsibility for any such changes.</bibliomisc>
<legalnotice role="CIP" xml:id="b-9781474207300-31">
<para xml:id="b-9781474207300-32">A catalogue record for this book is available from the British Library.</para>
</legalnotice>
<legalnotice role="CIP" xml:id="b-9781474207300-33">
<para xml:id="b-9781474207300-34">A catalog record for this book is available from the Library of Congress.</para>
</legalnotice>
<biblioset role="isbns" xml:id="b-9781474207300-35">
<biblioid class="isbn" role="xml">978-1-4742-0730-0</biblioid>
<biblioid class="isbn" role="hardback">978-1-4742-4263-9</biblioid>
<biblioid class="isbn" role="set">978-1-4742-4275-2</biblioid>
</biblioset>
<biblioid class="doi">10.5040/9781474207300</biblioid>
<biblioid class="other" otherclass="hasOnlineResources">N</biblioid>
<biblioid class="other" otherclass="schemaVersion">1</biblioid>
<biblioid class="other" otherclass="schematronVersion">5</biblioid>
<abstract role="blurb" xml:id="b-9781474207300-36">
<para xml:id="b-9781474207300-37">
          <emphasis role="italic">A Cultural History of Western Empires in the
Modern Age</emphasis> covers the period from 1918 to
the present. Through the lens of the political
and international events shaping the period,
the introduction traces the gradual demise of
the cultural importance of European empires
and the emergence of the United States as the
predominant cultural model. The following
eight chapters of the volume, authored by a
diverse range of experts, highlight different
aspects of this cultural shift while indicating
the historiographical controversies and
conceptual developments that shaped the
century-long evolution related to each of the
specific topics.</para>
<para xml:id="b-9781474207300-37">This richly-illustrated and accessible volume provides deep historical context to the rise of the
US as a major cultural force in the modern era. In so doing, it gives the reader a backdrop to the
shift of Western empire from the European model of 18th and 19th century imperialism, to the
emergence of the US as a cultural hegemon. A feature of contemporary geopolitics that continues
to play a key role in the dynamics of cultural exchange and influence playing out on the world
stage today.</para>
</abstract>
</info>
<colophon xml:id="b-9781474207300-52">
<para xml:id="b-9781474207300-53">Series: The Cultural Histories Series</para>
<para xml:id="b-9781474207300-54">Typeset by RefineCatch Limited, Bungay, Suffolk</para>
<para xml:id="b-9781474207300-55">Printed and bound in Great Britain</para>
<para xml:id="b-9781474207300-56">To find out more about our authors and books visit <link xlink:href="http://www.bloomsbury.com">
          <uri>www.bloomsbury.com</uri>
        </link> and sign up for our newsletters.</para>
</colophon>
<part role="front" xml:id="b-9781474207300-57">
<info xml:id="b-9781474207300-58">
<title xml:id="b-9781474207300-59">Front matter</title>
</info>
<preface role="prelims" xml:id="b-9781474207300-preface1">
<info xml:id="b-9781474207300-60">
<title xml:id="b-9781474207300-61">Title Pages</title>
<pagenums>i–iv</pagenums>
<mediaobject xml:id="b-9781474207300-62">
<imageobject xml:id="b-9781474207300-63">
<imagedata fileref="pdfs/9781474207300.0001.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
<copyright>
            <year>2019</year>
            <holder>Bloomsbury Publishing</holder>
          </copyright>
        </info>
<remark condition="hidden">Note that this is a placeholder for the pdf of the prelims and no full text content is included at this point</remark>
</preface>
<toc xml:id="b-9781474207300-64">
<info xml:id="b-9781474207300-65">
<title xml:id="b-9781474207300-66">
            <?page value="v"?>Contents<?page value="vi"?>
          </title>
<pagenums>v–vi</pagenums>
<mediaobject xml:id="b-9781474207300-67">
<imageobject xml:id="b-9781474207300-68">
<imagedata fileref="pdfs/9781474207300.0002.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
</info>
</toc>
<toc xml:id="b-9781474207300-69">
<info xml:id="b-9781474207300-70">
<title xml:id="b-9781474207300-71">
            <?page value="vii"?>Illustrations</title>
<pagenums>vii–x</pagenums>
<mediaobject xml:id="b-9781474207300-72">
<imageobject xml:id="b-9781474207300-73">
<imagedata fileref="pdfs/9781474207300.0003.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
</info>
<bridgehead renderas="sect1" xml:id="b-9781474207300-74">Introduction</bridgehead>
<simplelist xml:id="b-9781474207300-75">
<member xml:id="b-9781474207300-76">
            <link linkend="b-9781474207300-fig0_1" role="figure">Detroit Industry, fresco on the South wall, 1932–3, by Diego Rivera (1886–1957), Detroit Institute of Arts, Michigan, United States of America. Credit: DeAgostini/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-77">
            <link linkend="b-9781474207300-fig0_2" role="figure">
              <emphasis role="italic">King Kong</emphasis> (1933). Credit: Hulton Archive/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-78">
            <link linkend="b-9781474207300-fig0_3" role="figure">President Eisenhower speaking at a function to celebrate the admission of Alaska and Hawaii to the Union. Credit: Abbie Rowe/PhotoQuest/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-79">
            <link linkend="b-9781474207300-fig0_4" role="figure">Animal rights demonstration at McDonald’s restaurant in Sao Paulo. Credit: Cris Faga/NurPhoto via Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-80">
            <link linkend="b-9781474207300-fig0_5" role="figure">Berlin, Germany, 2017. Model wearing American apparel. Credit: Christian Vierig/Getty Images.</link>
          </member>
</simplelist>
<bridgehead renderas="sect1" xml:id="b-9781474207300-81">Chapter 1</bridgehead>
<simplelist xml:id="b-9781474207300-82">
<member xml:id="b-9781474207300-83">
            <link linkend="b-9781474207300-fig1_1" role="figure">A Berber fighter during the 1924–5 Rif War. Credit: ullstein bild via Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-84">
            <link linkend="b-9781474207300-fig1_2" role="figure">The Rif War against France and Spain. A French military airfield at Fez, June 1925.</link>
          </member>
<member xml:id="b-9781474207300-85">
            <link linkend="b-9781474207300-fig1_3" role="figure">British soldiers wade upriver through the jungle on patrol in 1957 during the Malayan Emergency. Credit: Horace Abrahams/Keystone Features/Getty Images.</link>
          </member>
<?page value="viii"?>
<member xml:id="b-9781474207300-86">
            <link linkend="b-9781474207300-fig1_4" role="figure">French soldiers detain suspected nationalist fighters in the Aurès Mountains in 1955, during the Algerian war. Credit: Michel DESJARDINS/Gamma-Rapho via Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-87">
            <link linkend="b-9781474207300-fig1_5" role="figure">September 4, 1965: Vietnamese children at the Phu Thuong Orphanage near Da Nang taste ice cream for the first time, brought to them by US Marines, as part of a goodwill mission during the Vietnam War, Vietnam. Credit: US Marine Corps/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-88">
            <link linkend="b-9781474207300-fig1_6" role="figure">A US special forces soldier monitors Iraqi forces advancing toward Mosul airport on February 23, 2017. Credit: AHMAD AL-RUBAYE/AFP/Getty Images.</link>
          </member>
</simplelist>
    <bridgehead renderas="sect1" xml:id="b-9781474207300-89">Chapter 2</bridgehead>
<simplelist xml:id="b-9781474207300-90">
<member xml:id="b-9781474207300-91">
            <link linkend="b-9781474207300-fig2_1" role="figure">A wood chip mountain for export in Puerto Montt, southern Chile. Credit: Julio Etchart/ullstein bild via Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-92">
            <link linkend="b-9781474207300-fig2_2" role="figure">Weighing cotton in Mumbai. Illustration from the magazine <emphasis role="italic">The Illustrated London News</emphasis>, Volume XLI, October 11, 1862. Credit: De Agostini/Biblioteca Ambrosiana.</link>
          </member>
<member xml:id="b-9781474207300-93">
            <link linkend="b-9781474207300-fig2_3" role="figure">A woman farmer taps dripping resin from a rubber tree in a plantation on Pulau Langkawi Island, Malaysia. Credit: In Pictures Ltd./Corbis via Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-94">
            <link linkend="b-9781474207300-fig2_4" role="figure">Empire Marketing Board 1927–33 poster. Credit: British National Archives.</link>
          </member>
</simplelist>
    <bridgehead renderas="sect1" xml:id="b-9781474207300-95">Chapter 3</bridgehead>
<simplelist xml:id="b-9781474207300-96">
<member xml:id="b-9781474207300-97">
            <link linkend="b-9781474207300-fig3_1" role="figure">French Foreign Legion postcard, 1952. Credit: Art Media/Print Collector/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-98">
            <link linkend="b-9781474207300-fig3_2" role="figure">Irrigation channels for sugar cane crops, Mauritius. Credit: Kate Hopper.</link>
          </member>
<member xml:id="b-9781474207300-99">
            <link linkend="b-9781474207300-fig3_3" role="figure">Nigeria. Bomu, Kpor, Ogoni Area—ecological destruction due to petroleum. Credit: Markus Matzel/ullstein bild via Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-100">
            <link linkend="b-9781474207300-fig3_4" role="figure">A Fairchild C-123 Provider cargo plane sprays Agent Orange over a forest in North Vietnam. Credit: Bettmann/Contributor.</link>
          </member>
</simplelist>
<?page value="ix"?>
    <bridgehead renderas="sect1" xml:id="b-9781474207300-101">Chapter 4</bridgehead>
<simplelist xml:id="b-9781474207300-102">
<member xml:id="b-9781474207300-103">
            <link linkend="b-9781474207300-fig4_1" role="figure">Mounted Police patrol the South African mine region during the Rand Revolt. Credit: Bettmann/Contributor.</link>
          </member>
<member xml:id="b-9781474207300-104">
            <link linkend="b-9781474207300-fig4_2" role="figure">Alexander Bustamante leads a march of striking dock workers and other laborers in Kingston, Jamaica, 1938. Credit: Bettmann/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-105">
            <link linkend="b-9781474207300-fig4_3" role="figure">African soldiers take part in the Battle of France, 1940. Credit: Galerie Bilderwelt/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-106">
            <link linkend="b-9781474207300-fig4_4" role="figure">Demonstrators protest Nike’s sweatshop production. Credit: Alan Dejecacion/Getty Images.</link>
          </member>
</simplelist>
    <bridgehead renderas="sect1" xml:id="b-9781474207300-107">Chapter 5</bridgehead>
<simplelist xml:id="b-9781474207300-108">
<member xml:id="b-9781474207300-109">
            <link linkend="b-9781474207300-fig5_1" role="figure">Mexican men being registered to work as braceros in 1951. Credit: PhotoQuest/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-110">
            <link linkend="b-9781474207300-fig5_2" role="figure">Western tourists take pictures of destroyed military vehicles in the Golan Heights. Credit: Morse Collection/Gado/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-111">
            <link linkend="b-9781474207300-fig5_3" role="figure">Ugandan Asians arrive at Stansted Airport on a charter flight after being expelled from Uganda, September 18, 1972. Credit: Keystone/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-112">
            <link linkend="b-9781474207300-fig5_4" role="figure">Protestors at Raleigh-Durham International Airport protesting the Muslim travel ban, January 29, 2017. Credit: Leo Chin.</link>
          </member>
</simplelist>
    <bridgehead renderas="sect1" xml:id="b-9781474207300-113">Chapter 6</bridgehead>
<simplelist xml:id="b-9781474207300-114">
<member xml:id="b-9781474207300-115">
            <link linkend="b-9781474207300-fig6_1" role="figure">Postcard of the colonies of the Netherlands, <emphasis role="italic">c</emphasis>. 1900. Credit: Culture Club/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-116">
            <link linkend="b-9781474207300-fig6_2" role="figure">
              <emphasis role="italic">Mui tsai</emphasis>, child slave. Credit: Anti-Slavery International.</link>
          </member>
<member xml:id="b-9781474207300-117">
            <link linkend="b-9781474207300-fig6_3" role="figure">A scene from the film “The Sheik,” in which Rudolph Valentino (1895–1926) embraces Agnes Ayres. Credit: Hulton Archive/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-118">
            <link linkend="b-9781474207300-fig6_4" role="figure">Josephine Baker posing with a tiger rug, <emphasis role="italic">c</emphasis>. 1925. Credit: Hulton Archive/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-119">
            <link linkend="b-9781474207300-fig6_5" role="figure">A man sits in front of OAS graffiti in Algeria, <emphasis role="italic">c</emphasis>. 1962. Credit: Dominique Berretty, Gamma-Rapho Collection/Getty Images.</link>
          </member>
</simplelist>
<?page value="x"?>
    <bridgehead renderas="sect1" xml:id="b-9781474207300-120">Chapter 7</bridgehead>
<simplelist xml:id="b-9781474207300-121">
<member xml:id="b-9781474207300-122">
            <link linkend="b-9781474207300-fig7_1" role="figure">Dr W.E.B. DuBois of the United States, after his speech before the World Congress of Partisans of Peace in Paris. Credit: Bettmann/CORBIS/Bettmann Archive.</link>
          </member>
<member xml:id="b-9781474207300-123">
            <link linkend="b-9781474207300-fig7_2" role="figure">Vietminh poster celebrating the victory of Dien Bien Phu. Credit: Photo by Apic/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-124">
            <link linkend="b-9781474207300-fig7_3" role="figure">Gamal Abdul Nasser of Egypt (center left) talking with Jawaharlal Nehru of India during the Bandung Conference. Credit: Howard Sochurek/The LIFE Picture Collection/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-125">
            <link linkend="b-9781474207300-fig7_4" role="figure">Victory of Robert Mugabe in Rhodesia, 1980. A supporter of Robert Mugabe holding a cock, symbol of the Zanu Party. Credit: Keystone-France/Gamma-Keystone via Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-126">
            <link linkend="b-9781474207300-fig7_5" role="figure">Four starving Biafran children sit and lie around a bowl of food in the dirt during the Nigerian-Biafran civil war. Credit: Hulton Archive/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-127">
            <link linkend="b-9781474207300-fig7_6" role="figure">UN Human Rights Conference in Vienna. Credit: Leopold Nekula/Sygma via Getty Images.</link>
          </member>
</simplelist>
    <bridgehead renderas="sect1" xml:id="b-9781474207300-128">Chapter 8</bridgehead>
<simplelist xml:id="b-9781474207300-129">
<member xml:id="b-9781474207300-130">
            <link linkend="b-9781474207300-fig8_1" role="figure">Black Brazilian women protest. Credit: EVARISTO SA/AFP/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-131">
            <link linkend="b-9781474207300-fig8_2" role="figure">A dalit with a poster of Dr Ambedkar in Chennai. Credit: Claude Renault/Getty Images.</link>
          </member>
<member xml:id="b-9781474207300-132">
            <link linkend="b-9781474207300-fig8_3" role="figure">An Arab prisoner being questioned and jailed in camps during the Zanzibar revolution by local African revolutionaries led by John Gideon Okello, January 12, 1964. Credit: STRINGER/AFP/Getty Images.</link>
          </member>
</simplelist>
<para role="spaceBefore" xml:id="b-9781474207300-133">
          <emphasis role="italic">Every effort has been made to trace copyright holders and to obtain their permission for the use of copyright material. The publisher apologizes for any errors or omissions and would be grateful if notified of any corrections that should be incorporated in future reprints or editions of this book.</emphasis>
        </para>
</toc>
<preface xml:id="b-9781474207300-preface2">
<info xml:id="b-9781474207300-134">
<title xml:id="b-9781474207300-135">
            <?page value="xi"?>General Editor’s Preface</title>
<pagenums>xi–xiv</pagenums>
<mediaobject xml:id="b-9781474207300-136">
<imageobject xml:id="b-9781474207300-137">
<imagedata fileref="pdfs/9781474207300.0004.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
    <author>
            <personname role="first-last">
              <firstname>Antoinette</firstname> <surname>Burton</surname>
            </personname>
          </author>
<copyright>
            <year>2019</year>
            <holder>Bloomsbury Publishing</holder>
          </copyright>
        </info>
<para role="fullOut" xml:id="b-9781474207300-138">Histories of empire have been transformed in the last three decades by a combination of new methods, new archives, and a new generation of scholars who have come of age in a postcolonial world. The impact of these historical forces on how imperialism is understood has been remarkable. For decades the province of geopolitics, diplomacy, and the “official mind,” imperial history is now just as likely to be told from the bottom up as from the top down. The rise of cultural history has played a significant role in how we think about and narrate imperialism from the ancient world to the twentieth century. With an emphasis on evidence drawn from literature, the arts, life-writing, and a host of fragmentary sources, cultural historians think through patterns of representation and experience that shape the conditions in which histories of all kinds—economic, political, social—happen. They investigate often overlooked subjects and offer new angles of vision on familiar topics through a cultural lens. The ambition of <emphasis role="italic">A Cultural History of Western Empires</emphasis> is to advance conversations about the work of culture in shaping how empire took root, took shape, was maintained, and faced challenges whether its regimes were of long or short durée. Indeed, no thoroughgoing histories of the subject can afford to ignore the influence that culture has had on the shape of empires in local, regional, and global contexts.</para>
<para xml:id="b-9781474207300-139">The geographical remit of <emphasis role="italic">A Cultural History of Western Empires</emphasis> is indicated in its title. As compelling a topic as the wide variety of imperial formations is, and as interconnected as west and non-west have been along the axis of empire from Greece to Beijing and back again, the authors in this volume explore empire’s cultural histories in a broadly western European setting. And while the differences between French and German and English imperial experiences are often notable, what is equally striking are the features that cultures of labor, <?page value="xii"?>trade, sexuality, race, war, mobility, natural worlds, and resistance share across imperial locales. Even allowing for specificities of time and place, there is a value to taking a very long view of the concept and practice of <emphasis role="italic">imperium</emphasis>—not simply to note commonalities or differences but to be able to discern through lines across such widely distinctive terrains as the Frankish kingdoms and the world of the post-Versailles settlement. In no small respect, attention to cultural forces, identities, rhetorics, tropes, relationships, and imaginaries make this kind of discernment possible. Reading for culture—which is to say, developing the capacity to plumb a variety of sources and archives for evidence of how meanings and forms were constantly made and struggled over across a range of domains—reveals the work of historical forces that have undergirded and, at times, have redirected or undone imperial power. Empire simply cannot be understood in all its limits and possibilities without an analysis of its cultural histories.</para>
<para xml:id="b-9781474207300-140">This is a work of scholarly synthesis rooted in the original scholarship and intellectual vision of the volume editors and their contributors. Its audience is students seeking a comparative, interdisciplinary, and evidence-based account of how empires worked at multiple scales. Readers will get a sense, then, of the cultural impact of large-scale territorial expansion and hegemony <emphasis role="italic">and</emphasis> of the meaning and experience of conquest and colonization in more intimate environments. Contributors have written their essays to make available a broad overview of their theme or topic. Each one draws on a range of materials and case studies to make a larger argument about the history of cultural formations and influences that pertain to their subject. The series is structured around six time periods: Antiquity, The Medieval Age, The Renaissance, The Enlightenment, The Age of Empire, and the Modern Age. These are conceptual and pedagogical, signaling a periodization that modern Western imperialism itself has played an important role in shaping and sustaining. Casting Rome as an imperial touchtone and colonized territories as “ancient” or “medieval” in temporal terms remains an important cultural resource for contemporary empire-building, and it draws on a long cultural legacy that contributors both address and challenge. Each volume takes up the chronological parameters assigned in critical conversation with the historical evidence, allowing readers to see the pros and cons of thinking about empire itself as a maker—and breaker—of time periods. Of equal significance, each volume is organized with the same chapter titles so that readers can either follow a theme across time frames—mobility in the Enlightenment as compared to the twentieth century, for example—or read through a single period by exploring the range of thematic lenses on offer. This combination of diachronic and synchronic affords us a unique opportunity to cultivate comparisons that are as deep as they are broad, and to appreciate the indispensability of cultural history to practically all aspects of imperial regime making and unmaking across this particular swath of the global past.</para>
<?page value="xiii"?>
<para xml:id="b-9781474207300-141">Such a purposeful focus on culture at this juncture in the history of the historiography of empire is worth remarking on. As an object of historical inquiry, culture is arguably the carrier of a number of historical forces that attention to politics or economics alone cannot capture. Though embedded in and constitutive of every aspect of imperial geopolitics, race, gender, and sexuality were long invisible to the historians’ eye because they were considered trivial, or at best inconsequential, to the workings of real power. Cultural history practices, which bring new forms of seeing and reading as well as new subjects to our sightline, open up the imperial archive to aspects of the past, which, in turn, shed new light on old paradigms. Thinking with and through culture also reorients our gaze, pulling us toward sources—diaries, images, discursive motifs—in a diverse array of formations and spaces that illuminate dimensions of hegemony and power otherwise invisible: dismiss-able, even, as immaterial because they are ostensibly “only cultural.” What the collective example of this series accomplishes is to suggest how, why, and under what conditions culture has been a maker of imperial history—indeed, that empires have been done and undone by the cultural forces they sought to control but which were not always completely in their grasp. As twenty-first-century forms of imperial power emerge, claiming historical newness and relying on past models of conquest and occupation all at once, we need narratives that insist on the power of histories attuned to the ideological and material work of culture more than ever.</para>
<para xml:id="b-9781474207300-142">Culture is at the dynamic heart of all imperial histories. It operates in spaces of high command and conjugal intimacy; in ceremony and in ordinary life; in military documents and botanists’ texts; at court and on the plantation; through trade routes and refugee settlements; in the pronouncements of empresses and the movements of the lowly beetle; in the signing of treaties and the violence of the battlefield and the inner workings of the household. Thinking through cultures of empire, in turn, throws us back on the protocols and presumptions of the discipline by encouraging us to be ever vigilant about where—in what spaces and through what repertoires—history happens. Empire is not, perhaps, unique in this regard. The irony is that while imperial ambition and self-regard have often been steeped in convictions about the power of culture to conquer and colonize, imperial narratives on a grand scale are often the most impervious to the argument that culture matters. What follows is a wide-ranging and lively set of arguments about how and why that has been incontrovertibly so from antiquity to modern times.</para>
<?page value="xiv"?>
</preface>
</part>
<chapter xml:id="b-9781474207300-intro1">
<info xml:id="b-9781474207300-144">
<title xml:id="b-9781474207300-145">
          <?page value="1"?>Introduction<footnote label="1" role="end-bk-note" xml:id="b-9781474207300-fnI_1">
            <para xml:id="b-9781474207300-146">My thanks to Patrick Wiltz for locating the cover image to the volume.</para>
          </footnote>
        </title>
<author xlink:href="C0006" xlink:role="biblioAuID">
<personname role="first-last">
<firstname>Patricia</firstname> <othername role="middle-initials">M.E.</othername> <surname>Lorcin</surname>
          </personname>
        </author>
<pagenums>1–20</pagenums>
<biblioid class="doi">10.5040/9781474207300.0005</biblioid>
<mediaobject xml:id="b-9781474207300-147">
<imageobject xml:id="b-9781474207300-148">
<imagedata fileref="pdfs/9781474207300.0005.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
<itermset xml:id="b-9781474207300-IDX-see1">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-50002">
            <primary>Second World War</primary>
            <see>World War II</see>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-50001">
            <primary>National Liberation Front</primary>
            <see>
              <emphasis role="italic">Front National de Libération</emphasis>
            </see>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-334">
            <primary>Ceylon</primary>
            <see>Sri Lanka</see>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-595">
            <primary>First World War</primary>
            <see>World War I</see>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-755">
            <primary>Gold Coast</primary>
            <see>Ghana</see>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-823">
            <primary>Great War</primary>
            <see>World War I</see>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-994">
            <primary>International Bank for Reconstruction and Development, IBRD#</primary>
            <see>World Bank</see>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1326">
            <primary>Myanmar</primary>
            <see>Burma</see>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1632">
            <primary>Second Indochinese War</primary>
            <see>Vietnam War</see>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1876">
            <primary>United Kingdom</primary>
            <see>Great Britain</see>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1964">
            <primary>USSR</primary>
            <see>Soviet Union</see>
          </indexterm>
        </itermset>
<copyright>
          <year>2019</year>
          <holder>Bloomsbury Publishing</holder>
        </copyright>
      </info>
<epigraph xml:id="b-9781474207300-150">
<attribution>—Ben <indexterm class="singular" xml:id="b-9781474207300-IDX-2007">
            <primary>Wattenberg, Ben</primary>
          </indexterm>Wattenberg (quoted by <link linkend="b-9781474207300-ref408" role="bib">Mirrlees 2006</link>: 203)</attribution>
<para xml:id="b-9781474207300-151">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-207">
            <primary>Belgium</primary>
          </indexterm>Only Americans have the sense of mission and gall to engage in benign, but energetic global cultural advocacy. We are the most potent cultural imperialists in history.</para>
</epigraph>
<para role="fullOut" xml:id="b-9781474207300-152">When the Treaty of Versailles took effect on January 1, 1920, the stature of the Western empires, hitherto seemingly firmly grounded, was undermined.<footnote label="2" role="end-bk-note" xml:id="b-9781474207300-fnI_2">
          <para xml:id="b-9781474207300-153">The treaty was signed on June 28, 1919.</para>
        </footnote> The misleading triumph of the war’s endgame for the Allies, which saw the demise of four empires—the Austro-Hungarian, the German, the Russian, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1449">
          <primary>Ottoman Empire</primary>
        </indexterm>Ottoman—held the seeds of the undoing of the remaining European empires and the rise to prominence of that of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1894">
          <primary>United States</primary>
        </indexterm>United States. To be sure, in the war’s immediate aftermath the Belgians were mandated <indexterm class="singular" xml:id="b-9781474207300-IDX-1605">
          <primary>Rwanda-Urundi</primary>
        </indexterm>Rwanda-Urundi while the British and French acquired the colonial spoils of Germany in <indexterm class="singular" xml:id="b-9781474207300-IDX-1745">
          <primary>Sub-Saharan Africa</primary>
        </indexterm>sub-Saharan Africa and procured mandates in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1265">
          <primary>Middle East</primary>
        </indexterm>Middle East, thus temporarily endorsing their imperial hegemony. But, by coming to the aid of the Allies during the war, the Americans gained a theoretical toehold in Europe that would lead, throughout the twentieth century, to increasing influence both on the continent itself and eventually in Europe’s disintegrating overseas empires. As the century progressed, the cultural imperialism, championed by Wattenberg, would be matched by an overseas military culture that was geared to protect US strategic and economic interests. By the end of the twentieth century, it was the only <indexterm class="singular" xml:id="b-9781474207300-IDX-722">
          <primary>Germany</primary>
          <secondary>empire</secondary>
        </indexterm>
        <indexterm class="singular" xml:id="b-9781474207300-IDX-1598">
          <primary>Russia</primary>
          <secondary>empire</secondary>
        </indexterm>empire remaining. As Irving <indexterm class="singular" xml:id="b-9781474207300-IDX-1118">
          <primary>Kristol, Irving</primary>
        </indexterm>Kristol aptly put it in the <emphasis role="italic">Wall Street Journal</emphasis> in 1997, … the United States has come to dominate the <indexterm class="singular" xml:id="b-9781474207300-IDX-2046">
          <primary>World War I</primary>
        </indexterm>world militarily and culturally.”</para>
<para xml:id="b-9781474207300-154">Prefiguring these developments, President Woodrow <indexterm class="singular" xml:id="b-9781474207300-IDX-2024">
          <primary>Wilson, Woodrow</primary>
        </indexterm>Wilson, one of the three foremost leaders presiding over the Treaty negotiations, believed that, in <?page value="2"?>the wake of the war’s tragedy, it was incumbent on the <indexterm class="singular" xml:id="b-9781474207300-IDX-1895">
          <primary>United States</primary>
        </indexterm>United States to assume a prominent role in the regulation of world affairs (<link linkend="b-9781474207300-ref470" role="bib">Reynolds 2014</link>: 9). In his January 1918 speech, Wilson outlined his <indexterm class="singular" xml:id="b-9781474207300-IDX-602">
          <primary>fourteen points</primary>
        </indexterm>fourteen points and advocated, among other things, <indexterm class="singular" xml:id="b-9781474207300-IDX-668">
          <primary>Free Trade</primary>
        </indexterm>free trade, <indexterm class="singular" xml:id="b-9781474207300-IDX-476">
          <primary>democracy</primary>
        </indexterm>democracy, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1633">
          <primary>self-determination</primary>
        </indexterm>self-determination. The speech appeared to target not only the Continent but also the Continent’s colonial powers, whose territories had neither free trade, democracy, nor self-determination. Point five, furthermore, actually pertained to the colonies and was ambiguous enough to suggest an endorsement of the idea of equal rights for the colonized peoples.<footnote label="3" role="end-bk-note" xml:id="b-9781474207300-fnI_3">
          <para xml:id="b-9781474207300-155">“A free, open-minded and absolutely impartial adjustment of all colonial claims based upon a strict observance of the principle that in determining all such questions of sovereignty, the interests of the populations concerned must have equal weight with the equitable claims of the government whose title is to be determined.” <emphasis role="italic">8 January, 1918: President Woodrow Wilson’s Fourteen Points</emphasis>, Lillian Goldman Law Library, The Avalon Project, documents in Law, History, and Diplomacy, <link xlink:href="http://avalon.law.yale.edu/20th_century/wilson14.asp">
              <uri>http://avalon.law.yale.edu/20th_century/wilson14.asp</uri>
            </link>, accessed July 1, 2016.</para>
        </footnote> David <indexterm class="singular" xml:id="b-9781474207300-IDX-1178">
          <primary>Lloyd George, David</primary>
        </indexterm>Lloyd George and Georges <indexterm class="singular" xml:id="b-9781474207300-IDX-363">
          <primary>Clemenceau, Georges</primary>
        </indexterm>Clemenceau, the leaders of the two largest European colonial empires, inevitably were skeptical of Wilson’s idealism. More to the point, however, was their desire to implement the agreement conceived by Mark <indexterm class="singular" xml:id="b-9781474207300-IDX-1764">
          <primary>Sykes, Mark</primary>
        </indexterm>Sykes and François <indexterm class="singular" xml:id="b-9781474207300-IDX-712">
          <primary>Georges-Picot, François</primary>
        </indexterm>Georges-Picot in 1916, which set out the potential British and French spheres of cultural and economic influence in <indexterm class="singular" xml:id="b-9781474207300-IDX-143">
          <primary>Asia Minor</primary>
        </indexterm>Asia Minor, once the war was over and the “<indexterm class="singular" xml:id="b-9781474207300-IDX-1470">
          <primary>Palestine</primary>
        </indexterm>Palestine question” could be satisfactorily resolved.<footnote label="4" role="end-bk-note" xml:id="b-9781474207300-fnI_4">
          <para xml:id="b-9781474207300-156">The Sykes-Picot Agreement was signed by Lord Grey for the British and Paul Cambon for the French.</para>
        </footnote> The compromise reached in response to Wilson’s idea of a new world order in which annexation or colonization was to be discouraged, was the <indexterm class="singular" xml:id="b-9781474207300-IDX-1221">
          <primary>mandate system</primary>
        </indexterm>mandate system. As perverse as it may now seem, the mandate system was deemed to be a trusteeship during which, according to the prevailing conceit, the strong would protect the weak (<link linkend="b-9781474207300-ref380" role="bib">MacMillan 2003</link>: 98–106). In theory, it was unlike bone fide colonization; in practice, there was little difference (see <link linkend="b-9781474207300-ref451" role="bib">Pedersen 2015</link>). The feature that set the mandates apart from longer standing colonies, was the absence of a substantial settler base. The ideological underpinning of the strong protecting the weak was merely a reiteration, in a new guise, of the British sociologist, Benjamin <indexterm class="singular" xml:id="b-9781474207300-IDX-1104">
          <primary>Kidd, Benjamin</primary>
        </indexterm>Kidd’s (1858–1916) mantra of the Europeans as the “trustees of civilization.”</para>
<para xml:id="b-9781474207300-157">The Mandates were established under Article 22 of the Covenant of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1150">
          <primary>League of Nations</primary>
        </indexterm>League of Nations, which came into being in January 1920, with the finer details being determined at the <indexterm class="singular" xml:id="b-9781474207300-IDX-289">
          <primary>Cairo Conference (1921)</primary>
        </indexterm>Cairo Conference of 1921 (<link linkend="b-9781474207300-ref573" role="bib">Wallach [1996] 2005</link>: 294–301). If the British and French leaders were wary of Wilson’s ideas for a new world order, intellectuals in the colonies were hopeful that the League of Nations was a path to more equality or, better still, eventual independence. With this in mind, individuals like Emir <indexterm class="singular" xml:id="b-9781474207300-IDX-1097">
          <primary>Khaled, Emir</primary>
        </indexterm>Khaled, the grandson of Abd <indexterm class="singular" xml:id="b-9781474207300-IDX-85">
          <primary>al-Qadir, Abd</primary>
        </indexterm>al-Qadir, the nineteenth-century leader of the opposition against the <indexterm class="singular" xml:id="b-9781474207300-IDX-58">
          <primary>Algeria</primary>
          <secondary>French conquest</secondary>
        </indexterm>French conquest of Algeria, wrote to Wilson requesting Algerian representation at Versailles in the hope that the “Algerian question” would be placed before the League of Nations (<link linkend="b-9781474207300-ref402" role="bib">McDougall 2008</link>: 46). Although Khaled’s intention was geared to seek allies in his quest for Algerian autonomy, or even independence, it nonetheless was an early indication of the gradual overshadowing of the European empires by the United States. US <indexterm class="singular" xml:id="b-9781474207300-IDX-1945">
          <primary>United States</primary>
          <secondary>imperialism</secondary>
        </indexterm>imperialism preceded the twentieth century, of course, but the events of the twentieth century led to its development into the leading western imperial power.<footnote label="5" role="end-bk-note" xml:id="b-9781474207300-fnI_5">
          <para xml:id="b-9781474207300-158">There is no space in this introduction to engage with the debates about the similarities and differences between nation-states and imperialism, which have recently preoccupied scholars. For more on these issues, see Burbank and Cooper (<link linkend="b-9781474207300-ref90" role="bib">2010</link>) and Alessio and Renfro (<link linkend="b-9781474207300-ref17" role="bib">2016</link>). Nor is it possible to revisit debates about Germany’s Nazi period and the quest for <emphasis role="italic">lebensraum</emphasis>.</para>
        </footnote>
      </para>
<?page value="3"?>
<section xml:id="b-9781474207300-159">
<info xml:id="b-9781474207300-160">
<title xml:id="b-9781474207300-161">The Interwar Years</title>
<itermset xml:id="b-9781474207300-IDX-see2">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-973">
              <primary>Indonesia</primary>
            </indexterm>
            <indexterm class="singular" xml:id="b-9781474207300-IDX-912">
              <primary>imperialism</primary>
            </indexterm>
            <indexterm class="singular" xml:id="b-9781474207300-IDX-605">
              <primary>France</primary>
            </indexterm>
            <indexterm class="singular" xml:id="b-9781474207300-IDX-108">
              <primary>anti-colonialism</primary>
            </indexterm>
            <indexterm class="singular" xml:id="b-9781474207300-IDX-46">
              <primary>agriculture</primary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-162">The <indexterm class="singular" xml:id="b-9781474207300-IDX-1000">
            <primary>interwar period</primary>
          </indexterm>interwar period was, paradoxically, the high point of European colonialism while simultaneously being the swansong of its empires. The <indexterm class="singular" xml:id="b-9781474207300-IDX-2047">
            <primary>World War I</primary>
          </indexterm>war had sapped European strength, morally and financially, and any hope that the colonies could provide succor was soon undercut by the emergence of structured anticolonialism and the impact on settler societies of the <indexterm class="singular" xml:id="b-9781474207300-IDX-763">
            <primary>Great Britain</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-815">
            <primary>Great Depression</primary>
          </indexterm>Great Depression. In the immediate aftermath of the war, however, the colonial offices of the metropoles did not see the potential unravelling of their hegemony. Rather, they looked to the colonies to solve some of the problems that the war had created. The acquisition by the <indexterm class="singular" xml:id="b-9781474207300-IDX-261">
            <primary>British East Africa Protectorate</primary>
          </indexterm>British of the <indexterm class="singular" xml:id="b-9781474207300-IDX-713">
            <primary>German East Africa</primary>
          </indexterm>German East <indexterm class="singular" xml:id="b-9781474207300-IDX-41">
            <primary>African Trading Corporation</primary>
          </indexterm>African lands meant that the British East African Protectorate was divided up into territories that became colonies in their own right. In order to try and populate areas like the newly established colony of <indexterm class="singular" xml:id="b-9781474207300-IDX-1077">
            <primary>Kenya</primary>
          </indexterm>Kenya, where settler population was low, the British government implemented a <indexterm class="singular" xml:id="b-9781474207300-IDX-1677">
            <primary>Soldier Settlement Scheme</primary>
          </indexterm>Soldier Settlement Scheme for demobilized military personnel and made 2.54 million acres (1.03 million hectares) of land available for white settlement, most of which came from the African reserves.</para>
<para xml:id="b-9781474207300-163">In 1922, Lord Frederick <indexterm class="singular" xml:id="b-9781474207300-IDX-1179">
            <primary>Lugard, Lord Frederick</primary>
          </indexterm>Lugard published <emphasis role="italic">The Dual Mandate in British Tropical Africa.</emphasis> Influenced by his service as High Commissioner of the protectorate of Northern <indexterm class="singular" xml:id="b-9781474207300-IDX-1386">
            <primary>Nigeria</primary>
          </indexterm>Nigeria, he advocated indirect rule or collaboration between native chiefs, their underlings, and colonial administrators. It was essential, he wrote, “that democracy should take an intelligent and well-informed interest in questions which affect the Empire of which it is the inheritor and trustee” (<link linkend="b-9781474207300-ref372" role="bib">Lugard 1922</link>: 7). Lugard was conscious that the Great War had undermined European social and political structures and greatly weakened its participants, but was confident that, with proper guidance, the imperial territories had the potential to help the metropoles back on their feet. Similarly, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1362">
            <primary>Netherlands</primary>
          </indexterm>Netherlands announced “a new approach to colonial management” in the Dutch East Indies whereby they would improve relations through increased agricultural output, expand the <indexterm class="singular" xml:id="b-9781474207300-IDX-517">
            <primary>education</primary>
          </indexterm>education of vernacular languages, and provide the wherewithal to improve Indonesian living standards (<link linkend="b-9781474207300-ref73" role="bib">Booth 2012</link>: 1148). Although the Dutch were not motivated by the same impulse as Lugard, having remained neutral during the war, their interest was to make the colony pay for itself, rather than sap their healthy GDP. Indeed, similar initiatives were taken in several parts of colonized Asia and Africa as European business enterprises invested heavily in their colonies (<link linkend="b-9781474207300-ref1" role="bib">Abernethy 2000</link>: 113; <link linkend="b-9781474207300-ref73" role="bib">Booth 2012</link>: 1147). Companies such as <indexterm class="singular" xml:id="b-9781474207300-IDX-1673">
            <primary>
              <emphasis role="italic">Société Commerciale de l’Ouest Africain</emphasis>, SCOA</primary>
          </indexterm>Société Commerciale de l’Ouest Africain (SCOA) and the <indexterm class="singular" xml:id="b-9781474207300-IDX-407">
            <primary>
              <emphasis role="italic">Compagnie Française de l’Afrique Occidentale</emphasis>, CFAO</primary>
          </indexterm>Compagnie Française de l’Afrique Occidentale (CFAO) in French sub-Saharan Africa and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1872">
            <primary>United Africa Company, UAC</primary>
          </indexterm>United Africa Company (UAC) in <indexterm class="singular" xml:id="b-9781474207300-IDX-270">
            <primary>British West Africa</primary>
          </indexterm>British West Africa, which had been established in some form prior to the war, fanned out across the colonial territories and this in spite of the Depression. UAC, for example, originally a merger of the African and <indexterm class="singular" xml:id="b-9781474207300-IDX-514">
            <primary>Eastern Trading Corporation</primary>
          </indexterm>Eastern Trading Corporation and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1383">
            <primary>Niger Company</primary>
          </indexterm>Niger Company, encountered serious economic difficulties <?page value="4"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure0_1"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1579">
            <primary>Rivera, Diego</primary>
          </indexterm>during the Depression, but these were resolved with its takeover in the thirties, by <indexterm class="singular" xml:id="b-9781474207300-IDX-1868">
            <primary>Unilever</primary>
          </indexterm>Unilever, the Anglo-Dutch trading company. With the growth of the <indexterm class="singular" xml:id="b-9781474207300-IDX-168">
            <primary>automobile industry</primary>
          </indexterm>automobile industry (<link linkend="b-9781474207300-fig0_1" role="figure">Figure 0.1</link>), furthermore, <indexterm class="singular" xml:id="b-9781474207300-IDX-1586">
            <primary>rubber</primary>
          </indexterm>rubber became a prized commodity. As cultural and social enthusiasm for the automobile grew, rubber plantations were established and flourished in a number of colonies, most notably in British <indexterm class="singular" xml:id="b-9781474207300-IDX-1202">
            <primary>Malaya</primary>
          </indexterm>Malaya, French <indexterm class="singular" xml:id="b-9781474207300-IDX-960">
            <primary>Indochina</primary>
          </indexterm>Indochina, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-202">
            <primary>Belgian Congo</primary>
          </indexterm>Belgian Congo.</para>
<figure label="0.1" xlink:href="b-9781474207300-figure0_1" xlink:role="objectPointer" xml:id="b-9781474207300-fig0_1">
<info xml:id="b-9781474207300-164">
<title xml:id="b-9781474207300-165">Detroit Industry, fresco on the South wall, 1932–3, by Diego Rivera (1886–1957), Detroit Institute of Arts, Michigan, United States of America. Credit: DeAgostini/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-166">
<imageobject xml:id="b-9781474207300-167">
<imagedata align="center" fileref="images/fig0_1.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-169">In spite of these developments and the seeming opportunities that they could offer the local population, it was the colonial establishment that continued to reap the benefits. Thus, the notion that improved relations and increased rights for the colonized peoples might help to create a cooperative workforce that could mitigate the disasters—both economic and human—of the war, or ensure that the colony paid for itself, was not always accompanied by the sort of democratic impulse that Lugard or the Dutch were advocating.</para>
<para xml:id="b-9781474207300-170">In the Belgian Congo, for example, unlike plantation-produced rubber, the Belgians had focused on the harvesting of wild rubber. As accessible areas were depleted and the Belgians pushed their labor force further and further into the hinterland, it led to inhuman cruelty on a massive scale. The journalist and politician, E.D. <indexterm class="singular" xml:id="b-9781474207300-IDX-1304">
            <primary>Morel, Edmund D.</primary>
          </indexterm>Morel first castigated Belgian methods in <link linkend="b-9781474207300-ref413" role="bib">
            <emphasis role="italic">Red Rubber</emphasis>
          </link> (1906). Two decades later, André <indexterm class="singular" xml:id="b-9781474207300-IDX-743">
            <primary>Gide, André</primary>
          </indexterm>Gide’s <emphasis role="italic">Voyage au Congo</emphasis> (<link linkend="b-9781474207300-ref231" role="bib">1927</link>) raised similar <?page value="5"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-395">
            <primary>communism</primary>
          </indexterm>concerns. Nothing was done to improve the situation where workers’ rights were entirely overlooked.</para>
<para xml:id="b-9781474207300-171">In Algeria, where the <indexterm class="singular" xml:id="b-9781474207300-IDX-59">
            <primary>Algeria</primary>
            <secondary>French conquest</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-60">
            <primary>Algeria</primary>
            <secondary>French settlers</secondary>
          </indexterm>French notions of liberty, equality, and fraternity could have led to a more equitable situation, the 1930 centenary celebrations of the conquest were held amidst impolitic colonial grandstanding with little consideration for Algerian sensibilities. Six years later, the <indexterm class="singular" xml:id="b-9781474207300-IDX-229">
            <primary>Blum-Violette Bill</primary>
          </indexterm>Blum-Violette Bill, which sought to grant a select group of Muslims access to French citizenship and hence the vote, was quashed by the settlers. To disappointments such as these was added the disillusionment throughout the European empires that the colonized subjects, who had fought in large numbers for the colonial powers during the war, were presented with little more than medals. Furthermore, the relentless bloodletting of the war had undermined the image and ideological underpinning of the civilizational superiority proffered by the Europeans.</para>
<para xml:id="b-9781474207300-172">The interwar years in the colonies were thus characterized by increasing unrest. In <indexterm class="singular" xml:id="b-9781474207300-IDX-918">
            <primary>India</primary>
          </indexterm>India, Britain’s foremost colony, the <indexterm class="singular" xml:id="b-9781474207300-IDX-951">
            <primary>Indian National Congress</primary>
          </indexterm>Indian National Congress, first formed in 1885, was already a well-organized movement. In conjunction with Mahatma <indexterm class="singular" xml:id="b-9781474207300-IDX-703">
            <primary>Gandhi, Mahatma</primary>
          </indexterm>Gandhi’s 1909 tract <emphasis role="italic">Hind Swaraj</emphasis> (Home Rule), anticolonialism in India developed throughout the post-First World War period into a non-violent mass movement, which eventually led to independence in 1947. Protest in other colonies was not as peaceful. In French Indochina, for example, the short-lived 1930 <indexterm class="singular" xml:id="b-9781474207300-IDX-2082">
            <primary>Yên Bái Revolt</primary>
          </indexterm>Yên Bái revolt was met with brutal reprisals, triggering a peasant uprising that took a year to suppress and prompting Ho Chi <indexterm class="singular" xml:id="b-9781474207300-IDX-1282">
            <primary>Minh, Ho Chi</primary>
          </indexterm>Minh to form the Indochinese Communist Party. Throughout the European empires, in Africa and Asia, protest movements of various strengths and ideological hues struggled to attain autonomy or independence (<link linkend="b-9781474207300-ref303" role="bib">Isaacman and Isaacman 1983</link>; <link linkend="b-9781474207300-ref131" role="bib">Clayton 1994</link>; <link linkend="b-9781474207300-ref145" role="bib">Cooper 1996b</link>; <link linkend="b-9781474207300-ref540" role="bib">Thomas <emphasis role="italic">et al.</emphasis> [2007] 2015</link>; <link linkend="b-9781474207300-ref493" role="bib">Shipway 2008</link>; <link linkend="b-9781474207300-ref539" role="bib">Thomas and Curless 2017</link>). In <indexterm class="singular" xml:id="b-9781474207300-IDX-974">
            <primary>Indonesia</primary>
          </indexterm>Indonesia, in spite of Dutch attempts to improve relations with the local population, by 1927 <indexterm class="singular" xml:id="b-9781474207300-IDX-1755">
            <primary>Sukarno</primary>
          </indexterm>Sukarno had formed the <indexterm class="singular" xml:id="b-9781474207300-IDX-985">
            <primary>Indonesian Nationalist Party, PNI</primary>
          </indexterm>Indonesian Nationalist Party (PNI). The rapid expansion of its membership prompted the Dutch into action imprisoning Sukarno and curtailing PNI action (<link linkend="b-9781474207300-ref157" role="bib">Dahm 1969</link>; <link linkend="b-9781474207300-ref355" role="bib">Legge 1972</link>). In spite of these developments, most colonial administrations appeared oblivious or chose to ignore the changes resonating among their subject populations. The sapping of European imperial power was also evidenced by the fact that diplomatic and financial concessions, which had been obtained from the Ottomans and Chinese during the nineteenth and early twentieth centuries, were abrogated. At the instigation of Kemal <indexterm class="singular" xml:id="b-9781474207300-IDX-147">
            <primary>Ataturk, Kemal</primary>
          </indexterm>Ataturk, the 1923 <indexterm class="singular" xml:id="b-9781474207300-IDX-1146">
            <primary>Lausanne Treaty</primary>
          </indexterm>Lausanne Treaty abolished the <indexterm class="singular" xml:id="b-9781474207300-IDX-316">
            <primary>capitulations</primary>
          </indexterm>Capitulations, granted by the Ottomans. The “unequal treaties” between the western powers (including the United States) and the Chinese—the result of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1437">
            <primary>Opium Wars</primary>
          </indexterm>Opium Wars—were abolished in stages, first at the 1922 <indexterm class="singular" xml:id="b-9781474207300-IDX-2006">
            <primary>Washington Conference (1922)</primary>
          </indexterm>Washington Conference when the Chinese managed to curtail foreign governments’ jurisdiction over their nationals residing in <indexterm class="singular" xml:id="b-9781474207300-IDX-342">
            <primary>China</primary>
          </indexterm>China and completely by 1930 (<link linkend="b-9781474207300-ref1" role="bib">Abernethy 2000</link>: 111).</para>
<?page value="6"?>
<para xml:id="b-9781474207300-173">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-585">
            <primary>fascism</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-863">
            <primary>hierarchy</primary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1110">
            <primary>King Kong</primary>
          </indexterm>Of all the western nations, only the <indexterm class="singular" xml:id="b-9781474207300-IDX-1896">
            <primary>United States</primary>
          </indexterm>United States was to consolidate its existing imperial power and, beginning in the interwar period, was to start its gradual move toward the position of dominant global power. The nineteenth century had witnessed US expansionism into the <indexterm class="singular" xml:id="b-9781474207300-IDX-1458">
            <primary>Pacific Ocean</primary>
          </indexterm>Pacific, <indexterm class="singular" xml:id="b-9781474207300-IDX-1696">
            <primary>South America</primary>
          </indexterm>South America, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-317">
            <primary>Caribbean</primary>
          </indexterm>Caribbean, but it had remained an essentially regional player. Coming to the aid of Allied Forces during the First World War was not only decisive militarily for the Allies, it was also symbolic of the US move from regional to global involvement not just militarily but also economically. Starting in the interwar period, aspects of American popular culture started to take hold in Europe, the beginning of what Victoria <indexterm class="singular" xml:id="b-9781474207300-IDX-456">
            <primary>de Grazia, Victoria</primary>
          </indexterm>de Grazia (<link linkend="b-9781474207300-ref164" role="bib">2005</link>) has dubbed “the irresistible empire.” The First World War had swept away the European hierarchical certainties of the prewar period and <indexterm class="singular" xml:id="b-9781474207300-IDX-1238">
            <primary>mass mobilization</primary>
          </indexterm>mass mobilization had had a radicalizing impact on the populace. The Russian <indexterm class="singular" xml:id="b-9781474207300-IDX-1603">
            <primary>Russia</primary>
            <secondary>revolution</secondary>
          </indexterm>Revolution, the failed <indexterm class="singular" xml:id="b-9781474207300-IDX-1724">
            <primary>Sparticist Revolt</primary>
          </indexterm>Sparticist revolt, and the waves of strikes throughout Europe in the immediate aftermath of the war signaled a desire for change among the populations at large that would respond to the innovations of American <indexterm class="singular" xml:id="b-9781474207300-IDX-1236">
            <primary>mass culture</primary>
          </indexterm>mass culture.</para>
<para xml:id="b-9781474207300-174">It was the emerging cultural product from <indexterm class="singular" xml:id="b-9781474207300-IDX-877">
            <primary>Hollywood film industry</primary>
          </indexterm>Hollywood—feature films—that would become the most effective means of spreading US culture throughout the world and help to transform it into the leading imperium (<link linkend="b-9781474207300-fig0_2" role="figure">Figure 0.2</link>). John Trumpbour (<link linkend="b-9781474207300-ref550" role="bib">2002</link>), among others, has demonstrated the political wrangling that went on between the United States and European countries, in particular, Britain, France, and Belgium, over the distribution of Hollywood films in their respective countries. European elites, whether political or cultural, were alarmed at the potential erosion of their national values, which the messages of the films and the lifestyles of their stars epitomized. The endorsement of mass culture that the film industry symbolized represented both a potential disruption of established hierarchical values in the metropole but also suggested a more devastating unraveling of such values in the European colonies. <indexterm class="singular" xml:id="b-9781474207300-IDX-367">
            <primary>Coca-Cola</primary>
          </indexterm>Coca-Cola, hamburgers, and jeans would eventually become the symbols of American cultural dominance, but it was the film industry, which had an insidious cultural, social, and eventually political influence that served as a counterculture to Europe and its empires. Its importance as a tool for the spread of American influence is suggested by the involvement of the US <indexterm class="singular" xml:id="b-9781474207300-IDX-1956">
            <primary>United States</primary>
            <secondary>State Department</secondary>
          </indexterm>State Department in negotiating agreements rather than leaving it to the <indexterm class="singular" xml:id="b-9781474207300-IDX-1932">
            <primary>United States</primary>
            <secondary>Commerce Department</secondary>
          </indexterm>Commerce Department, as would normally be the case (<link linkend="b-9781474207300-ref550" role="bib">Trumpbour 2002</link>).</para>
<para xml:id="b-9781474207300-175">US cultural penetration was not without its opponents, however, and the thirties saw a conservative backlash against “<indexterm class="singular" xml:id="b-9781474207300-IDX-2080">
            <primary>Yankee culture</primary>
          </indexterm>Yankee culture.” In France, where extreme right and fascist groups were much in evidence, American art forms were denigrated as “judeo-negro-américane” jazz and “Israëlite cinema.” The backlash was even harsher in Germany where <indexterm class="singular" xml:id="b-9781474207300-IDX-867">
            <primary>Hitler, Adolph</primary>
          </indexterm>Hitler and his cohorts closely associated it with a “decadent” <indexterm class="singular" xml:id="b-9781474207300-IDX-2011">
            <primary>Weimar Republic</primary>
          </indexterm>Weimar Republic and <indexterm class="singular" xml:id="b-9781474207300-IDX-753">
            <primary>Goebbels, Joseph</primary>
          </indexterm>Goebbels labeled American jazz as “the art of the subhuman” (<link linkend="b-9781474207300-ref550" role="bib">Trumpbour 2002</link>: 231; <link linkend="b-9781474207300-ref589" role="bib">Wipplinger 2017</link>). <?page value="7"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-5001">
            <primary>World War II</primary>
          </indexterm>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure0_2"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-449">
            <primary>Dance, Charleston</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-723">
            <primary>Germany</primary>
            <secondary>empire</secondary>
          </indexterm>Nonetheless, such opposition was unable to stop the appeal of American culture for the general population. In addition to jazz, the popularity of performers such as Josephine <indexterm class="singular" xml:id="b-9781474207300-IDX-176">
            <primary>Baker, Josephine</primary>
          </indexterm>Baker or “new-fangled” dances such as the Charleston, suggested that American culture provided a form of escapism from the haunting horrors of the Great War and from the values of the hidebound societies of the prewar past. In much the same way as US troops had come to the rescue of the war-weary Allied troops during the war, American culture was now helping to alleviate Europe’s war-weary societies.</para>
<figure label="0.2" xlink:href="b-9781474207300-figure0_2" xlink:role="objectPointer" xml:id="b-9781474207300-fig0_2">
<info xml:id="b-9781474207300-176">
<title xml:id="b-9781474207300-177">
              <emphasis role="italic">King Kong</emphasis> (1933). Credit: Hulton Archive/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-178">
<imageobject xml:id="b-9781474207300-179">
<imagedata align="center" fileref="images/fig0_2.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
</section>
<section xml:id="b-9781474207300-181">
<info xml:id="b-9781474207300-182">
<title xml:id="b-9781474207300-183">The Second World War and The Clash of Empires</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-184">If the interwar period was characterized by intimations of the emergence of US global hegemony, the Second World War was the decisive factor in tipping the balance from the European form of imperialism toward that of the United States. The war itself was, in many respects, a second clash of empires pitting the western imperial forces against those of Germany and <indexterm class="singular" xml:id="b-9781474207300-IDX-1044">
            <primary>Japan</primary>
          </indexterm>Japan. During the war, Germany’s short-term imperial interests were restricted to occupying <indexterm class="endofrange" startref="b-9781474207300-IDX-1110" xml:id="b-9781474207300-IDX-end127"/>the <?page value="8"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-461">
            <primary>decolonization</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-486">
            <primary>Điê˙n Biên Phủ</primary>
          </indexterm>continent and battling the Allied forces in and around the <indexterm class="singular" xml:id="b-9781474207300-IDX-1258">
            <primary>Mediterranean Sea</primary>
          </indexterm>Mediterranean, but had the war’s outcome been otherwise the colonies of the occupied countries would, no doubt, have been part of the victor’s spoils. The Japanese, meanwhile, were marching through the European colonies in <indexterm class="singular" xml:id="b-9781474207300-IDX-131">
            <primary>Asia</primary>
          </indexterm>Asia and in 1941 attacked the American naval base at <indexterm class="singular" xml:id="b-9781474207300-IDX-1486">
            <primary>Pearl Harbor</primary>
          </indexterm>Pearl Harbor to prevent the Americans coming to the aid of Europe’s beleaguered Asian colonies. The US decision to enter the war and, in particular, the choice to privilege the European arena before the Asian, was a decisive factor in the war’s outcome. At the war’s end, two potential empires—the German and the Japanese—were shattered and European imperialism was in tatters.</para>
<para xml:id="b-9781474207300-185">The overrunning of the European colonies by the Japanese during the war hastened their independence. Although India had escaped the Japanese onslaught, it gained its independence in 1947, followed by its blood-stained partition into two countries. Independence for the remaining British Asian colonies followed shortly after: Ceylon (<indexterm class="singular" xml:id="b-9781474207300-IDX-1727">
            <primary>Sri Lanka</primary>
          </indexterm>Sri Lanka) and <indexterm class="singular" xml:id="b-9781474207300-IDX-275">
            <primary>Burma</primary>
          </indexterm>Burma (Myanmar) in 1948, while <indexterm class="singular" xml:id="b-9781474207300-IDX-1203">
            <primary>Malaya</primary>
          </indexterm>Malaya (Malaysia) would follow in the wave of decolonizations that occurred in the late 1950s and early 1960s.<footnote label="6" role="end-bk-note" xml:id="b-9781474207300-fnI_6">
            <para xml:id="b-9781474207300-186">Singapore gained independence from Malaysia in 1965.</para>
          </footnote> In 1945, Indonesian nationalists declared independence from the Netherlands, as did Ho Chi Minh in <indexterm class="singular" xml:id="b-9781474207300-IDX-1971">
            <primary>Vietnam</primary>
          </indexterm>Vietnam from France. Whereas the Dutch, after a brief struggle, accepted the inevitable and acknowledged Indonesian sovereignty in 1949, the French did not, waging a nine-year war, which ended in their ignominious defeat at Dien Bien Phu in 1954. Although the Americans nominally watched from the sidelines offering help at strategic moments, it signaled the beginning of their involvement in Vietnam and the consolidation of first its image, and then its position, as a twentieth-century imperial power (<link linkend="b-9781474207300-ref323" role="bib">Karnow 1983</link>; <link linkend="b-9781474207300-ref492" role="bib">Shipway 1996</link>; Hunt and Levine 2012; <link linkend="b-9781474207300-ref407" role="bib">Miller and Wainstock 2013</link>). The “winds of change,” as Harold <indexterm class="singular" xml:id="b-9781474207300-IDX-1194">
            <primary>Macmillan, Harold</primary>
          </indexterm>Macmillan was to put it in 1960, were reshaping twentieth-century imperialism.</para>
</section>
<section xml:id="b-9781474207300-187">
<info xml:id="b-9781474207300-188">
<title xml:id="b-9781474207300-189">The Benign Hegemon</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-190">As the ideological and hegemonic positions of European empires shrank, that of the United States gained in stature. The European economies were in ruins. In spite of being the only non-occupied Allied power, <indexterm class="startofrange" xml:id="b-9781474207300-IDX-764">
            <primary>Great Britain</primary>
          </indexterm>Britain’s international position was greatly weakened. In contrast to the aftermath of the First World War, the government no longer had illusions of its colonies as an economic succor. The other leading imperial power, France, had not suffered in quite the same way as Britain, as its infrastructure was largely intact, but it too was economically weakened and one of its leading colonies, <indexterm class="singular" xml:id="b-9781474207300-IDX-961">
            <primary>Indochina</primary>
          </indexterm>Indochina, had been occupied by the Japanese. The Americans came to Europe’s rescue, yet again, militarily and, as important, economically. The <indexterm class="singular" xml:id="b-9781474207300-IDX-252">
            <primary>Bretton Woods Conference</primary>
          </indexterm>Bretton Woods Agreements of July 1944 removed international currencies from the <indexterm class="singular" xml:id="b-9781474207300-IDX-756">
            <primary>gold standard</primary>
          </indexterm>gold standard and pegged them to the dollar, thus stabilizing exchange rates in an effort to avoid the <?page value="9"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-309">
            <primary>capitalism</primary>
          </indexterm>galloping <indexterm class="singular" xml:id="b-9781474207300-IDX-991">
            <primary>inflation</primary>
          </indexterm>inflation of the interwar years. The move made the dollar the global currency and endowed the US with global financial power, a step that would eventually lead to the anchoring of US capitalist culture worldwide. The Agreements, furthermore, established the <indexterm class="singular" xml:id="b-9781474207300-IDX-2041">
            <primary>World Bank</primary>
          </indexterm>World Bank and the <indexterm class="singular" xml:id="b-9781474207300-IDX-996">
            <primary>International Monetary Fund, IMF</primary>
          </indexterm>International Monetary Fund, which handled the much-needed loans that would put Europe back on its feet economically and provide an important market for the Americans whose wartime economy had boomed, providing the US population with a commensurate standard of living (<link linkend="b-9781474207300-ref123" role="bib">Chua 2007</link>: 255). The 1947 <indexterm class="singular" xml:id="b-9781474207300-IDX-1229">
            <primary>Marshall Plan</primary>
          </indexterm>Marshall Plan, meanwhile, provided the necessary technical support that would hasten the rebuilding of a strong Europe, an important adjunct to the success of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1850">
            <primary>Truman Doctrine</primary>
          </indexterm>Truman Doctrine. The creation of the <indexterm class="singular" xml:id="b-9781474207300-IDX-556">
            <primary>European Coal and Steel Community</primary>
          </indexterm>European Coal and Steel Community, the first step toward what would become the <indexterm class="singular" xml:id="b-9781474207300-IDX-561">
            <primary>European Union, EU</primary>
          </indexterm>European Union, and the establishment of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1416">
            <primary>North Atlantic Treaty Organization, NATO</primary>
          </indexterm>North Atlantic Treaty Organization (NATO), both at the instigation of and with encouragement from the United States, were significant to its strategic and economic aims. US aims may not have been imperial at the time, but the institutions and measures taken to buttress the ravaged western European economies and create a strong allied bloc against <indexterm class="singular" xml:id="b-9781474207300-IDX-1704">
            <primary>Soviet Union</primary>
          </indexterm>Soviet incursion, laid the groundwork for the emergence of the United States as the rising western imperial power.</para>
<para xml:id="b-9781474207300-191">At the same time as these developments in Europe, in a gesture as much symbolic as realistically necessary, Great Britain informed the United States that it was neither economically in a position to contain the ongoing Greek civil war (1946–9) by continuing to support the royalists against the communist insurgents, nor able to maintain a viable presence in <indexterm class="singular" xml:id="b-9781474207300-IDX-1471">
            <primary>Palestine</primary>
          </indexterm>Palestine.<footnote label="7" role="end-bk-note" xml:id="b-9781474207300-fnI_7">
            <para xml:id="b-9781474207300-192">Britain had installed the Greek royal family in place.</para>
          </footnote> In 1947, the Americans took over in <indexterm class="singular" xml:id="b-9781474207300-IDX-824">
            <primary>Greece</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-828">
            <primary>Greece, civil war</primary>
          </indexterm>Greece and a year later Britain withdrew from Palestine, opening the way for the founding of the state of <indexterm class="singular" xml:id="b-9781474207300-IDX-1029">
            <primary>Israel</primary>
          </indexterm>Israel. The new state was immediately recognized by the United States. This would lead to a close partnership that provided the Americans with a strategic position in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1266">
            <primary>Middle East</primary>
          </indexterm>Middle East. In 1952, <indexterm class="singular" xml:id="b-9781474207300-IDX-1859">
            <primary>Turkey</primary>
          </indexterm>Turkey entered NATO providing a vital base for troops in the area. As the dust from the war settled, the United States emerged as the strongest western power militarily and economically.</para>
</section>
<section xml:id="b-9781474207300-193">
<info xml:id="b-9781474207300-194">
<title xml:id="b-9781474207300-195">The Cold War Years</title>
<itermset xml:id="b-9781474207300-IDX-see3">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-371">
              <primary>Cold War</primary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-196">Of the significant developments during the Cold War that were landmarks of sorts on the US road to imperial stature, only three will be mentioned. The first was the <indexterm class="singular" xml:id="b-9781474207300-IDX-462">
            <primary>decolonization</primary>
          </indexterm>decolonization of the European colonies, most of which had obtained their independence by the end of the 1970s. During the fifties, the United States had remained largely neutral with regard to Europe’s colonies, but as the Cold War developed there was a realization that such support could counter US interests by pushing the nationalists into the Soviet camp. This prompted the United States to encourage decolonization. Two examples of this are the <indexterm class="endofrange" startref="b-9781474207300-IDX-764" xml:id="b-9781474207300-IDX-end72"/>Suez <?page value="10"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1417">
            <primary>North Atlantic Treaty Organization, NATO</primary>
          </indexterm>Crisis (1956) and the Algerian <indexterm class="singular" xml:id="b-9781474207300-IDX-74">
            <primary>Algeria</primary>
            <secondary>War of Independence</secondary>
          </indexterm>War of Independence (1954–62). Although <indexterm class="singular" xml:id="b-9781474207300-IDX-520">
            <primary>Egypt</primary>
          </indexterm>Egypt had gained its freedom from British occupation in 1922, British and French economic and shipping interests remained closely bound up with the <indexterm class="singular" xml:id="b-9781474207300-IDX-1751">
            <primary>Suez Canal Crisis</primary>
          </indexterm>Suez Canal. The Crisis was provoked as a result of the Canal’s nationalization by Gamal Abdel <indexterm class="singular" xml:id="b-9781474207300-IDX-1330">
            <primary>Nasser, Gamal Abdel</primary>
          </indexterm>Nasser, thus jeopardizing British and French interests. When diplomatic negotiations failed and <indexterm class="singular" xml:id="b-9781474207300-IDX-765">
            <primary>Great Britain</primary>
          </indexterm>Britain and <indexterm class="singular" xml:id="b-9781474207300-IDX-606">
            <primary>France</primary>
          </indexterm>France invaded, following on Israel’s march into Egypt, a US-sponsored UN resolution forced their withdrawal. Nasser emerged triumphant, and went on to assume an important role in the decolonization process. The withdrawal of the French and British troops was also a serious loss of prestige to what had hitherto been the two most important imperial powers. The denouement in Egypt was especially pertinent with regard to events in Algeria. The war had started two years earlier and by 1957 <indexterm class="singular" xml:id="b-9781474207300-IDX-1560">
            <primary>Radio Cairo</primary>
          </indexterm>Radio Cairo was regularly broadcasting pro-nationalist messages across Africa. Nor was the humiliation that France had suffered in Egypt lost on the leadership of the FLN (<indexterm class="singular" xml:id="b-9781474207300-IDX-692">
            <primary>
              <emphasis role="italic">Front National de Libération</emphasis>, FLN</primary>
          </indexterm>Front National de Libération), who were starting to curry favor in diplomatic circles. The Americans had initially supported the French in their struggle to keep Algeria French, but in July 1957 John F. <indexterm class="singular" xml:id="b-9781474207300-IDX-1074">
            <primary>Kennedy, John F.</primary>
          </indexterm>Kennedy, then a junior senator, addressed <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1933">
            <primary>United States</primary>
            <secondary>Congress</secondary>
          </indexterm>Congress urging them to take a moral stand on colonialism, and declaring that it was important to show the colonized that “we are a freedom loving people who want all people free.” He criticized President <indexterm class="startofrange" xml:id="b-9781474207300-IDX-529">
            <primary>Eisenhower, Dwight D.</primary>
          </indexterm>Eisenhower for refusing to condemn what was going on in Algeria, for by doing so he was aligning the <indexterm class="singular" xml:id="b-9781474207300-IDX-1877">
            <primary>United Nations</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1897">
            <primary>United States</primary>
          </indexterm>United States with French colonialism. Kennedy’s views were initially condemned by both Congress and the national <indexterm class="singular" xml:id="b-9781474207300-IDX-1951">
            <primary>United States</primary>
            <secondary>press</secondary>
          </indexterm>press, but with the escalation of the war the Americans became concerned about the weakening of NATO forces due to the deployment of so many French troops to Algeria (<link linkend="b-9781474207300-ref430" role="bib">O’Brien 2005</link>: 357–8). When it became obvious that it was in the US Cold War interests to eschew the colonial line, Congress came around (<link linkend="b-9781474207300-ref572" role="bib">Wall 2001</link>; <link linkend="b-9781474207300-ref142" role="bib">Connelly 2002</link>). Furthermore, the <indexterm class="singular" xml:id="b-9781474207300-IDX-361">
            <primary>Civil Rights Movement</primary>
          </indexterm>Civil Rights movement had led high-profile African-Americans, such as Richard <indexterm class="singular" xml:id="b-9781474207300-IDX-2079">
            <primary>Wright, Richard</primary>
          </indexterm>Wright and <indexterm class="singular" xml:id="b-9781474207300-IDX-1214">
            <primary>Malcolm X</primary>
          </indexterm>Malcolm X, to sites of decolonization in <indexterm class="singular" xml:id="b-9781474207300-IDX-2014">
            <primary>West Africa</primary>
          </indexterm>West Africa, in particular <indexterm class="singular" xml:id="b-9781474207300-IDX-737">
            <primary>Ghana</primary>
          </indexterm>Ghana, where they critiqued western colonialism linking it to US treatment of African-Americans and the need for civil rights (<link linkend="b-9781474207300-ref568" role="bib">von Eschen 1997</link>; <link linkend="b-9781474207300-ref222" role="bib">Gaines 2006</link>). The United States thus distanced itself from European imperialism and gained in international prestige.</para>
<para xml:id="b-9781474207300-197">A second development that bears mentioning was the shoring up of US strategic footholds around the world to ensure that <indexterm class="singular" xml:id="b-9781474207300-IDX-396">
            <primary>communism</primary>
          </indexterm>Communism was contained. <indexterm class="singular" xml:id="b-9781474207300-IDX-1112">
            <primary>Korea</primary>
          </indexterm>Korea, freed from Japanese occupation in 1945, became an early pawn in the Cold War leading to the <indexterm class="singular" xml:id="b-9781474207300-IDX-1115">
            <primary>Korean War</primary>
          </indexterm>Korean War (1950–3). Twenty-one of the UN member states participated, but it was the Americans who provided the bulk of the troops. Although the war’s outcome may not have ended with the United States gaining the whole of the peninsula, it provided the Americans with an ally in the area south of the 38th parallel, even though pro-American sentiments were not always consistent. Two other strategically important territories in, or bordering <?page value="11"?>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-5002">
            <primary>World War II</primary>
          </indexterm>on, the Pacific were <indexterm class="singular" xml:id="b-9781474207300-IDX-858">
            <primary>Hawai’i</primary>
          </indexterm>Hawai’i and <indexterm class="singular" xml:id="b-9781474207300-IDX-50">
            <primary>Alaska</primary>
          </indexterm>Alaska. Both had been under the aegis of the United States since the nineteenth century, but after the attack on <indexterm class="singular" xml:id="b-9781474207300-IDX-1487">
            <primary>Pearl Harbor</primary>
          </indexterm>Pearl Harbor in 1941 the US built substantial military fortifications in each. In Hawai’i, military personnel during the war expanded from 43,000 to over a million men (<link linkend="b-9781474207300-ref583" role="bib">Whitehead 2004</link>: 82–3). As part of the United States’ nineteenth-century colonial empire, Hawai’i remained under the inequality of territorial rule until after the Second World War (<link linkend="b-9781474207300-ref56" role="bib">Bell 1984</link>: 7; <link linkend="b-9781474207300-ref481" role="bib">Saranillio 2010</link>). As the decolonization of the European territories proceeded, the US acted accordingly with its own territories. In much the same way as France retained some of its overseas departments and territories (<indexterm class="singular" xml:id="b-9781474207300-IDX-634">
            <primary>France</primary>
            <secondary>DOM/TOM</secondary>
          </indexterm>DOM/TOM), following the decolonization of its African and Asian territories, the US followed suit by creating incorporated (Hawai’i and Alaska) and unincorporated territories (e.g. <indexterm class="singular" xml:id="b-9781474207300-IDX-833">
            <primary>Guam</primary>
          </indexterm>Guam, <indexterm class="singular" xml:id="b-9781474207300-IDX-1997">
            <primary>Virgin Islands</primary>
          </indexterm>Virgin Islands, <indexterm class="singular" xml:id="b-9781474207300-IDX-1543">
            <primary>Puerto Rico</primary>
          </indexterm>Puerto Rico). In spite of lukewarm enthusiasm in the United States, both in Congress and among the American people, by the end of the fifties Alaska and Hawai’i had become the forty-ninth and fiftieth state respectively (<link linkend="b-9781474207300-fig0_3" role="figure">Figure 0.3</link>).</para>
<para xml:id="b-9781474207300-198">The Cold War may have remained “cold” between the United States, its Allies, and the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1705">
            <primary>Soviet Union</primary>
          </indexterm>Soviet Union, but it did not preclude crises and actual warfare when US or Allied interests were at stake. Nor did it prevent <indexterm class="endofrange" startref="b-9781474207300-IDX-529" xml:id="b-9781474207300-IDX-end45"/>dangerous <?page value="12"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure0_3"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-417">
            <primary>consumerism</primary>
          </indexterm>brinkmanship, as the <indexterm class="singular" xml:id="b-9781474207300-IDX-439">
            <primary>Cuban Missile Crisis</primary>
          </indexterm>Cuban Missile Crisis of 1962 demonstrated. <indexterm class="singular" xml:id="b-9781474207300-IDX-1075">
            <primary>Kennedy, John F.</primary>
          </indexterm>Kennedy’s calling of <indexterm class="singular" xml:id="b-9781474207300-IDX-1103">
            <primary>Khrushchev, Nikita</primary>
          </indexterm>Khrushchev’s bluff as Soviet nuclear-armed ships steamed toward <indexterm class="singular" xml:id="b-9781474207300-IDX-435">
            <primary>Cuba</primary>
          </indexterm>Cuba enhanced US international stature as the guardian of global security. A quite different outcome transpired during the <indexterm class="singular" xml:id="b-9781474207300-IDX-1972">
            <primary>Vietnam</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1982">
            <primary>Vietnam War</primary>
          </indexterm>Vietnam War (1955–75)—or Second Indochinese War as it was sometimes called. The war is significant in that it was the first US defeat since the Second <indexterm class="singular" xml:id="b-9781474207300-IDX-2048">
            <primary>World War I</primary>
          </indexterm>World War, with a great cost to lives and long-lasting ordnance damage to Vietnam, <indexterm class="singular" xml:id="b-9781474207300-IDX-291">
            <primary>Cambodia</primary>
          </indexterm>Cambodia, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1137">
            <primary>Laos</primary>
          </indexterm>Laos, the countries that made up French <indexterm class="singular" xml:id="b-9781474207300-IDX-962">
            <primary>Indochina</primary>
          </indexterm>Indochina. Furthermore, US activities in Cambodia during the war contributed to ushering in the genocidal <indexterm class="singular" xml:id="b-9781474207300-IDX-1101">
            <primary>Khmer Rouge</primary>
          </indexterm>Khmer Rouge at war’s end. The <indexterm class="singular" xml:id="b-9781474207300-IDX-1981">
            <primary>Vietnam Syndrome</primary>
          </indexterm>Vietnam syndrome, as it has been dubbed, alludes to American humiliation as a result of this defeat and the resulting impact on US foreign policy in <indexterm class="singular" xml:id="b-9781474207300-IDX-530">
            <primary>El Salvador</primary>
          </indexterm>El Salvador and <indexterm class="singular" xml:id="b-9781474207300-IDX-1011">
            <primary>Iraq</primary>
          </indexterm>Iraq (<link linkend="b-9781474207300-ref496" role="bib">Simons 1998</link>). But it was also a reinforcement of the increasingly held view that the <indexterm class="singular" xml:id="b-9781474207300-IDX-1898">
            <primary>United States</primary>
          </indexterm>United States was more aggressively imperialist than it claimed to be. No longer seen as mere cultural imperialists, it had acquired the mantle of the world’s leading imperial power.</para>
<figure label="0.3" xlink:href="b-9781474207300-figure0_3" xlink:role="objectPointer" xml:id="b-9781474207300-fig0_3">
<info xml:id="b-9781474207300-199">
<title xml:id="b-9781474207300-200">President Eisenhower speaking at a function to celebrate the admission of Alaska and Hawaii to the Union. Credit: Abbie Rowe/PhotoQuest/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-201">
<imageobject xml:id="b-9781474207300-202">
<imagedata align="center" fileref="images/fig0_3.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-204">US military activity in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-15">
            <primary>Africa</primary>
          </indexterm>Africa, during the <indexterm class="singular" xml:id="b-9781474207300-IDX-372">
            <primary>Cold War</primary>
          </indexterm>Cold War, was initially restricted to the presence of bases in <indexterm class="singular" xml:id="b-9781474207300-IDX-1405">
            <primary>North Africa</primary>
          </indexterm>North Africa, especially in <indexterm class="singular" xml:id="b-9781474207300-IDX-1305">
            <primary>Morocco</primary>
          </indexterm>Morocco. Its relations in <indexterm class="singular" xml:id="b-9781474207300-IDX-1746">
            <primary>Sub-Saharan Africa</primary>
          </indexterm>sub-Saharan Africa were ostensibly limited to its efforts to introduce democratic practices and provide economic assistance. In fact, it was just as concerned about Soviet encroachment in the area, as it was elsewhere. Until 1986, when Congress passed the <indexterm class="singular" xml:id="b-9781474207300-IDX-410">
            <primary>Comprehensive Anti-Apartheid Act, CAAA</primary>
          </indexterm>Comprehensive Anti-Apartheid Act (CAAA) and it joined the international community in imposing sanctions, the United States maintained economic relations with <indexterm class="singular" xml:id="b-9781474207300-IDX-1681">
            <primary>South Africa</primary>
          </indexterm>South Africa not just to keep the Soviets at bay but also to avoid losing an important trading partner. By 1986, however, the Soviet Union under Mikhail <indexterm class="singular" xml:id="b-9781474207300-IDX-760">
            <primary>Gorbachev, Mikhail</primary>
          </indexterm>Gorbachev was showing a different face. To paraphrase Margaret <indexterm class="singular" xml:id="b-9781474207300-IDX-1813">
            <primary>Thatcher, Margaret</primary>
          </indexterm>Thatcher, he was a man “with whom one could do business.” The Cold War was winding down and three years later the Soviet Union would collapse, symbolically expressed with the dismantling of the <indexterm class="singular" xml:id="b-9781474207300-IDX-219">
            <primary>Berlin Wall</primary>
          </indexterm>Berlin Wall. If American triumphalism at the end of the Cold War seems disingenuous today, more mindful individuals were conscious of the hubris in <indexterm class="singular" xml:id="b-9781474207300-IDX-697">
            <primary>Fukuyama, Francis</primary>
          </indexterm>Fukuyama’s concept of the “end of history” whereby western liberalism had at last triumphed (<link linkend="b-9781474207300-ref220" role="bib">Fukuyama 1992</link>). By the end of the twentieth century, the world was a much more complicated place than it had been in the immediate aftermath of the Second World War.</para>
<para xml:id="b-9781474207300-205">The third dimension that I want to raise in the development of US hegemonic interests and power is its conquest of consumer society. Although American consumer goods and artifacts had started their global penetration after the First World War, it was only in the boom period of the late fifties and sixties that conspicuous consumption <emphasis role="italic">à l’americaine</emphasis> really took off. The impact on the global economy, which its promotion of mass market commodities had, whether in the form of clothing (Levis, mass-produced garments), household goods, electronics, cultural products (films, TV series, pop art), or comestibles <indexterm class="endofrange" startref="b-9781474207300-IDX-1705" xml:id="b-9781474207300-IDX-end178"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1933" xml:id="b-9781474207300-IDX-end205"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-5002" xml:id="b-9781474207300-IDX-end5002"/>(Coca <?page value="13"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure0_4"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-408">
            <primary>
              <emphasis role="italic">Compagnie Française de l’Afrique Occidentale</emphasis>, CFAO</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1674">
            <primary>
              <emphasis role="italic">Société Commerciale de l’Ouest Africain</emphasis>, SCOA</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1873">
            <primary>United Africa Company, UAC</primary>
          </indexterm>Cola, <indexterm class="singular" xml:id="b-9781474207300-IDX-1256">
            <primary>McDonalds</primary>
          </indexterm>McDonalds, fast food), provided the United States with a high profile and an exemplar of easy living (<link linkend="b-9781474207300-fig0_4" role="figure">Figure 0.4</link>). Kristen <indexterm class="singular" xml:id="b-9781474207300-IDX-1584">
            <primary>Ross, Kristen</primary>
          </indexterm>Ross has demonstrated how, following decolonization, the French espoused American consumer culture, thus reshaping their traditional agriculturally based society into a more consumption-oriented one (<link linkend="b-9781474207300-ref477" role="bib">Ross 1995</link>). <indexterm class="singular" xml:id="b-9781474207300-IDX-457">
            <primary>de Grazia, Victoria</primary>
          </indexterm>De Grazia (<link linkend="b-9781474207300-ref164" role="bib">2005</link>) has documented the impact of US <indexterm class="singular" xml:id="b-9781474207300-IDX-1938">
            <primary>United States</primary>
            <secondary>consumerism</secondary>
          </indexterm>consumerism on European society in extensive detail. Although the degree of <indexterm class="singular" xml:id="b-9781474207300-IDX-1675">
            <primary>soft imperialism</primary>
          </indexterm>soft imperialism of this development can be debated, and it cannot be compared with the imposition of economic interests in the nineteenth century as a result, for example, of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1438">
            <primary>Opium Wars</primary>
          </indexterm>Opium Wars, it nonetheless is comparable to the way trade often preceded the flag in earlier times. In short, it prepared the terrain for the more aggressive forms of imperialism, developed later.</para>
<figure label="0.4" xlink:href="b-9781474207300-figure0_4" xlink:role="objectPointer" xml:id="b-9781474207300-fig0_4">
<info xml:id="b-9781474207300-206">
<title xml:id="b-9781474207300-207">Animal rights demonstration at McDonald’s restaurant in Sao Paulo. Credit: Cris Faga/NurPhoto via Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-208">
<imageobject xml:id="b-9781474207300-209">
<imagedata align="center" fileref="images/fig0_4.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
</section>
<section xml:id="b-9781474207300-211">
<info xml:id="b-9781474207300-212">
<title xml:id="b-9781474207300-213">The Eu and an Imperial Legacy</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-214">While the United States was establishing its super power status, the former European imperial powers, in particular <indexterm class="startofrange" xml:id="b-9781474207300-IDX-607">
            <primary>France</primary>
          </indexterm>France and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-766">
            <primary>Great Britain</primary>
          </indexterm>Britain, did not walk away from their colonies without looking back, nor indeed did they stop economic or military involvement, particularly in Africa. In the immediate years after independence, companies like SCOA, CFAO, and UAC continued to trade profitably in Africa. By the mid-1970s, <indexterm class="singular" xml:id="b-9781474207300-IDX-43">
            <primary>Africanization</primary>
          </indexterm>Africanization was adopted by most of these large companies, all of which persisted in some form until the end of the <?page value="14"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-125">
            <primary>Argentina</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-888">
            <primary>Houphouet-Boigny, Felix</primary>
          </indexterm>century.<footnote label="8" role="end-bk-note" xml:id="b-9781474207300-fnI_8">
            <para xml:id="b-9781474207300-215">SCOA was dissolved in 1998; CFAO was bought out in 2012 and UAC functioned until 1987.</para>
          </footnote> Investment in former colonies also continued. In the <indexterm class="singular" xml:id="b-9781474207300-IDX-1035">
            <primary>Ivory Coast</primary>
          </indexterm>Ivory Coast, for example, during the economic boom of the late sixties and early seventies—“the Ivorian miracle”—French investment and presence far exceeded that of the colonial period. Encouraged by then president Felix Houphouet-Boigny, the French population in the colony increased to 60,000, double the 30,000 of the colonial period (<link linkend="b-9781474207300-ref365" role="bib">Lorcin 2014</link>: 146). Britain, too, maintained its imperial and economic links, establishing the <indexterm class="singular" xml:id="b-9781474207300-IDX-259">
            <primary>British Commonwealth</primary>
          </indexterm>British Commonwealth with those of its former colonies who were interested in joining (now known as the <indexterm class="singular" xml:id="b-9781474207300-IDX-391">
            <primary>Commonwealth of Nations</primary>
          </indexterm>Commonwealth of Nations, it comprises 52 member states, many of which were not former colonies), while France and most of its former African colonies created close ties in what came to be known as <emphasis role="italic">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-603">
              <primary>
                <emphasis role="italic">Françafrique</emphasis>
              </primary>
            </indexterm>Françafrique</emphasis> (this too has expanded and now includes all Francophone Africa and beyond). Both France and Britain have maintained military bases in some of their former colonies, France more extensively than Britain. Furthermore, as Véronique <indexterm class="singular" xml:id="b-9781474207300-IDX-489">
            <primary>Dimier, Véronique</primary>
          </indexterm>Dimier has pointed out, former <indexterm class="singular" xml:id="b-9781474207300-IDX-557">
            <primary>European Commission</primary>
          </indexterm>European colonial powers in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-560">
            <primary>European Economic Community, EEC</primary>
          </indexterm>European Economic Community (EEC; now the <indexterm class="singular" xml:id="b-9781474207300-IDX-562">
            <primary>European Union, EU</primary>
          </indexterm>European Union, EU) were “at the heart of <indexterm class="singular" xml:id="b-9781474207300-IDX-559">
            <primary>European Development Policy</primary>
          </indexterm>European Development Policy.” The French politician, Claude <indexterm class="singular" xml:id="b-9781474207300-IDX-339">
            <primary>Cheysson, Claude</primary>
          </indexterm>Cheysson, who took up a position as commissioner for development in the EEC in 1973, stated that when he arrived at the Commission, “the style was very colonial indeed” (<link linkend="b-9781474207300-ref168" role="bib">Dimier 2009</link>: 251). At the end of the twentieth century, former imperial powers, now in the EU, were still embroiled in trade disputes relating to the economic interests of former colonial territories. The “<indexterm class="singular" xml:id="b-9781474207300-IDX-184">
            <primary>Banana Wars</primary>
          </indexterm>Banana Wars” of the nineties between the <indexterm class="singular" xml:id="b-9781474207300-IDX-1878">
            <primary>United Nations</primary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1899">
            <primary>United States</primary>
          </indexterm>United States and the EU is one such example. In a measure introduced in 1993, bananas from former ACP countries (i.e. the former <indexterm class="singular" xml:id="b-9781474207300-IDX-35">
            <primary>African and Caribbean Colonies, ACP</primary>
          </indexterm>African and Caribbean colonies of EU members) were exempt from import duty, whereas bananas from elsewhere were not. In appearance, disputes such as these <indexterm class="singular" xml:id="b-9781474207300-IDX-1249">
            <primary>May, Teresa</primary>
          </indexterm>may be par for the course in the process of globalization, but they nonetheless had echoes of earlier economic squabbles between imperial powers.</para>
<para xml:id="b-9781474207300-216">Economic factors were not the only throwback to the past. The <indexterm class="singular" xml:id="b-9781474207300-IDX-573">
            <primary>Falklands Crisis (1982)</primary>
          </indexterm>Falklands Crisis of 1982, when Margaret <indexterm class="singular" xml:id="b-9781474207300-IDX-1814">
            <primary>Thatcher, Margaret</primary>
          </indexterm>Thatcher stormed across the <indexterm class="singular" xml:id="b-9781474207300-IDX-150">
            <primary>Atlantic Ocean</primary>
          </indexterm>Atlantic to counter the Argentinian invasion and make “Britain great again,” won her increased popularity at the polls and demonstrated an aspect of the imperial legacy (<link linkend="b-9781474207300-ref367" role="bib">Lorcin 2013a</link>: 100). Similarly, French interventions in Africa, such as in <indexterm class="singular" xml:id="b-9781474207300-IDX-335">
            <primary>Chad</primary>
          </indexterm>Chad in 1986 and in <indexterm class="singular" xml:id="b-9781474207300-IDX-1215">
            <primary>Mali</primary>
          </indexterm>Mali in 2013, reinforced the ties of <emphasis role="italic">Françafrique</emphasis> even though they were at the behest of the leaders of the countries in question and with the sanction of the UN. There is, however, a difference between British and French activity: the political leaders of the former closely associate their governments with the United States or its overseas activities, whether it was Tony <indexterm class="singular" xml:id="b-9781474207300-IDX-226">
            <primary>Blair, Tony</primary>
          </indexterm>Blair’s quasi-obsequious relations with George W. <indexterm class="singular" xml:id="b-9781474207300-IDX-283">
            <primary>Bush, George W.</primary>
          </indexterm>Bush, especially during the second Iraq war, or Theresa May rushing to be the first European head of state to visit President <indexterm class="singular" xml:id="b-9781474207300-IDX-1852">
            <primary>Trump, Donald</primary>
          </indexterm>Trump in the wake of the <indexterm class="singular" xml:id="b-9781474207300-IDX-255">
            <primary>Brexit</primary>
          </indexterm>Brexit referendum. On the other hand, French presidents, with the exception of Nicolas <indexterm class="singular" xml:id="b-9781474207300-IDX-1621">
            <primary>Sarkozy, Nicolas</primary>
          </indexterm>Sarkozy, have tried to <indexterm class="endofrange" startref="b-9781474207300-IDX-15" xml:id="b-9781474207300-IDX-end2"/>pursue <?page value="15"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-70">
            <primary>Algeria</primary>
            <secondary>resources</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-563">
            <primary>European Union, EU</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1418">
            <primary>North Atlantic Treaty Organization, NATO</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1844">
            <primary>transportation</primary>
          </indexterm>their own agendas by distancing France from the United States, as did General <indexterm class="singular" xml:id="b-9781474207300-IDX-453">
            <primary>de Gaulle, Charles</primary>
          </indexterm>de Gaulle in 1966 by withdrawing from NATO and closing down the US military bases in France, or François <indexterm class="singular" xml:id="b-9781474207300-IDX-1292">
            <primary>Mitterrand, François</primary>
          </indexterm>Mitterrand in 1986 by forbidding the US to fly over French airspace when attacking <indexterm class="singular" xml:id="b-9781474207300-IDX-1171">
            <primary>Libya</primary>
          </indexterm>Libya, or even Jacques <indexterm class="singular" xml:id="b-9781474207300-IDX-355">
            <primary>Chirac, Jacques</primary>
          </indexterm>Chirac in 2003 ruling out the participation of French troops in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1012">
            <primary>Iraq</primary>
          </indexterm>Iraq invasion, earning the opprobrium of the US whose press labeled them “cheese-eating surrender monkeys” while liquor stores poured quantities of French <indexterm class="singular" xml:id="b-9781474207300-IDX-2029">
            <primary>wine</primary>
          </indexterm>wine down the drain. The simplification of the Anglo-American relationship as an Anglo-Saxon axis, or more pejoratively “Britain riding on US coattails,” fails to take into consideration earlier imperial aspirations and activities. Although both Britain and France exploited their colonies economically, Britain was primordially an economically motivated empire with prestige following in its wake, whereas for France maintaining its international prestige, or rivaling that of other imperial powers, in particular Britain, was as important a motor of its nineteenth-century empire—if not more so—as were its economic interests. The cultural dimensions of all the Western empires lay in the spread of the specific attributes of what they considered their national <indexterm class="singular" xml:id="b-9781474207300-IDX-662">
            <primary>France</primary>
            <secondary>values</secondary>
          </indexterm>values, whether it was the administrative and legal frameworks of the British, the elite “civilization” of the French, or the <indexterm class="singular" xml:id="b-9781474207300-IDX-418">
            <primary>consumerism</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1939">
            <primary>United States</primary>
            <secondary>consumerism</secondary>
          </indexterm>consumerism of the Americans, to name but three significant examples.</para>
<para xml:id="b-9781474207300-217">By the end of the twentieth century, America’s image as a “benign hegemon” had been eclipsed by a more hardnosed consumerism. The emergence of the EEC/EU as an economic force, concurrently with <indexterm class="singular" xml:id="b-9781474207300-IDX-1045">
            <primary>Japan</primary>
          </indexterm>Japan and later south-east <indexterm class="singular" xml:id="b-9781474207300-IDX-1699">
            <primary>Southeast Asia</primary>
          </indexterm>Asia, coupled with their espousal of American-type consumerism, gave rise to competitive forces that provoked a more cutthroat US stance. The emulation of American culture in these new consumer societies was accompanied by an increased reliance on a transport system that was largely dependent on <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1428">
            <primary>oil</primary>
          </indexterm>oil.</para>
</section>
<section xml:id="b-9781474207300-218">
<info xml:id="b-9781474207300-219">
<title xml:id="b-9781474207300-220">The Oil Culture and its Wars</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-221">Throughout the twentieth century, as oil replaced <indexterm class="singular" xml:id="b-9781474207300-IDX-365">
            <primary>coal</primary>
          </indexterm>coal as the fuel of <indexterm class="singular" xml:id="b-9781474207300-IDX-987">
            <primary>industrialization</primary>
          </indexterm>industrialization and its myriad by-products (e.g., the many forms of plastic, solvents, synthetic materials) became an essential part of consumer society, its pricing and the control of its extraction became all-important (<link linkend="b-9781474207300-ref462" role="bib">Price-Smith 2015</link>). As the century progressed, the demand for oil increased exponentially due to increases in population and escalating globalization and, with it, consumerism. Although oil had been exploited in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-325">
            <primary>Caucasus</primary>
          </indexterm>Caucasus and North America since the nineteenth century, the proliferation of oil reserves in the twentieth century—particularly its discovery in Iraq (<emphasis role="italic">c</emphasis>. 1908), <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1628">
            <primary>Saudi Arabia</primary>
          </indexterm>Saudi Arabia (1938), Algeria (1948), <indexterm class="singular" xml:id="b-9781474207300-IDX-1768">
            <primary>Syria</primary>
          </indexterm>Syria (1956), and in what are now the <indexterm class="singular" xml:id="b-9781474207300-IDX-119">
            <primary>Arab Emirates</primary>
          </indexterm>Arab Emirates (late 1950s and 1960s)—focused attention on these areas and made them important sites of contention among imperial powers. The belief that the area encompassing Iraq and Syria contained enormous reserves of oil was among <indexterm class="endofrange" startref="b-9781474207300-IDX-560" xml:id="b-9781474207300-IDX-end48"/>the <?page value="16"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-5003">
            <primary>World War II</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-86">
            <primary>al-Qaida</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-909">
            <primary>Igbo</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1387">
            <primary>Nigeria</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1706">
            <primary>Soviet Union</primary>
          </indexterm>motives behind the <indexterm class="singular" xml:id="b-9781474207300-IDX-1765">
            <primary>Sykes-Picot Agreement</primary>
          </indexterm>Sykes-Picot agreement in 1916, as important, no doubt, as the dismembering of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1450">
            <primary>Ottoman Empire</primary>
          </indexterm>Ottoman empire at the war’s end. In the <indexterm class="singular" xml:id="b-9781474207300-IDX-1001">
            <primary>interwar period</primary>
          </indexterm>interwar period, oil production in the mandates was limited to Iraq, but the French excavated for oil in Syria throughout their mandate. During the Second <indexterm class="singular" xml:id="b-9781474207300-IDX-2049">
            <primary>World War I</primary>
          </indexterm>World War, the motivation for <indexterm class="singular" xml:id="b-9781474207300-IDX-1436">
            <primary>Operation Barbarossa</primary>
          </indexterm>Operation Barbarossa, <indexterm class="singular" xml:id="b-9781474207300-IDX-868">
            <primary>Hitler, Adolph</primary>
          </indexterm>Hitler’s invasion of the USSR, was to access the oil of the Caucasus in order to supplement his depleting wartime reserves. That Barbarossa failed contributed to the Allied victory.</para>
<para xml:id="b-9781474207300-222">The <indexterm class="startofrange" xml:id="b-9781474207300-IDX-373">
            <primary>Cold War</primary>
          </indexterm>Cold War was marked by a series of oil crises, which highlighted potential bellicosity connected to the stakes involved. The first postwar oil crisis occurred in 1951, when <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1006">
            <primary>Iran</primary>
          </indexterm>Iran nationalized its oil industry in the hope of obtaining a fairer share of the profits. The result was a coup orchestrated by the American and British secret services, which were fearful of the influence of the USSR (<link linkend="b-9781474207300-ref393" role="bib">Marsh 2002</link>). To try and maintain some sort of control of their resources, in 1960 five of the non-US oil-producing countries, of which four were in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1267">
            <primary>Middle East</primary>
          </indexterm>Middle East, banded together to form the <indexterm class="singular" xml:id="b-9781474207300-IDX-1439">
            <primary>Organization of the Petroleum Exporting Countries, OPEC</primary>
          </indexterm>Organization of the Petroleum Exporting Countries (OPEC). Its aim was to unify petroleum policies while providing a steady income to producers. It did not herald the end of the crises, nor did it stop western powers from meddling in them. The 1967–70 Nigerian civil war or <indexterm class="singular" xml:id="b-9781474207300-IDX-221">
            <primary>Biafran War</primary>
          </indexterm>Biafran war, for example, pitted the Nigerian government against the Ibos, who lived in the oil-rich area of the former colony, with Britain supporting the former and France the latter. Whereas the lack of <indexterm class="singular" xml:id="b-9781474207300-IDX-892">
            <primary>human rights</primary>
          </indexterm>human rights and mistreatment of the Ibo people was at the heart of the conflict, the strategic and economic interests were about maintaining the control of the rich oil reserves in the area. A series of crises in the seventies, most notably that in 1973 when OPEC introduced an oil embargo in response to US involvement in the <indexterm class="singular" xml:id="b-9781474207300-IDX-2084">
            <primary>Yom Kippur War</primary>
          </indexterm>Yom Kippur war, sent oil prices soaring and increased tensions between western powers and oil-producing countries, particularly those in in the Middle East.</para>
<para xml:id="b-9781474207300-223">The end of the Cold War did not improve the situation. Of particular note were the <indexterm class="singular" xml:id="b-9781474207300-IDX-843">
            <primary>Gulf War</primary>
          </indexterm>Gulf War of 1990–1, which followed Iraq’s invasion of <indexterm class="singular" xml:id="b-9781474207300-IDX-1120">
            <primary>Kuwait</primary>
          </indexterm>Kuwait, and the 2003 US-led invasion of Iraq, which morphed into a war that dragged on until 2011. As this volume goes to press, American troops are still present in the area. In the intervening period between these two American-led wars in Iraq, the Twin Towers fell due to the brutal Al-Qaeda attack of September 11, 2001. (One of their many grievances against the West was their cultural insensibility, as evidenced by US violation of territory sacred to <indexterm class="singular" xml:id="b-9781474207300-IDX-1025">
            <primary>Islam</primary>
          </indexterm>Islam by stationing their troops in Saudi Arabia.) Did this event prime the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-284">
            <primary>Bush, George W.</primary>
          </indexterm>Bush regime psychologically to act precipitously in marching into Iraq in 2003, or was terrorism just the excuse to invade and have access to the oil fields? Unlike the Gulf War, which responded to Saddam <indexterm class="singular" xml:id="b-9781474207300-IDX-903">
            <primary>Hussein, Saddam</primary>
          </indexterm>Hussein’s belligerence, the justification in 2003 was the erroneous allegation, made by the Bush and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-227">
            <primary>Blair, Tony</primary>
          </indexterm>Blair regimes, of the presence of weapons of mass destruction. None were ever found. The <indexterm class="singular" xml:id="b-9781474207300-IDX-173">
            <primary>Ba’ath Party</primary>
          </indexterm>Ba’ath Party <indexterm class="endofrange" startref="b-9781474207300-IDX-325" xml:id="b-9781474207300-IDX-end27"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1428" xml:id="b-9781474207300-IDX-end149"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1628" xml:id="b-9781474207300-IDX-end170"/>was <?page value="17"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-310">
            <primary>capitalism</primary>
          </indexterm>destroyed and Saddam Hussein, who had once been supported by the <indexterm class="singular" xml:id="b-9781474207300-IDX-1879">
            <primary>United Nations</primary>
          </indexterm>United States in its war against Iran (1980–8), was executed. Iraq was left in ruins. <indexterm class="singular" xml:id="b-9781474207300-IDX-849">
            <primary>Halliburton</primary>
          </indexterm>Halliburton, the oil company from which Dick <indexterm class="singular" xml:id="b-9781474207300-IDX-338">
            <primary>Cheney, Dick</primary>
          </indexterm>Cheney allegedly resigned when he became vice-president, profited greatly from the invasion, emphasizing the capitalist culture that framed the invasion. The belligerent stance of the US and the UK, as instigators of the war, was initially condemned by UN weapons inspectors. In 2016, the long-delayed <indexterm class="singular" xml:id="b-9781474207300-IDX-340">
            <primary>Chilcott Report</primary>
          </indexterm>Chilcott report on Tony Blair’s role in the lead-up to the war, was equally condemnatory, stating that Blair had totally misled his people. The final irony—or perhaps calculation—is that the allies will probably benefit from the eventual rebuilding of the devastation that the war has wrought on Iraq. Was the Bush decision to invade Iraq imperialism as evidenced by the prevailing capitalist culture? Or was it just gross miscalculation and relative ignorance of the situation in the Middle East in gauging where the invasion would lead? However one chooses to answer these questions, it was the point when the idea of the Americans as mere propagators of <indexterm class="singular" xml:id="b-9781474207300-IDX-441">
            <primary>cultural imperialism</primary>
          </indexterm>cultural imperialism was finally laid to rest.</para>
</section>
<section xml:id="b-9781474207300-224">
<info xml:id="b-9781474207300-225">
<title xml:id="b-9781474207300-226">Are We Rome?</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-227">In a book published five years after the Iraq invasion of 2003, Cullen <indexterm class="singular" xml:id="b-9781474207300-IDX-1320">
            <primary>Murphy, Cullen</primary>
          </indexterm>Murphy, the author and former editor of <emphasis role="italic">Atlantic Magazine</emphasis>, asked the question <emphasis role="italic">Are We Rome?</emphasis> (<link linkend="b-9781474207300-ref420" role="bib">Murphy 2008</link>). It was a question the nineteenth-century empires had also wrestled with (<link linkend="b-9781474207300-ref366" role="bib">Lorcin 2002</link>, <link linkend="b-9781474207300-ref368" role="bib">2013b</link>). In his study of US activities in the Middle East, the historian Rashid <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1099">
            <primary>Khalidi, Rashid</primary>
          </indexterm>Khalidi highlights certain parallels. Since the end of the Cold War, he states, unlike Britain and France in the nineteenth century, US domination encompasses the whole world and in this it resembles premodern empires such as the <indexterm class="singular" xml:id="b-9781474207300-IDX-1582">
            <primary>Roman Empire</primary>
          </indexterm>Roman empire, <indexterm class="singular" xml:id="b-9781474207300-IDX-1778">
            <primary>Tang China</primary>
          </indexterm>Tang China, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1301">
            <primary>Mongols</primary>
          </indexterm>Mongols (<link linkend="b-9781474207300-ref330" role="bib">Khalidi 2004</link>: 153). The exemplar of Rome is not new in US history, nor is Murphy the only recent author to have reclaimed it (<link linkend="b-9781474207300-ref368" role="bib">Lorcin 2013b</link>: 416–19). Whereas the connection to Rome provides a certain eminence to the concept of US imperialism and raises the specter of possible decline, scholars have preferred to look at its distinctions, suggesting that US imperialism is a “<indexterm class="singular" xml:id="b-9781474207300-IDX-1374">
            <primary>new imperialism</primary>
          </indexterm>new imperialism,” a “<indexterm class="singular" xml:id="b-9781474207300-IDX-1676">
            <primary>soft imperialism</primary>
          </indexterm>soft imperialism,” a “<indexterm class="singular" xml:id="b-9781474207300-IDX-900">
            <primary>humanitarian imperialism</primary>
          </indexterm>humanitarian imperialism,” or “the Empire in new clothes” (<link linkend="b-9781474207300-ref262" role="bib">Hardt and Negri 2000</link>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1353">
            <primary>Negri, Antonio</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-853">
            <primary>Hardt, Michael</primary>
          </indexterm>; <link linkend="b-9781474207300-ref265" role="bib">Harvey 2003</link>; <link linkend="b-9781474207300-ref449" role="bib">Passavant and Dean 2004</link>; <link linkend="b-9781474207300-ref82" role="bib">Bricmont 2006</link>; <link linkend="b-9781474207300-ref408" role="bib">Mirrlees 2006</link>; <link linkend="b-9781474207300-ref412" role="bib">Mooers 2006</link>). Are these “types” of imperialism any different in form from what went before? Certainly, Hardt and Negri think so, pointing out that “in contrast to imperialism, Empire establishes no territorial center of power and does not rely on fixed boundaries or barriers” (2000: xii). Their work, which provoked considerable debate, was published before 9/11 and the subsequent wars in <indexterm class="singular" xml:id="b-9781474207300-IDX-8">
            <primary>Afghanistan</primary>
          </indexterm>Afghanistan and Iraq, a time their argument may have made more sense. But, whatever the era, can one really have empire (the situation) without imperialism (the <indexterm class="endofrange" startref="b-9781474207300-IDX-227" xml:id="b-9781474207300-IDX-end15"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-284" xml:id="b-9781474207300-IDX-end23"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-607" xml:id="b-9781474207300-IDX-end52"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-766" xml:id="b-9781474207300-IDX-end73"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1006" xml:id="b-9781474207300-IDX-end108"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1012" xml:id="b-9781474207300-IDX-end109"/>process)?</para>
<?page value="18"?>
<para xml:id="b-9781474207300-228">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-397">
            <primary>communism</primary>
          </indexterm>In considering what <indexterm class="singular" xml:id="b-9781474207300-IDX-913">
            <primary>imperialism</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1946">
            <primary>United States</primary>
            <secondary>imperialism</secondary>
          </indexterm>imperialism means, the two concepts of <indexterm class="singular" xml:id="b-9781474207300-IDX-383">
            <primary>colonialism</primary>
          </indexterm>colonialism and imperialism are often elided. Observers who make this association overlook the fact, the absence of settlers or a colonial administration—in other words, the physical territorial imprint of earlier empires—does not mean that such disruption cannot take place without that presence, or indeed that the cultural impositions of imperialism are absent. To be sure, the difference between US imperialism and the nineteenth-century western imperialisms is the lack of settler colonization, but many of the military bases that the United States has around the world have large numbers of military personnel. Even though they do not qualify as settlers, their presence impinges—for better or worse—on the local culture, economy, and society. This can lead to as much local dissatisfaction and resentment as any European settler colony. The June 2016 demonstrations against the US military presence (and its culture) in <indexterm class="singular" xml:id="b-9781474207300-IDX-1432">
            <primary>Okinawa</primary>
          </indexterm>Okinawa are a case in point. Nonetheless, military colonization is an established fact of US imperialism. In an article that appeared in <emphasis role="italic">The Nation</emphasis>, David <indexterm class="singular" xml:id="b-9781474207300-IDX-1986">
            <primary>Vine, David</primary>
          </indexterm>Vine (<link linkend="b-9781474207300-ref565" role="bib">2015</link>) claimed that there are 800 US military bases of varying sizes around the world. The US <indexterm class="singular" xml:id="b-9781474207300-IDX-1940">
            <primary>United States</primary>
            <secondary>Department of Defense</secondary>
          </indexterm>Department of Defense is more circumspect about broadcasting the number of their overseas bases, but the fact remains that the number is in the many hundreds. As other empires before it, the United States establishes its overseas bases for strategic and economic reasons. Strategically during the Cold War as a bulwark against a communist threat and since the 1990s against terrorism and what it sees as rogue states, such as North Korea. Economically, as Ellen <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2037">
            <primary>Wood, Ellen</primary>
          </indexterm>Wood has aptly described it, the US “has maintained a so-called informal empire, imposing market forces and manipulating them to the advantage of US capital … this would have been impossible without the support of military power, but that power has not been generally used … [for] capturing and holding colonial territories” (2006: 13).</para>
<para xml:id="b-9781474207300-229">If US economic and strategic interests are sometimes obscured when discussing the military presence, the notion of a <emphasis role="italic">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-1483">
              <primary>
                <emphasis role="italic">Pax Americana</emphasis>
              </primary>
            </indexterm>Pax Americana</emphasis> is not. As <indexterm class="singular" xml:id="b-9781474207300-IDX-855">
            <primary>Harvey, David</primary>
          </indexterm>Harvey has pointed out, for those individuals who admit to the notion of US imperialism, they feel that the US must “establish a Pax Americana that can bestow the same benefits upon the world as the <indexterm class="singular" xml:id="b-9781474207300-IDX-1484">
            <primary>
              <emphasis role="italic">Pax Britannica</emphasis>
            </primary>
          </indexterm>Pax Britannica secured in the last half of the nineteenth century” (2003: 4). Pro-imperial observers, such as the late Ben <indexterm class="singular" xml:id="b-9781474207300-IDX-2008">
            <primary>Wattenberg, Ben</primary>
          </indexterm>Wattenberg, or the historian, Niall <indexterm class="singular" xml:id="b-9781474207300-IDX-592">
            <primary>Ferguson, Niall</primary>
          </indexterm>Ferguson, openly encourage(d) the US to take up the imperial mantle (<link linkend="b-9781474207300-ref576" role="bib">Wattenberg 1991</link>; <link linkend="b-9781474207300-ref204" role="bib">Ferguson 2003</link>). Both Ferguson and Khalidi compare the British and American empires, but whereas Ferguson imagines the US as a possible continuation of British imperial achievements, Khalidi, who only focuses on the Middle East, chides the United States for its total lack of political or social understanding of the area. Although he in no way condones imperialism, he contrasts the US diplomats and politicians with interwar imperialists such as Gertrude <indexterm class="singular" xml:id="b-9781474207300-IDX-214">
            <primary>Bell, Gertrude</primary>
          </indexterm>Bell, T.E. <indexterm class="singular" xml:id="b-9781474207300-IDX-1147">
            <primary>Lawrence, T.E.</primary>
          </indexterm>Lawrence, and Percy <indexterm class="singular" xml:id="b-9781474207300-IDX-433">
            <primary>Cox, Percy</primary>
          </indexterm>Cox, all of whom were either Arabists or had a sophisticated grasp <indexterm class="endofrange" startref="b-9781474207300-IDX-373" xml:id="b-9781474207300-IDX-end33"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1099" xml:id="b-9781474207300-IDX-end126"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1267" xml:id="b-9781474207300-IDX-end135"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1899" xml:id="b-9781474207300-IDX-end195"/>of <?page value="19"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-327">
            <primary>Central Intelligence Agency, CIA</primary>
          </indexterm>local culture, politics, and society, allowing them to maneuver with less heavy-handedness than their American counterparts, who have left the Middle East in ruins (<link linkend="b-9781474207300-ref330" role="bib">Khalidi 2004</link>: 161). In short, cultural and social differences shape political and diplomatic developments.</para>
</section>
<section xml:id="b-9781474207300-230">
<info xml:id="b-9781474207300-231">
<title xml:id="b-9781474207300-232">Conclusion</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-233">The ideological principles of spreading <indexterm class="singular" xml:id="b-9781474207300-IDX-477">
            <primary>democracy</primary>
          </indexterm>democracy and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-893">
            <primary>human rights</primary>
          </indexterm>human rights, which are called upon to justify invasion and interference, like all ideologies of empire, are suited to their particular epoch. Although the notion of imposing democracy (rather than introducing it gradually) is a throwback to <indexterm class="singular" xml:id="b-9781474207300-IDX-1180">
            <primary>Lugard, Lord Frederick</primary>
          </indexterm>Lugard’s idea of the need for democratic principles, Wood argues that the essence of US democracy is “the coupling of formal democracy with substantive class rule, the class rule of capital” (2006: 19). The propping up of the numerous autocratic rulers that the United States supported over the twentieth century, or CIA involvement <indexterm class="endofrange" startref="b-9781474207300-IDX-2037" xml:id="b-9781474207300-IDX-end217"/>in <?page value="20"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure0_5"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-831">
            <primary>Group of</primary>
          </indexterm>deposing democratically elected leaders such as President <indexterm class="singular" xml:id="b-9781474207300-IDX-84">
            <primary>Allende, Salvador</primary>
          </indexterm>Allende of Chile in 1973, belie a genuine intention to spread <indexterm class="singular" xml:id="b-9781474207300-IDX-478">
            <primary>democracy</primary>
          </indexterm>democracy to areas where it is lacking. This type of selectivity is, of course, a hallmark of imperialism and its socioeconomic cultures. Similarly, upholding human rights as a justification to use military force to invade can be seen as a modern manifestation of the “<indexterm class="singular" xml:id="b-9781474207300-IDX-633">
            <primary>France</primary>
            <secondary>civilizing mission</secondary>
          </indexterm>civilizing mission.” Jean <indexterm class="singular" xml:id="b-9781474207300-IDX-257">
            <primary>Bricmont, Jean</primary>
          </indexterm>Bricmont has elaborated the way in which human rights has justified the promotion of imperialism. His intention is not to highlight US or western hypocrisy, but rather to demonstrate that Left-leaning individuals, whether politicians or intellectuals, can be as implicated in present-day imperialism as the neo-conservatives or those on the traditional Right (<link linkend="b-9781474207300-ref82" role="bib">Bricmont 2006</link>). In this it is no different from the nineteenth century when left-wingers were implicated in imperialism in much the same way as they are today. Whether it is the civilizing mission, the introduction of <indexterm class="singular" xml:id="b-9781474207300-IDX-1294">
            <primary>modernity</primary>
          </indexterm>modernity, of democracy or of human rights, the conceit of western imperialists over time has been that they will swap improvement of the societies they inhabit for the exploitation of territorial resources and all will benefit as a result.</para>
<figure label="0.5" xlink:href="b-9781474207300-figure0_5" xlink:role="objectPointer" xml:id="b-9781474207300-fig0_5">
<info xml:id="b-9781474207300-234">
<title xml:id="b-9781474207300-235">Berlin, Germany, 2017. Model wearing American apparel. Credit: Christian Vierig/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-236">
<imageobject xml:id="b-9781474207300-237">
<imagedata align="center" fileref="images/fig0_5.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-239">For over two millennia, western imperialisms have affected history, directly or indirectly. They have transformed the society, culture, economy, and politics of the areas they have invaded, conquered, or colonized, and influenced the territories on their peripheries (<link linkend="b-9781474207300-fig0_5" role="figure">Figure 0.5</link>). In turn, they too have been transformed, economically, culturally, and morally. In the name of cultural concepts such as “civilization,” “progress,” and “modernity,” they have exploited natural resources and dragooned the labor to extract them. In the process, more often than not, they betrayed the values they had committed to <indexterm class="endofrange" startref="b-9781474207300-IDX-893" xml:id="b-9781474207300-IDX-end94"/>extend.</para>
</section>
</chapter>
<chapter label="1" xml:id="b-9781474207300-chapter1">
<info xml:id="b-9781474207300-240">
<title xml:id="b-9781474207300-241">
          <?page value="21"?>War</title>
<author xlink:href="C0004" xlink:role="biblioAuID">
<personname role="first-last">
<firstname>Richard</firstname> <othername role="middle-initials">S.</othername> <surname>Fogarty</surname>
          </personname>
        </author>
<pagenums>21–46</pagenums>
<biblioid class="doi">10.5040/9781474207300.ch-001</biblioid>
<mediaobject xml:id="b-9781474207300-242">
<imageobject xml:id="b-9781474207300-243">
<imagedata fileref="pdfs/9781474207300.ch-001.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
<copyright>
          <year>2019</year>
          <holder>Bloomsbury Publishing</holder>
        </copyright>
      </info>
<para role="fullOut" xml:id="b-9781474207300-244">
        <indexterm class="singular" xml:id="b-9781474207300-IDX-5004">
          <primary>World War II</primary>
        </indexterm>
        <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2002">
          <primary>war</primary>
        </indexterm>In his <emphasis role="italic">The Wretched of the Earth</emphasis> ([1961] 2004), psychiatrist and anticolonial activist Frantz <indexterm class="startofrange" xml:id="b-9781474207300-IDX-576">
          <primary>Fanon, Frantz</primary>
        </indexterm>Fanon analyzed the “reactionary psychoses” that he found in <indexterm class="singular" xml:id="b-9781474207300-IDX-1987">
          <primary>violence</primary>
          <secondary>colonial</secondary>
        </indexterm>colonial subjects living through the wars of <indexterm class="singular" xml:id="b-9781474207300-IDX-463">
          <primary>decolonization</primary>
        </indexterm>decolonization so prevalent after 1945. Understanding these mental disorders required giving “special priority to war understood in its totality and in its particularity, to colonial war. After the two great world wars, there has been no shortage of publications on the mental pathology of soldiers engaged in combat and of civilian victims of evacuations and bombings. The unprecedented features of some of the psychiatric descriptions presented here confirm, if confirmation were still necessary, that colonial war is distinctive even in the pathology that it produces” (<link linkend="b-9781474207300-ref201" role="bib">Fanon 1974</link>: 179–80). Although Fanon was interested in the particularities of the colonial situation and colonial warfare, his statement highlights the two critical foci for an analysis of war in the cultural history of Western empires in the modern age: “big” wars such as the Second World War, and the “small” wars that fractured and dissolved the formal western colonial empires built up during the nineteenth and early twentieth centuries. Both conventional wars waged between states, in large part by uniformed militaries organized along traditional lines, and numerous “irregular” or “asymmetrical” wars waged within states or colonies by partisans or guerillas, often loosely organized and inextricably integrated into civilian populations, implicated the politics and resources of empires in profound, often fateful ways. Surveying this history requires attention to both kinds of wars, as well as to the many ways distinctions between them often broke down. Moreover, one of the clear lessons that viewing the modern history of Western empires through the lens of war can teach is that colonial violence, and perhaps <indexterm class="singular" xml:id="b-9781474207300-IDX-384">
          <primary>colonialism</primary>
        </indexterm>colonialism itself, is truly war without end.</para>
<?page value="22"?>
<section xml:id="b-9781474207300-245">
<info xml:id="b-9781474207300-246">
<title xml:id="b-9781474207300-247">Empire, War, and Violence</title>
<itermset xml:id="b-9781474207300-IDX-see4">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-109">
              <primary>anti-colonialism</primary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-248">Fanon insisted on the distinctiveness of “colonial war,” which he argued took on “the character of a real genocide” (1974: 179). And it is precisely this totalizing quality that necessitates a focus on the <indexterm class="singular" xml:id="b-9781474207300-IDX-386">
            <primary>colonialism</primary>
            <secondary>culture of</secondary>
          </indexterm>culture of colonialism, and culture more broadly, when attempting to understand the history of war and empire in the modern age. Fanon was most famous for analyzing the role of violence in colonialism, for arguing that colonialism “is violence in its natural state” (1974: 25). This violence was not limited to battlefields, even the often unconventional battlefields of colonial conquest—with its massacres, burning of villages, dislocation of peoples and expropriation of lands, indiscriminate killing of men, women, and children to sow terror and demonstrate overwhelming power—and of colonial resistance—with its massacres, bombings of cafés and other public places, assassinations of representatives of the colonial order, and murder of civilian colonists. Fanon himself documented all of this incisively to demonstrate that the violence of colonialism bred the violence of anticolonialism, and indeed only the latter could cure the former. This was all the more true because modern empires sustained their rule through <indexterm class="singular" xml:id="b-9781474207300-IDX-1989">
            <primary>violence</primary>
            <secondary>cultural</secondary>
          </indexterm>cultural violence, waging war on ways of life and beliefs, establishing the culture and even the skin color of the colonizers as the standard against which all of indigenous culture would be measured and found wanting (<link linkend="b-9781474207300-ref201" role="bib">Fanon 1974</link>; see also <link linkend="b-9781474207300-ref200" role="bib">Fanon 1952</link>).</para>
<para xml:id="b-9781474207300-249">Yet this focus on culture to understand colonial violence and war is not unique in the field of the history of warfare. In fact, a cultural approach to the history of war has predominated in much of the writing about the subject for the last several decades. In 1976, John <indexterm class="singular" xml:id="b-9781474207300-IDX-1072">
            <primary>Keegan, John</primary>
          </indexterm>Keegan published his seminal work, <emphasis role="italic">The Face of Battle</emphasis>, which made the “immediate and personal” experiences of ordinary soldiers central to military history ([1976] 1978: 342). The same year saw Michael <indexterm class="singular" xml:id="b-9781474207300-IDX-890">
            <primary>Howard, Michael</primary>
          </indexterm>Howard call for historians to provide an understanding, “not simply of the wars themselves but of the societies which fought them.” For military historians, there is “literally no branch of human activity which is not to a greater or lesser extent relevant to his subject. He has to study war not only, as Hans <indexterm class="singular" xml:id="b-9781474207300-IDX-475">
            <primary>Delbrück, Hans</primary>
          </indexterm>Delbrück put it, in the framework of political history, but in the framework of economic, social and cultural history as well. War has been part of a totality of human experience, the parts of which can be understood only in relation to one another. One cannot adequately describe how wars were fought without giving some idea of what they were fought about” (Howard 1976: ix–x). Since this time, though there is still some debate about the nature and role of military history in the academy, historians of both war and culture have taken up these approaches in earnest and the so-called “new military history” is no longer so new (the literature on the subject is large, but for useful overviews, see <link linkend="b-9781474207300-ref446" role="bib">Paret 1991</link>; <link linkend="b-9781474207300-ref373" role="bib">Lynn 1997</link>, <link linkend="b-9781474207300-ref374" role="bib">2007</link>; <link linkend="b-9781474207300-ref124" role="bib">Citino 2007</link>; <link linkend="b-9781474207300-ref198" role="bib">Evans 2008</link>; <link linkend="b-9781474207300-ref63" role="bib">Biddle and Citino 2014</link>).</para>
<?page value="23"?>
<para xml:id="b-9781474207300-250">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-5005">
            <primary>World War II</primary>
          </indexterm>Such an approach is tailor-made for understanding <indexterm class="singular" xml:id="b-9781474207300-IDX-1988">
            <primary>violence</primary>
            <secondary>colonial</secondary>
          </indexterm>colonial warfare, and scholars have expanded Fanon’s insights into the <indexterm class="singular" xml:id="b-9781474207300-IDX-387">
            <primary>colonialism</primary>
            <secondary>violence</secondary>
          </indexterm>violence inherent in all aspects of colonialism to consider what terms such as <indexterm class="singular" xml:id="b-9781474207300-IDX-75">
            <primary>Algeria</primary>
            <secondary>War of Independence</secondary>
          </indexterm>war and violence really mean in colonial contexts. The prolific historian of European colonialism H.L. <indexterm class="singular" xml:id="b-9781474207300-IDX-2013">
            <primary>Wesseling, H. L.</primary>
          </indexterm>Wesseling has, like Fanon, argued that colonial wars are in fact distinct from war as commonly understood. War aims in colonial wars were absolute, with permanent subjection of entire populations as their chief goal. Victory in these wars was hard to define, since this absolute aim was difficult—often impossible—to achieve. For indigenous peoples, these conflicts involved the entire population, since physical and cultural survival was at stake. In this existential struggle, conquerors sought not merely battlefield victory, but the winning of the “hearts and minds” of entire peoples—in effect not merely waging war against indigenous culture, but expressly <emphasis role="italic">for</emphasis> western culture. War was total for indigenous peoples, but means were always limited for the conquerors, who often sought empire on the cheap (costs measured both in western lives and money). In these sorts of wars, the usual dichotomy between war and peace was difficult to discern and maintain, with constant resort, even after formal conquest, to “police actions,” “pacification,” suppression of revolts, and violent displays of authority and power. In the end, all of colonial rule, from conquest to governance, and indeed to <indexterm class="singular" xml:id="b-9781474207300-IDX-464">
            <primary>decolonization</primary>
          </indexterm>decolonization was a form of “<indexterm class="singular" xml:id="b-9781474207300-IDX-1992">
            <primary>violence</primary>
            <secondary>structural</secondary>
          </indexterm>structural violence” that makes the history of colonialism and the history of war synonymous (<link linkend="b-9781474207300-ref579" role="bib">Wesseling 1997</link>: 3–11).</para>
<para xml:id="b-9781474207300-251">A recent volume edited by historian of French colonialism Martin <indexterm class="singular" xml:id="b-9781474207300-IDX-1820">
            <primary>Thomas, Martin</primary>
          </indexterm>Thomas explores this idea more expansively. He makes clear that modern empires provide the contexts for some of the clearest examples of what French sociologist Pierre <indexterm class="singular" xml:id="b-9781474207300-IDX-239">
            <primary>Bourdieu, Pierre</primary>
          </indexterm>Bourdieu called “<indexterm class="singular" xml:id="b-9781474207300-IDX-1767">
            <primary>symbolic violence</primary>
          </indexterm>symbolic violence,” a hegemonic project substituting the social values and standards of the colonizer for those of the colonized (<link linkend="b-9781474207300-ref538" role="bib">Thomas 2011</link>: xvii). In the end, Thomas comes to the same conclusion as Wesseling: “Whether or not colonial control stemmed directly from military conquest, it seems reasonable to suggest that violence was integral to the structures of colonialism: its economic foundations, its institutions, and its governing precepts” (2011: xviii). What this means for an analysis of war in the cultural history of empires since the end of the First <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2050">
            <primary>World War I</primary>
          </indexterm>World War is that the focus must be not merely on large conventional conflicts waged in the course of expanding, maintaining, or challenging imperial rule—the Second World War, the wars in Algeria and <indexterm class="singular" xml:id="b-9781474207300-IDX-1973">
            <primary>Vietnam</primary>
          </indexterm>Vietnam, for instance. The focus must also be on the violence, sometimes explicitly militarized and sometimes not, of everyday colonialism (on violence and everyday colonialism, see <link linkend="b-9781474207300-ref416" role="bib">Moyd 2014</link>).</para>
<para xml:id="b-9781474207300-252">In his 1896 analysis of colonial warfare, British Colonel Charles <indexterm class="startofrange" xml:id="b-9781474207300-IDX-290">
            <primary>Callwell, Charles</primary>
          </indexterm>Callwell famously called western armies’ operations in the building and maintenance of empire “small wars,” a term which ever since has distinguished colonial violence from supposedly more conventional interstate warfare. Small wars are “all <?page value="24"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-901">
            <primary>humanitarianism</primary>
          </indexterm>campaigns other than those where both the opposing sides consist of regular troops” (<link linkend="b-9781474207300-ref102" role="bib">Callwell [1896] 1906</link>: 21). Callwell and other professional soldiers since have taken these conflicts seriously, but recognized that they were different and called both for different analysis and for military approaches that diverged from those western soldiers developed with fighting each other in mind. Though they differed from Callwell and the so-called <indexterm class="singular" xml:id="b-9781474207300-IDX-269">
            <primary>British School</primary>
          </indexterm>British school, who leaned more heavily on vigorous force and intimidation in what has come to be called counterinsurgency, French military figures also recognized the very different circumstances colonial war presented. In the nineteenth and early twentieth centuries, generals such as Thomas-Robert <indexterm class="singular" xml:id="b-9781474207300-IDX-273">
            <primary>Bugeaud, Thomas-Robert</primary>
          </indexterm>Bugeaud, Joseph <indexterm class="singular" xml:id="b-9781474207300-IDX-699">
            <primary>Gallieni, Joseph</primary>
          </indexterm>Gallieni, and Hubert <indexterm class="singular" xml:id="b-9781474207300-IDX-1182">
            <primary>Lyautey, Hubert</primary>
          </indexterm>Lyautey certainly did not shrink from violence, even extreme violence, but they made political maneuvering and supposedly humanitarian efforts to bestow upon indigenous peoples the benefits of enlightened colonial rule an explicit part of their strategies for erecting stable French control (<link linkend="b-9781474207300-ref457" role="bib">Porch 1986</link>; <link linkend="b-9781474207300-ref579" role="bib">Wesseling 1997</link>: 20–4; <link linkend="b-9781474207300-ref206" role="bib">Finch 2013</link>). They recognized what Fanon would later also highlight: that colonial rule itself was a sort of war against native populations, a total war that encompassed all aspects of political, social, economic, and cultural activities. So not only were the wars of colonial conquest, “a series of real wars comparable in intensity and magnitude with many of the major wars in European history” (<link linkend="b-9781474207300-ref579" role="bib">Wesseling 1997</link>: 19), but any attempt to grapple with the history and meaning of war in modern imperial and colonial contexts must take account of the systemic violence that was the “very essence” of modern empires (<link linkend="b-9781474207300-ref538" role="bib">Thomas 2011</link>: xiv). Accordingly, the survey that follows will proceed chronologically, beginning with the aftermath of the First World War, and will give due attention to the large-scale conflicts that punctuate the history of empire in this period, but will also take care to note the “smaller,” though often no less significant and deadly, episodes that scholars must consider as part of imperial wars without end.</para>
</section>
<section xml:id="b-9781474207300-253">
<info xml:id="b-9781474207300-254">
<title xml:id="b-9781474207300-255">The Apogee of Western Colonial Empires: The Violent Status Quo, 1920–39</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-256">Two brief spasms of violence in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-265">
            <primary>British India</primary>
          </indexterm>British India in 1919 can stand as representative of the two kinds of “war” that would characterize the history of Western empires in the aftermath of the First World War. In early May, the British Indian government declared war on <indexterm class="singular" xml:id="b-9781474207300-IDX-9">
            <primary>Afghanistan</primary>
          </indexterm>Afghanistan, in response to a cross-border incursion. Thus began the three-month <indexterm class="singular" xml:id="b-9781474207300-IDX-1817">
            <primary>Third Anglo-Afghan War</primary>
          </indexterm>Third Anglo-Afghan War, which pitted against each other uniformed armies acting on behalf of states, included pitched battles and skirmishes, as well as the use of air power, and concluded with a formal peace treaty. Scarcely three weeks before the outbreak of these formal hostilities, hundreds of peaceful protesters and religious pilgrims gathered in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1038">
            <primary>Jallianwala Bagh</primary>
          </indexterm>Jallianwala Bagh, a park in <indexterm class="singular" xml:id="b-9781474207300-IDX-95">
            <primary>Amritsar</primary>
          </indexterm>Amritsar in the province of <indexterm class="singular" xml:id="b-9781474207300-IDX-1545">
            <primary>Punjab</primary>
          </indexterm>Punjab. They <indexterm class="endofrange" startref="b-9781474207300-IDX-290" xml:id="b-9781474207300-IDX-end25"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-576" xml:id="b-9781474207300-IDX-end49"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2002" xml:id="b-9781474207300-IDX-end215"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2050" xml:id="b-9781474207300-IDX-end221"/>were <?page value="25"?>there in contravention of a recent official prohibition of public meetings, and so the local commander ordered his Gurkha troops to fire on the crowd. Largely trapped in the walled confines of the park, and under fire that was deliberately aimed at preventing escape and inflicting maximum damage, at least 379 men, women, and children were killed, and over 1,000 wounded. Although the use of force aimed at dampening political unrest and anticolonial feeling, the carnage radicalized Indian politics and stands as one of the landmark events leading to eventual independence (<link linkend="b-9781474207300-ref173" role="bib">Draper 1985</link>).</para>
<para xml:id="b-9781474207300-257">Central to both events was the figure of Reginald <indexterm class="startofrange" xml:id="b-9781474207300-IDX-504">
            <primary>Dyer, Reginald</primary>
          </indexterm>Dyer. A colonel temporarily promoted to brigadier general, Dyer commanded the <indexterm class="singular" xml:id="b-9781474207300-IDX-845">
            <primary>Gurkhas</primary>
          </indexterm>Gurkhas at Jallianwala Bagh and personally directed their murderous fire. He hoped, he said, to make a sufficient impression on the local population to prevent an anti-British uprising. A few weeks later, he was posted to the Afghan frontier, and led a brigade in significant combat there (<link linkend="b-9781474207300-ref137" role="bib">Collett 2006</link>). It is true that Dyer’s actions at Amritsar proved deeply controversial, and many condemned the barbarism of his orders that day. But it is also true that he had many defenders, and many of these praised him for having “saved” British India from violent revolt. And what is eminently clear is that he and others saw his actions that spring and summer, both in the Punjab and the North-West Frontier, as part of his primary duties as a soldier responsible for militarily upholding British colonial rule. At base, this was not merely a technical question of firepower and military maneuver, but also a cultural question of “prestige.” As scholar V.G. <indexterm class="singular" xml:id="b-9781474207300-IDX-1105">
            <primary>Kiernan, V.G.</primary>
          </indexterm>Kiernan has noted of European thinking about colonial war, “Everything, or almost everything, could be tolerated if it was deemed necessary for the upholding of prestige” (<link linkend="b-9781474207300-ref336" role="bib">Kiernan 1998</link>). It was not accidental that the ostensible reason for the Jallianwala Bagh massacre, in addition to a generalized fear of revolt, was an earlier attack by Indians on a British woman. European women in the colonies were the repositories and emblems of white status and authority, and as such their preservation from harm or even contact with indigenous populations was a primary duty for male colonizers (<link linkend="b-9781474207300-ref117" role="bib">Chaudhuri and Strobel 1992</link>; <link linkend="b-9781474207300-ref125" role="bib">Clancy-Smith and Gouda 1998</link>; <link linkend="b-9781474207300-ref511" role="bib">Stoler 2002</link>). The <indexterm class="singular" xml:id="b-9781474207300-IDX-1234">
            <primary>masculinity</primary>
          </indexterm>masculinity embodied in the military uniform positioned men like Dyer as particularly aggressive guardians of gendered and racialized honor and prestige. He himself declared that, for the British, women were “sacred,” and this explained both his murderous actions at Jallianwala Bagh and his later order that Indians wishing to cross the street in which the British woman had been attacked must crawl on “on all fours” or be whipped (<link linkend="b-9781474207300-ref347" role="bib">Lal 1993</link>). Dyer’s service in the <indexterm class="singular" xml:id="b-9781474207300-IDX-7">
            <primary>Afghan War</primary>
          </indexterm>Afghan war, and mention in dispatches there, only further emphasized his embodiment of masculine European superiority and right to empire. In his actions in 1919, we can see clearly how the <indexterm class="singular" xml:id="b-9781474207300-IDX-388">
            <primary>colonialism</primary>
            <secondary>violence</secondary>
          </indexterm>violence of everyday colonialism (even if the massacre of hundreds of civilians represents a grotesque extreme) and the violence of conventional war could be linked and were a critical part of the war story of empire during this <indexterm class="endofrange" startref="b-9781474207300-IDX-265" xml:id="b-9781474207300-IDX-end22"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1038" xml:id="b-9781474207300-IDX-end114"/>period.</para>
<?page value="26"?>
<para xml:id="b-9781474207300-258">From some points of view, the anxiety of Dyer and other colonial officials about prestige and the dangers of indigenous challenges to European authority appears curious. At the end of the First <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2051">
            <primary>World War I</primary>
          </indexterm>World War, European overseas empires appeared to be at the very height of their power and stability. They certainly reached their greatest physical extent. The victorious powers that emerged from the First World War expanded their imperial holdings, with the two largest empires—the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-262">
            <primary>British Empire Exhibition (1924)</primary>
          </indexterm>British and the French—adding significant former <indexterm class="singular" xml:id="b-9781474207300-IDX-1451">
            <primary>Ottoman Empire</primary>
          </indexterm>Ottoman and German territories as <indexterm class="singular" xml:id="b-9781474207300-IDX-1151">
            <primary>League of Nations</primary>
          </indexterm>League of Nations mandates. The interwar period saw spectacular displays of imperial confidence and triumphalism, most notably the British <indexterm class="singular" xml:id="b-9781474207300-IDX-635">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-724">
            <primary>Germany</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-791">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1599">
            <primary>Russia</primary>
            <secondary>empire</secondary>
          </indexterm>Empire Exhibition of 1924 and the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1480">
            <primary>Paris Colonial Exposition (1931)</primary>
          </indexterm>Paris Colonial Exposition of 1931, which attracted tens of millions of visitors to witness the grandeur of European power and efforts to “civilize” the world’s peoples. The technological, economic, and military power of the West was never more secure, even overwhelming, and anticolonial resistance, whether in the form of demands for greater rights or for independence, was muted and ineffectual compared with what emerged after 1945. For many in the West, the First World War had proved that empire “paid,” since colonial material and manpower resources contributed notably to the global war effort (<link linkend="b-9781474207300-ref482" role="bib">Sarraut 1923</link>). The empires that had won the “Great War for Civilization” remained confident in their right and duty to uphold that civilization and continue its spread and development through imperialism, and they retained the means to do so.</para>
<para xml:id="b-9781474207300-259">Yet viewed from other perspectives, the aftermath of the First World War showed the first signs that the Western empires built up over the course of the eighteenth and nineteenth centuries were in trouble, and that ideas and events were beginning to destabilize the very idea of empire itself. First of all, the war saw four of the world’s largest empires go down to defeat and dissolution. By 1918 or very soon thereafter, the German, Austrian, Russian, and Ottoman empires were no more. <indexterm class="startofrange" xml:id="b-9781474207300-IDX-767">
            <primary>Great Britain</primary>
          </indexterm>Great Britain and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-608">
            <primary>France</primary>
          </indexterm>France expanded their imperial holdings, often at the expense of these defeated empires, but both nations were exhausted and relatively weakened by the effort required to win the Great War. Moreover, the “mandates” under which these two powers (as well as <indexterm class="singular" xml:id="b-9781474207300-IDX-208">
            <primary>Belgium</primary>
          </indexterm>Belgium, <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1046">
            <primary>Japan</primary>
          </indexterm>Japan, <indexterm class="singular" xml:id="b-9781474207300-IDX-1682">
            <primary>South Africa</primary>
          </indexterm>South Africa, <indexterm class="singular" xml:id="b-9781474207300-IDX-157">
            <primary>Australia</primary>
          </indexterm>Australia, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1375">
            <primary>New Zealand</primary>
          </indexterm>New Zealand) came to rule the possessions of their defeated enemies resided formally under international control through the League of Nations. This stemmed from impulses that ran counter to the idea of foreign imperial rule, in particular Wilsonian rhetoric of national self-determination. American President <indexterm class="singular" xml:id="b-9781474207300-IDX-2025">
            <primary>Wilson, Woodrow</primary>
          </indexterm>Wilson himself balked at extending his ideas, developed as an antidote to the imperial machinations that he believed had helped bring on the war, to non-western (and non-white, for he was a white supremacist) peoples. But many of these peoples enthusiastically took up Wilson’s ideals to challenge imperialism and colonialism. In a “Wilsonian Moment,” anticolonial movements and uprisings developed across the globe in 1919 (<link linkend="b-9781474207300-ref388" role="bib">Manela 2007</link>). In addition, the ideas that underwrote the <indexterm class="endofrange" startref="b-9781474207300-IDX-504" xml:id="b-9781474207300-IDX-end43"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1222">
            <primary>mandate system</primary>
          </indexterm>mandate <?page value="27"?>system suggested that the end goal of imperial control was to confer on the colonized the right to self-rule, since the mandatory powers were to relinquish power and claim over the territories once their populations had developed the capacity for self-determination. This begged the question of why the same logic should not apply to all areas and instances of imperial rule, and perhaps implied that the end of empire was only a matter of time. At the <indexterm class="singular" xml:id="b-9781474207300-IDX-1968">
            <primary>Versailles Peace Conference (1919)</primary>
          </indexterm>Versailles Peace Conference in 1919, Japan formally, if unsuccessfully, challenged the supposed racial superiority that undergirded western imperial rule, while the emerging powers of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1900">
            <primary>United States</primary>
          </indexterm>United States and the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1707">
            <primary>Soviet Union</primary>
          </indexterm>Soviet Union showed themselves largely ideologically opposed to and politically unwilling to support “old-fashioned” European colonialism (even though they themselves arguably constituted their own particular kinds of empire).</para>
<para xml:id="b-9781474207300-260">All of this is to say that colonial violence and <indexterm class="singular" xml:id="b-9781474207300-IDX-731">
            <primary>Germany</primary>
            <secondary>war</secondary>
          </indexterm>war in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1002">
            <primary>interwar period</primary>
          </indexterm>interwar period (and beyond) took place against the backdrop of increasing challenges to imperial control and legitimacy and the growing destabilization of empires on both the practical and ideological levels. Seen in this light, displays of imperial confidence such as the <indexterm class="singular" xml:id="b-9781474207300-IDX-268">
            <primary>British Riots (1919)</primary>
          </indexterm>British Empire Exhibition and the Paris Colonial Exposition might well have been efforts to mask increasing anxieties and doubts. Nonetheless, expressions of confidence in the aftermath of the First World War were rooted in a real sense that the war had proven the utility of empire. Contemporaries understood the conflict as a war of empires, and so increasingly have historians (<link linkend="b-9781474207300-ref230" role="bib">Gerwarth and Manela 2014b</link>; <link linkend="b-9781474207300-ref309" role="bib">Jarboe and Fogarty 2014</link>). Great Britain mobilized its vast imperial resources, including not just armies and materials from its white-ruled <indexterm class="singular" xml:id="b-9781474207300-IDX-495">
            <primary>dominions</primary>
          </indexterm>Dominions but also over a million Indians as soldiers and laborers, and hundreds of thousands of Africans to fight and carry supplies. France mobilized more than 500,000 colonial subjects to fight in Europe, and some 200,000 to labor there as well. Along with material resources, these figured prominently in the French war effort and the nation’s <emphasis role="italic">culture de guerre</emphasis>. The German, Ottoman, Austro-Hungarian, Russian, Belgian, Portuguese, Italian, Japanese, US, and even Chinese war efforts saw significant colonial involvement and implications. Notorious episodes in the aftermath of the war—such as widespread race riots in Britain in 1919, provoked by resentment against the presence of men of color engaged in war-related work, and the international scandal of the so-called “<indexterm class="singular" xml:id="b-9781474207300-IDX-225">
            <primary>Black Shame</primary>
          </indexterm>Black Shame,” which saw the flowering of racist anxieties in response to the French use of troops from the colonies to occupy the <indexterm class="singular" xml:id="b-9781474207300-IDX-1576">
            <primary>Rhineland</primary>
          </indexterm>Rhineland in defeated Germany—demonstrated that the culture of empire, and its ever-present basis in racism and white supremacy, helped define the culture of war (<link linkend="b-9781474207300-ref67" role="bib">Bland 2005</link>; <link linkend="b-9781474207300-ref562" role="bib">Van Galen Last 2015</link>).</para>
<para xml:id="b-9781474207300-261">Violence and continued warfare were prevalent in many areas around the globe after the ostensible end of the Great War in 1918, and much of this was attributable to the effects of empire. Most immediately and perhaps most spectacularly, <indexterm class="singular" xml:id="b-9781474207300-IDX-1593">
            <primary>Russia</primary>
          </indexterm>Russia, eastern and southern Europe, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1268">
            <primary>Middle East</primary>
          </indexterm>Middle East suffered endemic <indexterm class="endofrange" startref="b-9781474207300-IDX-262" xml:id="b-9781474207300-IDX-end21"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1046" xml:id="b-9781474207300-IDX-end116"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1480" xml:id="b-9781474207300-IDX-end157"/>violence <?page value="28"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-127">
            <primary>Armenia</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-167">
            <primary>Austro-Hungarian Empire 1, 26.</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-398">
            <primary>communism</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-654">
            <primary>France</primary>
            <secondary>mandate</secondary>
          </indexterm>throughout the early 1920s. Historians have designated these “shatter zones of empires,” as peoples there sought to rearrange and reconstitute political arrangements in the wake of the dissolution of the Russian, Austro-Hungarian, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1452">
            <primary>Ottoman Empire</primary>
          </indexterm>Ottoman empires (<link linkend="b-9781474207300-ref179" role="bib">Eichenberg and Newman 2010</link>). The Russian <indexterm class="singular" xml:id="b-9781474207300-IDX-1597">
            <primary>Russia</primary>
            <secondary>civil war</secondary>
          </indexterm>Civil War ended only in 1922 with the solidification of Communist control over what remained of the <indexterm class="singular" xml:id="b-9781474207300-IDX-636">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1600">
            <primary>Russia</primary>
            <secondary>empire</secondary>
          </indexterm>empire of the tsars, and after the loss of millions of lives. Millions more were displaced, and the rulers of the new Soviet Union would remain resentful and covetous of the newly independent states that split off from the Russian empire (<indexterm class="singular" xml:id="b-9781474207300-IDX-593">
            <primary>Finland</primary>
          </indexterm>Finland, the <indexterm class="singular" xml:id="b-9781474207300-IDX-183">
            <primary>Baltic States</primary>
          </indexterm>Baltic states, <indexterm class="singular" xml:id="b-9781474207300-IDX-1507">
            <primary>Poland</primary>
          </indexterm>Poland). The <indexterm class="singular" xml:id="b-9781474207300-IDX-182">
            <primary>Balkans</primary>
          </indexterm>Balkans had begun to shatter even before 1914, as the Ottomans lost control of <indexterm class="singular" xml:id="b-9781474207300-IDX-274">
            <primary>Bulgaria</primary>
          </indexterm>Bulgaria, <indexterm class="singular" xml:id="b-9781474207300-IDX-825">
            <primary>Greece</primary>
          </indexterm>Greece, <indexterm class="singular" xml:id="b-9781474207300-IDX-1644">
            <primary>Serbia</primary>
          </indexterm>Serbia, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1302">
            <primary>Montenegro</primary>
          </indexterm>Montenegro, and this was of course the violent nationalist ferment that ultimately brought on the Great War. Violence continued in the region well into the 1920s. This stretched into the Ottoman heartland itself as the empire collapsed after 1918, and the emergence of a new Turkish nation-state brought with it intense violence, pitched campaigns involving Turkish resistance and French, British, Armenian, and Greek forces, and population transfers between Greece and <indexterm class="singular" xml:id="b-9781474207300-IDX-1860">
            <primary>Turkey</primary>
          </indexterm>Turkey. Great Britain secured mandatory authority over <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1013">
            <primary>Iraq</primary>
          </indexterm>Iraq, <indexterm class="singular" xml:id="b-9781474207300-IDX-1843">
            <primary>Transjordan</primary>
          </indexterm>Transjordan, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1472">
            <primary>Palestine</primary>
          </indexterm>Palestine, while French mandates included <indexterm class="singular" xml:id="b-9781474207300-IDX-1769">
            <primary>Syria</primary>
          </indexterm>Syria and <indexterm class="singular" xml:id="b-9781474207300-IDX-1158">
            <primary>Lebanon</primary>
          </indexterm>Lebanon. Syria in particular saw violence during this period, with France waging a fierce counterinsurgency struggle there until 1923. This had devastating effects upon the entire social order (<link linkend="b-9781474207300-ref542" role="bib">Thompson 2000</link>). The British faced indigenous resistance in Iraq as well, which they crushed by using air power to deadly effect, and later even more serious revolts in Palestine, first of <indexterm class="singular" xml:id="b-9781474207300-IDX-121">
            <primary>Arabs</primary>
          </indexterm>Arabs in 1936 and then of <indexterm class="singular" xml:id="b-9781474207300-IDX-1061">
            <primary>Jews</primary>
          </indexterm>Jews in 1939.</para>
<para xml:id="b-9781474207300-262">Violence also marked the life of empires outside the so-called shatter zones. Notably, the British faced a serious threat to imperial control within the United Kingdom. After armed struggle including paramilitary activity and civil war, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1021">
            <primary>Irish Free State</primary>
          </indexterm>Irish Free State exited the UK in 1922, and the Republic of <indexterm class="singular" xml:id="b-9781474207300-IDX-1019">
            <primary>Ireland</primary>
          </indexterm>Ireland emerged in 1937. France faced violent <indexterm class="singular" xml:id="b-9781474207300-IDX-2083">
            <primary>Yên Bái Revolt</primary>
          </indexterm>revolt against imperial control as well during this period. In 1928, rural people in <indexterm class="singular" xml:id="b-9781474207300-IDX-674">
            <primary>French Equatorial Africa</primary>
          </indexterm>French Equatorial Africa and French <indexterm class="singular" xml:id="b-9781474207300-IDX-294">
            <primary>Cameroon</primary>
          </indexterm>Cameroon (mandated to France from <indexterm class="singular" xml:id="b-9781474207300-IDX-716">
            <primary>Germany</primary>
          </indexterm>Germany after the First World War) rebelled in the face of forced labor and abusive exploitation by colonial administrators and private concessionary companies. Although the revolt made little impression on the French public at the time, colonial and military authorities repressed the violence only with great difficulty in 1931. During the same period, the French colonial state faced revolt on the other side of the world. In 1930, at Yen Bay in French <indexterm class="singular" xml:id="b-9781474207300-IDX-963">
            <primary>Indochina</primary>
          </indexterm>Indochina, indigenous soldiers under French command mutinied. The violence spread quickly, and for a little over a year French authorities faced persistent violence coordinated by organized and ideologically driven nationalist and communist militants. French colonial control survived, but that the cost of empire was constant resort to violence was increasingly clear (<link linkend="b-9781474207300-ref537" role="bib">Thomas 2005</link>).</para>
<para xml:id="b-9781474207300-263">War in the context of Western empires in the 1920s and 1930s often combined traditional police actions and “pacification” in the face of <indexterm class="endofrange" startref="b-9781474207300-IDX-767" xml:id="b-9781474207300-IDX-end74"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1707" xml:id="b-9781474207300-IDX-end179"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2051" xml:id="b-9781474207300-IDX-end222"/>indigenous <?page value="29"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-809">
            <primary>Great Britain</primary>
            <secondary>military</secondary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1720">
            <primary>Spain</primary>
            <secondary>military</secondary>
          </indexterm>resistance, which had been common for over a century, with approaches more characteristic of large-scale, formal, conventional warfare. As early as 1920, for example, Winston <indexterm class="singular" xml:id="b-9781474207300-IDX-357">
            <primary>Churchill, Winston</primary>
          </indexterm>Churchill directed British forces in Iraq to use air power extensively and with devastating effect to put down resistance to the imposition of mandatory control (<link linkend="b-9781474207300-ref219" role="bib">Fromkin 1989</link>). One of the largest conflicts of the interwar period took place in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1306">
            <primary>Morocco</primary>
          </indexterm>Morocco. In 1920, Spanish forces sought to expand <emphasis role="italic">de facto</emphasis> control in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1578">
            <primary>Rif Region</primary>
          </indexterm>Rif region, over which they had <emphasis role="italic">de jure</emphasis> authority but little real power. The mountainous area had always been recalcitrant to imperial authority, and its <indexterm class="singular" xml:id="b-9781474207300-IDX-217">
            <primary>Berber peoples</primary>
          </indexterm>Berber peoples had mounted fierce resistance to both Spanish and French incursions. In 1921, Riffian forces under the command of Abd <indexterm class="singular" xml:id="b-9781474207300-IDX-533">
            <primary>el-Krim, Abd</primary>
          </indexterm>el-Krim inflicted a humiliating and crushing defeat on the Spanish in the <indexterm class="singular" xml:id="b-9781474207300-IDX-200">
            <primary>Battle of Annual</primary>
          </indexterm>Battle of Annual, killing some 8,000 Spanish soldiers, following up the victory with further advances over the next several years. Emboldened, Abd el-Krim’s forces attacked the French zone of control as well in 1925, inflicting serious casualties.</para>
<para xml:id="b-9781474207300-264">France and <indexterm class="singular" xml:id="b-9781474207300-IDX-1717">
            <primary>Spain</primary>
          </indexterm>Spain joined forces to secure control over their respective possessions in Morocco, and by the middle of 1926 the Europeans had prevailed. The conflict marked an important development in colonial warfare. The “disciplinary columns” and “<indexterm class="singular" xml:id="b-9781474207300-IDX-1463">
            <primary>pacification</primary>
          </indexterm>pacification” through the deployment of light infantry that had characterized Europeans’ approach to security in their <indexterm class="endofrange" startref="b-9781474207300-IDX-608" xml:id="b-9781474207300-IDX-end53"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1013" xml:id="b-9781474207300-IDX-end110"/>empires <anchor role="objectPointer" xml:id="b-9781474207300-figure1_1"/>
          <?page value="30"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure1_2"/>now yielded to the deployment of the full weight of mass assaults using the latest military technology. General Hubert <indexterm class="singular" xml:id="b-9781474207300-IDX-1183">
            <primary>Lyautey, Hubert</primary>
          </indexterm>Lyautey, the archetype of the soldier-administrator who sought to impose colonial control through civilizing efforts and political cooperation, now stood aside as Marshal Philippe <indexterm class="singular" xml:id="b-9781474207300-IDX-1499">
            <primary>Pétain, Philippe</primary>
          </indexterm>Pétain, hero of the Western Front, made use of air power, artillery, and large numbers of infantry to end a revolt led largely by irregular guerilla forces (<link linkend="b-9781474207300-ref537" role="bib">Thomas 2005</link>: 212–13). Spanish forces used chemical weapons, often dropped from airplanes and often targeting civilians (<link linkend="b-9781474207300-ref39" role="bib">Balfour 2002</link>). Spanish and French forces numbered nearly a quarter of a million troops, outnumbering the Riffians over two to one. In the climactic battle in May 1925, European forces outnumbered Abd el-Krim’s forces ten to one, and included overwhelming air power (<link linkend="b-9781474207300-ref452" role="bib">Pennell 1986</link>). Henceforth, Western empires showed themselves more willing to deploy the techniques and technologies they had developed to wage modern, industrialized <indexterm class="singular" xml:id="b-9781474207300-IDX-2003">
            <primary>war</primary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2052">
            <primary>World War I</primary>
          </indexterm>war against each other in Europe.</para>
<figure label="1.1" xlink:href="b-9781474207300-figure1_1" xlink:role="objectPointer" xml:id="b-9781474207300-fig1_1">
<info xml:id="b-9781474207300-265">
<title xml:id="b-9781474207300-266">A Berber fighter during the 1924–5 Rif War. Credit: ullstein bild via Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-267">
<imageobject xml:id="b-9781474207300-268">
<imagedata align="center" fileref="images/fig1_1.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<figure label="1.2" xlink:href="b-9781474207300-figure1_2" xlink:role="objectPointer" xml:id="b-9781474207300-fig1_2">
<info xml:id="b-9781474207300-270">
<title xml:id="b-9781474207300-271">The Rif War against France and Spain. A French military airfield at Fez, June 1925.</title>
</info>
<mediaobject xml:id="b-9781474207300-272">
<imageobject xml:id="b-9781474207300-273">
<imagedata align="center" fileref="images/fig1_2.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-275">Colonial war also began to have important effects on events in Europe. Morocco was a “nursery of reaction” for Spanish officers, who could have freer rein and gain promotion more quickly on colonial service, and it was these <emphasis role="italic">africanistas</emphasis> who began the Nationalist rebellion against the <indexterm class="singular" xml:id="b-9781474207300-IDX-1723">
            <primary>Spanish Republic</primary>
          </indexterm>Spanish Republic in 1936. Francisco <indexterm class="singular" xml:id="b-9781474207300-IDX-663">
            <primary>Franco, Francisco</primary>
          </indexterm>Franco’s <indexterm class="singular" xml:id="b-9781474207300-IDX-1722">
            <primary>Spain</primary>
            <secondary>nationalist forces</secondary>
          </indexterm>Nationalist forces during the Spanish <indexterm class="singular" xml:id="b-9781474207300-IDX-1719">
            <primary>Spain</primary>
            <secondary>civil war</secondary>
          </indexterm>Civil War included important contingents of native Moroccan troops, or “moors,” <indexterm class="endofrange" startref="b-9781474207300-IDX-1306" xml:id="b-9781474207300-IDX-end138"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1578" xml:id="b-9781474207300-IDX-end166"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1720" xml:id="b-9781474207300-IDX-end181"/>and <?page value="31"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-5007a">
            <primary>World War II</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-586">
            <primary>fascism</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-655">
            <primary>France</primary>
            <secondary>mandate</secondary>
          </indexterm>the colonial context of this harbinger of the Second World War is critical (<link linkend="b-9781474207300-ref336" role="bib">Kiernan 1998</link>: 204–5). <indexterm class="singular" xml:id="b-9781474207300-IDX-1324">
            <primary>Mussolini, Benito</primary>
          </indexterm>Mussolini’s Fascist <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1031">
            <primary>Italy</primary>
          </indexterm>Italy was an important player during the Spanish Civil War, but the Italians had earlier launched another armed conflict in <indexterm class="singular" xml:id="b-9781474207300-IDX-546">
            <primary>Ethiopia</primary>
          </indexterm>Ethiopia that had clear implications both for colonial warfare and for the coming violence of the Second World War. Mussolini had already completed the conquest of <indexterm class="singular" xml:id="b-9781474207300-IDX-1172">
            <primary>Libya</primary>
          </indexterm>Libya, begun before the First World War, with a decade of extremely violent repression, including the use of air power and bombing, chemical weapons, concentration camps, and deportations. Just after Libya was thus “pacified,” in the words of its governor Marshal Pietro <indexterm class="singular" xml:id="b-9781474207300-IDX-174">
            <primary>Badoglio, Pietro</primary>
          </indexterm>Badoglio, in 1932, Mussolini turned his attention to the conquest of Ethiopia (<link linkend="b-9781474207300-ref16" role="bib">Aldrich 2007</link>: 271). One of the very last territories in Africa not yet colonized by Europeans, Ethiopia had earned its independence by humiliating an earlier attempt at Italian conquest at the <indexterm class="singular" xml:id="b-9781474207300-IDX-199">
            <primary>Battle of Adwa</primary>
          </indexterm>Battle of Adwa in 1896. In October 1935, after three years of preparation, Mussolini’s forces invaded. Making particularly effective use of air power and chemical weapons, the Italians added Ethiopia to their colonial empire seven months later. The war demonstrated the ineffectiveness of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1152">
            <primary>League of Nations</primary>
          </indexterm>League of Nations to regulate international relations in a world of empires and imperial expansion, and contributed to the breakdown of diplomacy that helped bring on the Second World War.</para>
<para xml:id="b-9781474207300-276">Large-scale violence, whether in pursuit of colonial conquest or the maintenance of colonial order, was thus common in the history of Western empires between the world wars. Yet the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1993">
            <primary>violence</primary>
            <secondary>structural</secondary>
          </indexterm>structural violence of everyday colonialism was also prevalent and shaped the cultures of empires both in the colonies and the metropoles. For instance, Italian efforts to “pacify” Libya focused on the cultural suppression of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1643">
            <primary>Senussi Sufi Order</primary>
          </indexterm>Senussi Sufi order through arrests, confiscation of property, and closure of religious schools. After resistance ended, Italian policy encouraged European settlement and the expropriation and development of Libyan land. The same was true in Ethiopia, and the destruction and transformation of physical environments, the rending of social fabric, the disruption of economic life, and the suppression of indigenous culture accompanied overt and often extreme physical violence (<link linkend="b-9781474207300-ref60" role="bib">Ben-Ghiat and Fuller 2005</link>).</para>
<para xml:id="b-9781474207300-277">The case of <indexterm class="singular" xml:id="b-9781474207300-IDX-1770">
            <primary>Syria</primary>
          </indexterm>Syria under French mandatory rule is another good example of the multiple levels on which colonial violence operated during this period. Advocates of France’s expansion in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1269">
            <primary>Middle East</primary>
          </indexterm>Middle East hoped for a peaceful transition to French control in Syria, but the recently enthroned King <indexterm class="singular" xml:id="b-9781474207300-IDX-572">
            <primary>Faisal, King</primary>
          </indexterm>Faisal contested the new mandatory authority. French forces won the conventional <indexterm class="singular" xml:id="b-9781474207300-IDX-656">
            <primary>France</primary>
            <secondary>military</secondary>
          </indexterm>military conflict decisively at a pitched battle at <indexterm class="singular" xml:id="b-9781474207300-IDX-1252">
            <primary>Maysalun</primary>
          </indexterm>Maysalun in July 1920, but less-organized resistance persisted (<link linkend="b-9781474207300-ref24" role="bib">Andrew and Kanya Forstner 1981</link>). Thereafter, until French control ended in 1946, colonial authorities resorted constantly to violence and coercion to maintain order. Military and police action on the ground and from the air was common, but structural coercion played an important role as well. Urban planning and political initiatives aimed at <?page value="32"?>undermining resistance, and cultural initiatives in <indexterm class="singular" xml:id="b-9781474207300-IDX-518">
            <primary>education</primary>
          </indexterm>education, language, art, propaganda, and <indexterm class="singular" xml:id="b-9781474207300-IDX-2086">
            <primary>youth movements</primary>
          </indexterm>youth movements also sought to strengthen <indexterm class="singular" xml:id="b-9781474207300-IDX-677">
            <primary>French West Africa</primary>
          </indexterm>French political control (<link linkend="b-9781474207300-ref176" role="bib">Dueck 2010</link>; <link linkend="b-9781474207300-ref425" role="bib">Neep 2012</link>).</para>
<para xml:id="b-9781474207300-278">In fact, though Republican <indexterm class="startofrange" xml:id="b-9781474207300-IDX-609">
            <primary>France</primary>
          </indexterm>France and Fascist Italy had little in common politically at home, their renewed and vigorous attempts to make <indexterm class="singular" xml:id="b-9781474207300-IDX-1521">
            <primary>Portugal</primary>
            <secondary>empire</secondary>
          </indexterm>empire “stick” or “pay,” to solidify the bases of colonial control, economic exploitation, and imperial power, were similar. And their attempts to do so via overt <indexterm class="singular" xml:id="b-9781474207300-IDX-1530">
            <primary>Portugal</primary>
            <secondary>military</secondary>
          </indexterm>military means and the subtler social and cultural displacement of a mission to civilize (civilizing and disciplining the peoples and the lands) were typical of Western empires in general during this period. For instance, in <indexterm class="singular" xml:id="b-9781474207300-IDX-209">
            <primary>Belgium</primary>
          </indexterm>Belgium and its lone, though huge, imperial possession of the <indexterm class="singular" xml:id="b-9781474207300-IDX-413">
            <primary>Congo</primary>
          </indexterm>Congo, the years after the First World War saw the <indexterm class="singular" xml:id="b-9781474207300-IDX-20">
            <primary>Africa</primary>
            <secondary>development</secondary>
          </indexterm>development of a more conscious empire-building and imperialist identity, as well as a renewed commitment to exploiting the resources of the region more effectively (<link linkend="b-9781474207300-ref16" role="bib">Aldrich 2007</link>: 233–5; <link linkend="b-9781474207300-ref309" role="bib">Jarboe and Fogarty 2014</link>: 23–48). Though the violence of Belgian control over the Congo under the personal rule of <indexterm class="singular" xml:id="b-9781474207300-IDX-1164">
            <primary>Leopold II of Belgium</primary>
          </indexterm>Leopold II is justly notorious, violence continued to be the salient feature of imperial control for many Congolese. The same was true in Portuguese Africa. The conditions of the Great War in Africa for both Portuguese soldiers and native Africans were appalling, largely through official ambition and incompetence, and the postwar period saw continued suffering (<link linkend="b-9781474207300-ref230" role="bib">Gerwarth and Manela 2014b</link>: 179–96). Efforts to exploit colonial resources intensified—all with absolute minimum cost to the metropole since that was official policy under the dictator <indexterm class="singular" xml:id="b-9781474207300-IDX-1615">
            <primary>Salazar</primary>
          </indexterm>Salazar—which included stricter arbitrary legal control, <indexterm class="singular" xml:id="b-9781474207300-IDX-1124">
            <primary>Labor</primary>
            <secondary>forced</secondary>
          </indexterm>forced labor, and population relocation. In the end, the colonial framework was “authoritarian and increasingly coercive” and “seems to have been more violent and oppressive than that of neighboring colonial regimes” (<link linkend="b-9781474207300-ref16" role="bib">Aldrich 2007</link>: 89). At the same time, the government more zealously promoted the cultural, civilizational mission of <indexterm class="singular" xml:id="b-9781474207300-IDX-1516">
            <primary>Portugal</primary>
          </indexterm>Portugal in Africa as a point of patriotic pride and domestic political unity.</para>
<para xml:id="b-9781474207300-279">Thus, an intensified commitment to colonial exploitation in many Western empires after the First World War meant that colonial subjects of these empires suffered an intensified level of structural violence. Developments such as the renewed French commitment to <emphasis role="italic">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-1289">
              <primary>
                <emphasis role="italic">mise en valeur</emphasis>
              </primary>
            </indexterm>mise en valeur</emphasis> (rational economic exploitation) and increased resort to measures such as forced labor in West Africa may appear as less the story of “war and empire” than does the military conquest of the territory during the late nineteenth century (<link linkend="b-9781474207300-ref140" role="bib">Conklin 1997</link>). But for colonial subjects living through what <indexterm class="singular" xml:id="b-9781474207300-IDX-577">
            <primary>Fanon, Frantz</primary>
          </indexterm>Fanon called “violence in its natural state,” this constant presence of physical force and coercion rendered larger spasms of violence, whether suppression of anticolonial resistance or participation in the world wars, more as intensifications of the status quo than as real deviations from the norm.</para>
<para xml:id="b-9781474207300-280">Fanon was not the only figure who recognized the centrality of violence to the essence of colonialism. Mahatma <indexterm class="singular" xml:id="b-9781474207300-IDX-704">
            <primary>Gandhi, Mahatma</primary>
          </indexterm>Gandhi did as well, though he came <indexterm class="endofrange" startref="b-9781474207300-IDX-1031" xml:id="b-9781474207300-IDX-end112"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1993" xml:id="b-9781474207300-IDX-end212"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2052" xml:id="b-9781474207300-IDX-end223"/>to <?page value="33"?>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-5006">
            <primary>World War II</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-729">
            <primary>Germany</primary>
            <secondary>military</secondary>
          </indexterm>very different conclusions about the form anticolonial <indexterm class="singular" xml:id="b-9781474207300-IDX-1575">
            <primary>resistance, non-violent</primary>
          </indexterm>resistance should take. Gandhi understood <indexterm class="singular" xml:id="b-9781474207300-IDX-266">
            <primary>British India</primary>
          </indexterm>British rule of India as a sort of war, an everyday violence perpetrated upon colonial subjects, and he understood too that the colonized needed to win back their self-esteem in order to free themselves and to constitute a new society and nation. But the strategy he used was non-violent resistance. Gandhi urged a non-violent response even to the appalling massacre at <indexterm class="singular" xml:id="b-9781474207300-IDX-1039">
            <primary>Jallianwala Bagh</primary>
          </indexterm>Jallianwala Bagh in 1919, but the incident was instrumental in convincing him definitively that British control over India had to end and that Indians had to achieve <emphasis role="italic">swaraj</emphasis>, or self-rule (<link linkend="b-9781474207300-ref320" role="bib">Judd 1996</link>: 258–72). Thus, violence in its multifarious forms was never far away from the most important and decisive events in the history of Western empires during the interwar period.</para>
</section>
<section xml:id="b-9781474207300-281">
<info xml:id="b-9781474207300-282">
<title xml:id="b-9781474207300-283">From Global War to “Dirty Wars,” 1939–75</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-284">On May 8, 1945, German forces surrendered unconditionally to the Allies, ending the Second World War in Europe. Globally, the war had been one in which empires were implicated in every imaginable way. The Western empires of the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1901">
            <primary>United States</primary>
          </indexterm>United States, <indexterm class="startofrange" xml:id="b-9781474207300-IDX-768">
            <primary>Great Britain</primary>
          </indexterm>Great Britain, France, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1363">
            <primary>Netherlands</primary>
          </indexterm>Netherlands struggled with imperial <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1047">
            <primary>Japan</primary>
          </indexterm>Japan for control of territories in Asia and the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1459">
            <primary>Pacific Ocean</primary>
          </indexterm>Pacific. The <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1340">
            <primary>Nazis</primary>
          </indexterm>Nazi <indexterm class="singular" xml:id="b-9781474207300-IDX-1714">
            <primary>Soviet Union</primary>
            <secondary>empire</secondary>
          </indexterm>empire, built in a relatively brief spasm of violent expansion, clashed titanically with the Soviet empire, as well as with the United States and the imperial powers of western Europe. All of these imperial powers mobilized the human and material resources of their global empires on an unprecedented scale, waging total conventional war. But May 8 also witnessed an event that suggested that other forms of colonial violence and war still had a central place in Western empires. During a parade in the Algerian town of <indexterm class="singular" xml:id="b-9781474207300-IDX-71">
            <primary>Algeria</primary>
            <secondary>Sétif</secondary>
          </indexterm>Sétif celebrating the end of the war, French police intervened forcefully when native Algerians displayed anticolonial banners and called loudly for independence. Rioting ensued, and several people on both sides of the dispute were shot. Over the next several days, Algerians massacred more than 100 European settlers with extreme brutality, torturing and mutilating their victims. The French response was no less brutal, as troops moved in to restore order. Police actions by regular soldiers, vigilante attacks by settlers, and even air raids by French aircraft and shelling from a French battleship caused mass and indiscriminate casualties. The French army put the number of men, women, and children killed at 10,000 to 15,000, while Algerians and their sympathizers claimed up to three times this figure (<link linkend="b-9781474207300-ref130" role="bib">Clayton 1992</link>; <link linkend="b-9781474207300-ref453" role="bib">Planche 2006</link>). Clearly, even an imperial state such as France, exhausted and divided and traumatized by its own suffering in the cataclysm of the Second World War, was still willing and able to deploy overwhelming force in defense of the integrity of its empire.</para>
<para xml:id="b-9781474207300-285">In many ways, the roughly four decades that spanned the Second World War through the bulk of the process known as decolonization was one during which <?page value="34"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-657">
            <primary>France</primary>
            <secondary>military</secondary>
          </indexterm>overtly militarized violence eclipsed the subtler forms of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1994">
            <primary>violence</primary>
            <secondary>structural</secondary>
          </indexterm>structural colonial violence. Yet these latter forms never disappeared, of course, and in fact the “dirty wars” of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-465">
            <primary>decolonization</primary>
          </indexterm>decolonization—so called because they were often more diffuse, seemingly more confusing, and more asymmetrical than many of the most salient aspects of the total global <indexterm class="startofrange" xml:id="b-9781474207300-IDX-732">
            <primary>Germany</primary>
            <secondary>war</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2004">
            <primary>war</primary>
          </indexterm>war that began the period—can appear as conspicuous blends of conventional warfare and the insidious and entrenched forms of fear, contempt, hate, and violence that characterize colonial situations. It is important not to overdraw the distinctions between colonial and conventional war during this period. The Second <indexterm class="singular" xml:id="b-9781474207300-IDX-2053">
            <primary>World War I</primary>
          </indexterm>World War was a war of empires and colonial empires figured importantly in its history, and it is hard to imagine wars dirtier than, say, the racial, internecine, and partisan wars on the Eastern Front, or the Nazis’ war against the <indexterm class="singular" xml:id="b-9781474207300-IDX-1062">
            <primary>Jews</primary>
          </indexterm>Jews, the exterminatory impetus of which was cultural and racial. And the wars of decolonization often featured uniformed soldiers, pitched battles, and many of the other accoutrements of conventional warfare. In the end, analysis of the history of war and <indexterm class="singular" xml:id="b-9781474207300-IDX-792">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>empire in this period must maintain the dual focus—on war as conventionally understood and on structural violence—that is so necessary to understanding the role of war and violence in earlier colonial contexts.</para>
<para xml:id="b-9781474207300-286">Yet the period did indeed begin with a conventional conflict waged largely by uniformed militaries, supported by high technology and machines, over vast battlefields on land, on water, and in the air. Residents of the belligerents’ colonies participated extensively, much as they had done in the Great War. The British Empire’s white <indexterm class="singular" xml:id="b-9781474207300-IDX-496">
            <primary>dominions</primary>
          </indexterm>Dominions provided several million troops for the war effort, as did <indexterm class="singular" xml:id="b-9781474207300-IDX-919">
            <primary>India</primary>
          </indexterm>India and the African colonies (<link linkend="b-9781474207300-ref338" role="bib">Killingray 2010</link>). <indexterm class="singular" xml:id="b-9781474207300-IDX-678">
            <primary>French West Africa</primary>
          </indexterm>French forces in 1940 included a large proportion of colonial subjects in uniform, and sixty percent of the <indexterm class="singular" xml:id="b-9781474207300-IDX-665">
            <primary>Free France</primary>
          </indexterm>Free French forces that helped liberate the metropole at the end of the war was made up of soldiers from North and <indexterm class="singular" xml:id="b-9781474207300-IDX-1747">
            <primary>Sub-Saharan Africa</primary>
          </indexterm>sub-Saharan Africa (<link linkend="b-9781474207300-ref584" role="bib">Wieviorka 2010</link>; <link linkend="b-9781474207300-ref313" role="bib">Jennings 2015</link>). The territories of the Western empires became battlefields as well, with troops from the colonies and from <indexterm class="singular" xml:id="b-9781474207300-IDX-551">
            <primary>Europe</primary>
          </indexterm>Europe fighting in places such as <indexterm class="singular" xml:id="b-9781474207300-IDX-1406">
            <primary>North Africa</primary>
          </indexterm>North Africa (from <indexterm class="singular" xml:id="b-9781474207300-IDX-1307">
            <primary>Morocco</primary>
          </indexterm>Morocco to <indexterm class="singular" xml:id="b-9781474207300-IDX-521">
            <primary>Egypt</primary>
          </indexterm>Egypt), <indexterm class="singular" xml:id="b-9781474207300-IDX-506">
            <primary>East Africa</primary>
          </indexterm>East Africa, West Africa, <indexterm class="singular" xml:id="b-9781474207300-IDX-1014">
            <primary>Iraq</primary>
          </indexterm>Iraq, <indexterm class="singular" xml:id="b-9781474207300-IDX-1771">
            <primary>Syria</primary>
          </indexterm>Syria and <indexterm class="singular" xml:id="b-9781474207300-IDX-1159">
            <primary>Lebanon</primary>
          </indexterm>Lebanon, <indexterm class="singular" xml:id="b-9781474207300-IDX-1007">
            <primary>Iran</primary>
          </indexterm>Iran, <indexterm class="singular" xml:id="b-9781474207300-IDX-276">
            <primary>Burma</primary>
          </indexterm>Burma, <indexterm class="singular" xml:id="b-9781474207300-IDX-1204">
            <primary>Malaya</primary>
          </indexterm>Malaya, <indexterm class="singular" xml:id="b-9781474207300-IDX-1662">
            <primary>Singapore</primary>
          </indexterm>Singapore, <indexterm class="singular" xml:id="b-9781474207300-IDX-1195">
            <primary>Madagascar</primary>
          </indexterm>Madagascar, and throughout the Pacific and <indexterm class="singular" xml:id="b-9781474207300-IDX-956">
            <primary>Indian Ocean</primary>
          </indexterm>Indian Oceans. The navies and air forces that were so critical to acquiring and maintaining the empires of the West ranged the whole globe, and made this second worldwide conflagration a “world” war and a war of empires even more fully and explicitly than the Great War.</para>
<para xml:id="b-9781474207300-287">Another way in which the Second World War marked an intensification of the imperial characteristics that marked the First was the full emergence of the United States, the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1708">
            <primary>Soviet Union</primary>
          </indexterm>Soviet Union, Germany, and Japan as the empires that would dictate the shape of the war and, eventually, of the postwar world. Great Britain and France remained the two largest Western overseas empires in terms of formal territory and foreign populations directly controlled and ruled, but the four newer players would determine among themselves what role empire <indexterm class="endofrange" startref="b-9781474207300-IDX-609" xml:id="b-9781474207300-IDX-end54"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-768" xml:id="b-9781474207300-IDX-end75"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1459" xml:id="b-9781474207300-IDX-end154"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1901" xml:id="b-9781474207300-IDX-end196"/>would <?page value="35"?>play after 1945. One signal of this new reality is that one can argue that the Second World War did not really begin in <indexterm class="singular" xml:id="b-9781474207300-IDX-552">
            <primary>Europe</primary>
          </indexterm>Europe. Although <indexterm class="singular" xml:id="b-9781474207300-IDX-869">
            <primary>Hitler, Adolph</primary>
          </indexterm>Hitler’s aggression in Europe transformed the conflict into a truly global war, Japan’s aggression in <indexterm class="singular" xml:id="b-9781474207300-IDX-132">
            <primary>Asia</primary>
          </indexterm>Asia brought the rising imperial power into conflict with the United States’ imperial interests in the Pacific region, as well as the interests of Great Britain, France, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1364">
            <primary>Netherlands</primary>
          </indexterm>Netherlands, all of whom maintained large colonies in Asia and the Pacific. Long before the bombing of <indexterm class="singular" xml:id="b-9781474207300-IDX-1488">
            <primary>Pearl Harbor</primary>
          </indexterm>Pearl Harbor in 1941 brought the United States and Japan into open conflict, tensions had been building, and the region was embroiled in armed conflict since at least 1937, when Japan invaded <indexterm class="singular" xml:id="b-9781474207300-IDX-343">
            <primary>China</primary>
          </indexterm>China. Japan’s actions throughout the period aimed explicitly at building a colonial <indexterm class="startofrange" xml:id="b-9781474207300-IDX-725">
            <primary>Germany</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1601">
            <primary>Russia</primary>
            <secondary>empire</secondary>
          </indexterm>empire, complete with racially based hierarchies, and the war with the US was a “race war” that bore many of the classic hallmarks of earlier colonial wars (<link linkend="b-9781474207300-ref171" role="bib">Dower 1986</link>). The Unites States prevailed in this struggle, and that victory would set the stage for the emergence of the nation as a global imperial power and, by the end of the twentieth century, a global hegemon.</para>
<para xml:id="b-9781474207300-288">The other imperial power to emerge, despite immense sacrifice during the war, in a strengthened geopolitical position was the Soviet Union. Not only had the USSR by the early stages of the war (before the Nazi invasion of 1941) reconstituted much if not all of the Russian empire of the tsars, but eventual victory over Germany, which brought with it dominance in eastern Europe, and a share in the victory over Japan meant that the Soviet Union could act as a serious rival with the United States for colonial control and global influence (<link linkend="b-9781474207300-ref266" role="bib">Hasegawa 2006</link>). These two powers and their rivalry would decisively shape life even in territories they did not control, the processes of decolonization, and the postcolonial world.</para>
<para xml:id="b-9781474207300-289">Japan and Germany did not have the opportunity to shape the postwar world in the same ways, since both empires were of relatively short lifespan and came to shattering ends in defeat in 1945. Japan was not technically a “Western” empire, but the influence of western models of development, politics, economy, and imperial control were important in the whole enterprise from the late nineteenth century onwards (<link linkend="b-9781474207300-ref422" role="bib">Myers and Peattie 1984</link>). And though there is debate about how much Japanese colonial practices differed from those of other contemporaneous empires, many practices of economic exploitation, racial <indexterm class="singular" xml:id="b-9781474207300-IDX-864">
            <primary>hierarchy</primary>
          </indexterm>hierarchy and discrimination, and structural violence meant that the experiences of Japanese colonial subjects were very similar to those living under other colonial regimes (<link linkend="b-9781474207300-ref551" role="bib">Uchida 2011</link>; <link linkend="b-9781474207300-ref74" role="bib">Booth and Deng 2016</link>). And in fact, the conditions of total global war only enlarged and intensified the presence of violence in everyday life. But nowhere in the history of modern empire did violence have a larger and more intense presence than in the German empire of the Second World War. In the 1950s, anticolonial writer Aimé <indexterm class="singular" xml:id="b-9781474207300-IDX-328">
            <primary>Césaire, Aimé</primary>
          </indexterm>Césaire and political theorist Hannah <indexterm class="singular" xml:id="b-9781474207300-IDX-123">
            <primary>Arendt, Hannah</primary>
          </indexterm>Arendt both identified Nazi <indexterm class="singular" xml:id="b-9781474207300-IDX-1347">
            <primary>Nazis</primary>
            <secondary>expansionism</secondary>
          </indexterm>expansionism as consistent with—and even an extension of—European <indexterm class="singular" xml:id="b-9781474207300-IDX-914">
            <primary>imperialism</primary>
          </indexterm>imperialism and colonialism of <indexterm class="endofrange" startref="b-9781474207300-IDX-465" xml:id="b-9781474207300-IDX-end37"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-732" xml:id="b-9781474207300-IDX-end67"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1047" xml:id="b-9781474207300-IDX-end117"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1340" xml:id="b-9781474207300-IDX-end139"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1708" xml:id="b-9781474207300-IDX-end180"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1994" xml:id="b-9781474207300-IDX-end213"/>the <?page value="36"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1630">
            <primary>Schutzstaffel, SS</primary>
          </indexterm>nineteenth and twentieth centuries (<link linkend="b-9781474207300-ref108" role="bib">Césaire 2000 [1950]</link>; <link linkend="b-9781474207300-ref26" role="bib">Arendt 1968 [1951]</link>). More recently, Mark <indexterm class="singular" xml:id="b-9781474207300-IDX-1253">
            <primary>Mazower, Mark</primary>
          </indexterm>Mazower has noted that the Nazi <indexterm class="singular" xml:id="b-9781474207300-IDX-637">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-793">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1346">
            <primary>Nazis</primary>
            <secondary>empire</secondary>
          </indexterm>empire and the waging of war were synonymous, and that they reflected “the modern European will to power” that built the West’s global empires. Yet though Germans under Hitler’s regime were “heirs to this tradition,” they took the unprecedented steps of trying to build their empire in Europe itself and to do it at a radically accelerated pace over just a few years (<link linkend="b-9781474207300-ref400" role="bib">Mazower 2008</link>: xxxix). This helps explain the extreme violence and destructiveness of Nazi empire-building and colonial rule, even as many elements were squarely within the broad conventions of western expansionism.</para>
<para xml:id="b-9781474207300-290">One of the Nazis’ spectacular failures as colonial rulers was their inability, largely because of inflexible and extreme <indexterm class="singular" xml:id="b-9781474207300-IDX-1556">
            <primary>racism</primary>
          </indexterm>racism, to recruit or coopt the helpers from among the conquered and colonized on which Western empires traditionally depended. Illustrative of this failure were efforts to enlist the help of the <indexterm class="singular" xml:id="b-9781474207300-IDX-2054">
            <primary>World War I</primary>
          </indexterm>world’s <indexterm class="singular" xml:id="b-9781474207300-IDX-1321">
            <primary>Muslims</primary>
          </indexterm>Muslims as soldiers to build and defend Hitler’s <indexterm class="singular" xml:id="b-9781474207300-IDX-1351">
            <primary>Nazis</primary>
            <secondary>New Order</secondary>
          </indexterm>New Order. <indexterm class="singular" xml:id="b-9781474207300-IDX-2022">
            <primary>Wilhelm II</primary>
          </indexterm>Wilhelm II’s war effort during the Great War had also included a concerted attempt to raise the Muslim world against the other colonial powers of the West (Germany’s enemies <indexterm class="startofrange" xml:id="b-9781474207300-IDX-769">
            <primary>Great Britain</primary>
          </indexterm>Great Britain, <indexterm class="singular" xml:id="b-9781474207300-IDX-610">
            <primary>France</primary>
          </indexterm>France, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1594">
            <primary>Russia</primary>
          </indexterm>Russia ruled over millions of Muslim subjects) and recruit them for an anticolonial “jihad” (<link linkend="b-9781474207300-ref403" role="bib">McMeekin 2010</link>; <link linkend="b-9781474207300-ref309" role="bib">Jarboe and Fogarty 2014</link>: 136–58). This campaign seemed logical to its advocates because Europe’s colonial powers had all long sought to instrumentalize <indexterm class="singular" xml:id="b-9781474207300-IDX-1026">
            <primary>Islam</primary>
          </indexterm>Islam for their own purposes, and to recruit Muslims to serve imperial political and military interests. The Nazis followed in this tradition and they recruited several hundred thousand Muslims to serve in the <indexterm class="singular" xml:id="b-9781474207300-IDX-2010">
            <primary>Wehrmacht</primary>
          </indexterm>Wehrmacht and SS, but their efforts ultimately foundered on the same essentialist stereotypes of Islam and Muslims that plagued earlier efforts, in addition to the Nazis’ chaotic prosecution of the war effort and their rigid adherence to racist policies. In the end, as elsewhere in Hitler’s New Order, colonial subjects might have the opportunity to serve their masters’ interests, but the ruled would never share even a little bit in the status and privileges of the rulers (<link linkend="b-9781474207300-ref415" role="bib">Motadel 2014</link>). This flexibility existed, even if often severely circumscribed, in other Western overseas empires, and gave some suppleness and longevity to, for instance, France’s and Great Britain’s empires.</para>
<para xml:id="b-9781474207300-291">The spectacular militarized violence of the Second World War should not obscure the continued importance of structural violence in imperial situations during the same period and after. The everyday violence of Germany’s empire was grotesque in its extremity, and there is a limit to how much the term “structural” illuminates policies of <indexterm class="singular" xml:id="b-9781474207300-IDX-1352">
            <primary>Nazis</primary>
            <secondary>racial policy</secondary>
          </indexterm>racial extermination, intentional starvation, brutal and indiscriminate reprisals, mass killing, and the abjectly murderous conditions of POW, concentration, and death camps. Yet, as with so many aspects of Hitler’s empire, only the scale and depth of depravity was unprecedented, and Western empires had already inflicted most of these <indexterm class="endofrange" startref="b-9781474207300-IDX-725" xml:id="b-9781474207300-IDX-end66"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-5006" xml:id="b-9781474207300-IDX-end5006"/>types <?page value="37"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-810">
            <primary>Great Britain</primary>
            <secondary>military</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1048">
            <primary>Japan</primary>
          </indexterm>of violence on peoples outside Europe. After the war ended, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1995">
            <primary>violence</primary>
            <secondary>structural</secondary>
          </indexterm>structural violence of the Western empires that remained would continue in the form of discrimination, arbitrary arrest, abuse, excessive police force, restrictions on movement and other freedoms, differential legal regimes and punishments—the whole panoply of colonial control. These would intensify under the pressures of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-466">
            <primary>decolonization</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-940">
            <primary>India</primary>
            <secondary>decolonization</secondary>
          </indexterm>decolonization, and mix with more lurid forms of militarized violence such as that witnessed at <indexterm class="singular" xml:id="b-9781474207300-IDX-72">
            <primary>Algeria</primary>
            <secondary>Sétif</secondary>
          </indexterm>Sétif in Algeria in May 1945. Yet decolonization would develop and continue apace, beginning immediately after the end of the war. Western metropoles were exhausted from the war, Soviet <indexterm class="singular" xml:id="b-9781474207300-IDX-399">
            <primary>communism</primary>
          </indexterm>communism and US liberal <indexterm class="singular" xml:id="b-9781474207300-IDX-1930">
            <primary>United States</primary>
            <secondary>capitalism</secondary>
          </indexterm>capitalism were both hostile to traditional, “old” European empires (even as the two new superpowers were very obviously empires of a different sort), and colonial populations had tired of fruitlessly agitating for greater rights within imperial frameworks, now turning to demands for national <indexterm class="singular" xml:id="b-9781474207300-IDX-941">
            <primary>India</primary>
            <secondary>independence</secondary>
          </indexterm>independence.</para>
<para xml:id="b-9781474207300-292">Nonetheless, imperial centers proved themselves willing to deploy violence to maintain empire. Winston <indexterm class="singular" xml:id="b-9781474207300-IDX-358">
            <primary>Churchill, Winston</primary>
          </indexterm>Churchill famously paired the fight for national survival in the face of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1341">
            <primary>Nazis</primary>
          </indexterm>Nazi menace with a fierce determination to maintain the British Empire. Yet efforts to keep <indexterm class="singular" xml:id="b-9781474207300-IDX-920">
            <primary>India</primary>
          </indexterm>India contributing to the war effort and prevent its conquest by the Japanese laid the foundations for Indian independence in 1947, and partition and the legacies of British colonial policies led to mass violence in the process and repeated wars in the region ever since, as India, <indexterm class="singular" xml:id="b-9781474207300-IDX-1464">
            <primary>Pakistan</primary>
          </indexterm>Pakistan, and <indexterm class="singular" xml:id="b-9781474207300-IDX-188">
            <primary>Bangladesh</primary>
          </indexterm>Bangladesh have struggled to work out what a postcolonial status quo will look like in the region. As far as direct British involvement, though, India’s decolonization was notable for an absence of imperial violence and war. Not so in other places, whether controlled by the British or other western colonial powers. Even as negotiations were ending and resulting in Indian and Pakistani independence, Great Britain became embroiled in open warfare on the <indexterm class="singular" xml:id="b-9781474207300-IDX-1201">
            <primary>Malay Peninsula</primary>
          </indexterm>Malay peninsula. In 1948, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1210">
            <primary>Malayan Communist Party</primary>
          </indexterm>Malayan Communist Party began an insurgency against British rule, even as the British were taking steps to loosen colonial control over the region. Yet typical of processes of decolonization during the <indexterm class="singular" xml:id="b-9781474207300-IDX-374">
            <primary>Cold War</primary>
          </indexterm>Cold War era, particularly militarized processes, western leaders were keen to ensure a non-communist future for newly independent states. So British forces waged war on their guerilla opponents, making use of air power and other elements of conventional tactics, as well as approaches developed earlier in the history of western colonialism: forced relocation, <indexterm class="singular" xml:id="b-9781474207300-IDX-411">
            <primary>concentration camps</primary>
          </indexterm>concentration camps, punitive raids, destruction of infrastructure, and political and humanitarian initiatives aimed at “winning over” the indigenous people on whose support the guerillas depended. These were successful, insofar as they prevented the communists from coming to power at the time and later when the new nation of <indexterm class="singular" xml:id="b-9781474207300-IDX-1211">
            <primary>Malaysia</primary>
          </indexterm>Malaysia came into being. But the violence was extreme and protracted, ending only in 1960 and leaving tension throughout the region in its wake (<link linkend="b-9781474207300-ref519" role="bib">Stubbs 2004</link>; <link linkend="b-9781474207300-ref49" role="bib">Barber 2007</link>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-793" xml:id="b-9781474207300-IDX-end81"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-769" xml:id="b-9781474207300-IDX-end76"/>).</para>
<?page value="38"?>
<figure label="1.3" xml:id="b-9781474207300-fig1_3">
<info xml:id="b-9781474207300-293">
<title xml:id="b-9781474207300-294">British soldiers wade upriver through the jungle on patrol in 1957 during the Malayan Emergency. Credit: Horace Abrahams/Keystone Features/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-295">
<imageobject xml:id="b-9781474207300-296">
<imagedata align="center" fileref="images/fig1_3.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-298">
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-611">
            <primary>France</primary>
          </indexterm>The British experience in <indexterm class="singular" xml:id="b-9781474207300-IDX-1205">
            <primary>Malaya</primary>
          </indexterm>Malaya serves in many ways as a typical example of the wars of decolonization. First of all, officials declined to call it a war, labelling it instead the “Malayan Emergency.” Western empires often referred to these wars by such euphemisms, the better both to distance themselves from international agreements pertaining to the ethical conduct of war, and to delegitimize their enemies. This tendency operated colloquially as well. Even when the French, for instance, called their war in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-964">
            <primary>Indochina</primary>
          </indexterm>Indochina by its proper name, they added a qualification: it was <emphasis role="italic">la sale guerre</emphasis>, or “the <indexterm class="singular" xml:id="b-9781474207300-IDX-491">
            <primary>Dirty War</primary>
          </indexterm>Dirty War.” And so the military and colonial history of the period is filled with “emergencies,” “conflicts” (as Americans used to refer to the <indexterm class="singular" xml:id="b-9781474207300-IDX-1983">
            <primary>Vietnam War</primary>
          </indexterm>Vietnam War), “insurgencies,” “insurrections,” “revolts,” “uprisings,” “rebellions,” and the like, all distinct from “legitimate” or “real” war between states that recognized each other as such. These terms have the virtue of highlighting the unusual nature of colonial wars, which did have some singular characteristics, and they indicate a <?page value="39"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-400">
            <primary>communism</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-487">
            <primary>Điê˙n Biên Phủ</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-658">
            <primary>France</primary>
            <secondary>military</secondary>
          </indexterm>political and cultural shift from emphasizing clashes between nation-states and conventional warfare to more amorphous and shifting confrontations within empires, nations, and societies. But such terms also elide or sublimate the many, many ways that colonial wars were, in fact, “war.”</para>
<para xml:id="b-9781474207300-299">The <indexterm class="singular" xml:id="b-9781474207300-IDX-375">
            <primary>Cold War</primary>
          </indexterm>Cold War structured many of these wars, as the West (and especially the <indexterm class="singular" xml:id="b-9781474207300-IDX-1902">
            <primary>United States</primary>
          </indexterm>United States) vied with the <indexterm class="singular" xml:id="b-9781474207300-IDX-1709">
            <primary>Soviet Union</primary>
          </indexterm>Soviet Union for influence across the globe. Thus, the peculiar mix of structural and conventional violence that characterized colonial wars, and the asymmetry between the defenders of imperial control and their opponents, give the wars of decolonization their distinct place in the histories of both war and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-638">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1055">
            <primary>Japan</primary>
            <secondary>empire</secondary>
          </indexterm>empire. The <indexterm class="singular" xml:id="b-9781474207300-IDX-61">
            <primary>Algeria</primary>
            <secondary>French settlers</secondary>
          </indexterm>French empire provides good examples. In Indochina, the French government sought to reassert its colonial authority in the face of a nationalist and communist resistance emboldened and empowered by turmoil both in France—first conquered and occupied by the Germans and then busy with reconstructing the nation in Europe—and in south-east Asia itself—which saw the ebbing and flowing of the Japanese empire. Embroiled in an unpopular counterinsurgency war that it could ill afford in many senses, the French effort was in the end sustained by very large doses of US moral and material support. This did not stop the French from losing the war, tellingly in a pitched battle at Dien Bien Phu in 1954. Prior to this, the United States’ <indexterm class="singular" xml:id="b-9781474207300-IDX-110">
            <primary>anticommunism</primary>
          </indexterm>anticommunism had outweighed its hostility to traditional European empires, and then after 1954 the Americans began to defend their own particular brand of global hegemony in a war effort that would last two more decades and cost both <indexterm class="singular" xml:id="b-9781474207300-IDX-1974">
            <primary>Vietnam</primary>
          </indexterm>Vietnam and the US dearly (<link linkend="b-9781474207300-ref350" role="bib">Lawrence 2005</link>; <link linkend="b-9781474207300-ref505" role="bib">Statler 2007</link>; <link linkend="b-9781474207300-ref363" role="bib">Logevall 2012</link>).</para>
<para xml:id="b-9781474207300-300">A second example, again involving France, was the Algerian <indexterm class="singular" xml:id="b-9781474207300-IDX-76">
            <primary>Algeria</primary>
            <secondary>War of Independence</secondary>
          </indexterm>War of Independence, which posed such uncomfortable questions for the French and their empire that it came to be known as “the war without a name” in the metropole (<link linkend="b-9781474207300-ref527" role="bib">Talbott 1980</link>). Beginning in 1954 and lasting for eight years until the French colonial administration and army left, along with hundreds of thousands of European settlers, all parties waged the war in particularly brutal fashion. As Algerian <indexterm class="singular" xml:id="b-9781474207300-IDX-65">
            <primary>Algeria</primary>
            <secondary>nationalists</secondary>
          </indexterm>nationalists relied on assassinations, bombings, terror, and other tactics that addressed their relative weakness in the means of violence, the French colonial state responded with indiscriminate and extrajudicial killing, widespread and systematic torture, and the use of overwhelming force. The war was a confusing maelstrom of splits among Algerians themselves, among French metropolitan and colonial officials, within the French army, between European settlers and those tasked with defending their interests, and among different factions of French society in France itself and in Algeria. If any war lived up to the descriptive “dirty,” this was it. And the legacy of the violence has haunted both Algeria and France ever since (<link linkend="b-9781474207300-ref283" role="bib">Horne 2006</link>; <link linkend="b-9781474207300-ref489" role="bib">Shepard 2006</link>).</para>
<para xml:id="b-9781474207300-301">There are many examples that illustrate the distinct aspects of the wars of decolonization, but two final and less well-known examples can stand as symbols of the kinds of violence millions of people witnessed and suffered <indexterm class="endofrange" startref="b-9781474207300-IDX-611" xml:id="b-9781474207300-IDX-end55"/>as <?page value="40"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-5007">
            <primary>World War II</primary>
          </indexterm>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure1_4"/>formal Western empires collapsed after the Second World War. The two largest remaining overseas empires were those of the British and the French. The French proved willing to deploy significant—even extreme—violence in a failed attempt to maintain imperial status and control not only in Indochina and <indexterm class="singular" xml:id="b-9781474207300-IDX-52">
            <primary>Algeria</primary>
          </indexterm>Algeria, but also in a far-flung corner of <indexterm class="singular" xml:id="b-9781474207300-IDX-794">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>empire in the <indexterm class="singular" xml:id="b-9781474207300-IDX-957">
            <primary>Indian Ocean</primary>
          </indexterm>Indian Ocean. In 1947 in <indexterm class="singular" xml:id="b-9781474207300-IDX-1196">
            <primary>Madagascar</primary>
          </indexterm>Madagascar, the French colonial administration and military suppressed what they termed an “insurrection” led by nationalist militants. Coordinated attacks on French military targets and plantations eventually elicited an overwhelming response, and official French estimates at the time put the number of Madagascans killed at over 80,000 in the space of little more than a year. Events in Madagascar paralleled those in other areas of Western colonial empires during the era of decolonization in terms of violence levels, repressive military tactics, and death tolls. But what is remarkable is how little known the episode is outside of Madagascar, where it plays an important role in the national historical memory (<link linkend="b-9781474207300-ref547" role="bib">Tronchon 1986</link>).</para>
<figure label="1.4" xlink:href="b-9781474207300-figure1_4" xlink:role="objectPointer" xml:id="b-9781474207300-fig1_4">
<info xml:id="b-9781474207300-302">
<title xml:id="b-9781474207300-303">French soldiers detain suspected nationalist fighters in the Aurès Mountains in 1955, during the Algerian war. Credit: Michel DESJARDINS/Gamma-Rapho via Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-304">
<imageobject xml:id="b-9781474207300-305">
<imagedata align="center" fileref="images/fig1_4.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-307">Violence in British <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1078">
            <primary>Kenya</primary>
          </indexterm>Kenya was until recently similarly less well known outside the area of its occurrence. Between 1952 and 1960, British colonial authorities confronted what they called by the usual euphemisms of “uprising” or <indexterm class="endofrange" startref="b-9781474207300-IDX-638" xml:id="b-9781474207300-IDX-end60"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-964" xml:id="b-9781474207300-IDX-end100"/>“rebellion” <?page value="41"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1049">
            <primary>Japan</primary>
          </indexterm>among <indexterm class="singular" xml:id="b-9781474207300-IDX-1106">
            <primary>Kikuyu</primary>
          </indexterm>Kikuyu peoples in Kenya. The so-called rebels came to be called <indexterm class="singular" xml:id="b-9781474207300-IDX-1240">
            <primary>Mau Mau</primary>
          </indexterm>Mau Mau, and targeted both white European settlers and perceived political and ethnic enemies among the indigenous population. To the British, Mau Mau came to be synonymous with unreasoning savagery and violence, but the grievances that propelled the violence were clearly rooted in the economic and <indexterm class="singular" xml:id="b-9781474207300-IDX-1135">
            <primary>land</primary>
          </indexterm>land policies of colonial rule. British <indexterm class="singular" xml:id="b-9781474207300-IDX-811">
            <primary>Great Britain</primary>
            <secondary>military</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1947">
            <primary>United States</primary>
            <secondary>military</secondary>
          </indexterm>military and legal repression was severe, and probably some 20,000 Kenyans died in what recent historians have called Britain’s “Dirty <indexterm class="startofrange" xml:id="b-9781474207300-IDX-352">
            <primary>China</primary>
            <secondary>war</secondary>
          </indexterm>War” (<link linkend="b-9781474207300-ref22" role="bib">Anderson 2005</link>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-98">
            <primary>Anderson, David</primary>
          </indexterm>) and “Britain’s Gulag” (<link linkend="b-9781474207300-ref184" role="bib">Elkins 2005a</link>). The story is unremarkable when viewed in the wider context of colonial violence during the period and, as historian David Anderson has pointed out, the violence in Kenya was more characteristic of even British decolonization than imagined by those who see that empire as having managed the process more magnanimously and peacefully than other imperial powers (<link linkend="b-9781474207300-ref22" role="bib">Anderson 2005</link>: 5).</para>
<para xml:id="b-9781474207300-308">The warfare between anticolonial forces and the defenders of empire was distinctive enough to spawn numerous and influential theorists on both sides of the divide. Mao <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2091">
            <primary>Zedong, Mao</primary>
          </indexterm>Zedong was the most influential anticolonial thinker on war, as he struggled to liberate China from what he never failed to characterize as western (and Japanese) <indexterm class="singular" xml:id="b-9781474207300-IDX-915">
            <primary>imperialism</primary>
          </indexterm>imperialism, and he articulated very clearly the different approaches that wars of decolonization necessitated. These approaches were most notable for the ways they integrated political and military imperatives, and indeed put first the political imperative of gaining and keeping the support of the masses of people among whom anticolonial guerilla forces had to live and fight. His first point in the list of priorities laid out in his classic 1937 book <emphasis role="italic">On Guerilla Warfare</emphasis> is, “Arousing and organizing the people,” followed by, “Achieving internal unification politically” (<link linkend="b-9781474207300-ref392" role="bib">Mao [1937]</link> 1978: 41). Only then does he address purely military matters. Yet Mao thought precisely and clearly about the technical problems of war, and his list of principles for effective fighting included in another classic text, “The Present Situation and Our Tasks” (1947), begins with an admonition to, “Attack dispersed, isolated enemy forces first; attack concentrated, strong enemy forces later,” and goes on to give very practical advice about waging the sort of wars in which anticolonial forces around the world found themselves involved (<link linkend="b-9781474207300-ref391" role="bib">Mao 1961</link>: 161–2). This, along with Mao’s victories and ultimate success, helps explain the global influence of his thinking on war.</para>
<para xml:id="b-9781474207300-309">If Mao and the many fighters and writers he inspired wrote about and acted out insurgency, a significant body of thinking, writing, and practice arose in opposition as well. Writers connected to <indexterm class="singular" xml:id="b-9781474207300-IDX-612">
            <primary>France</primary>
          </indexterm>France and its modern colonial wars, such as David <indexterm class="singular" xml:id="b-9781474207300-IDX-701">
            <primary>Galula, David</primary>
          </indexterm>Galula and Bernard <indexterm class="singular" xml:id="b-9781474207300-IDX-575">
            <primary>Fall, Bernard</primary>
          </indexterm>Fall, were very influential more broadly, particularly as American soldiers tried to make sense of, and prevail in, their own similar military effort in <indexterm class="singular" xml:id="b-9781474207300-IDX-1975">
            <primary>Vietnam</primary>
          </indexterm>Vietnam (<link linkend="b-9781474207300-ref199" role="bib">Fall 1964</link>; <link linkend="b-9781474207300-ref223" role="bib">Galula 1964</link>). Tellingly, as the United States carried out wars in the twenty-first century that bore many similarities to these earlier conflicts, a new generation of counterinsurgency theorists would seek to build upon this body of work (<link linkend="b-9781474207300-ref423" role="bib">Nagl 2005</link>; <link linkend="b-9781474207300-ref337" role="bib">Kilcullen <?page value="42"?>2010</link>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1078" xml:id="b-9781474207300-IDX-end121"/>). In fact, the US experience of war and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1522">
            <primary>Portugal</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1941">
            <primary>United States</primary>
            <secondary>empire</secondary>
          </indexterm>empire, and the experience of people around the world who had to contend with America’s empire and its wars, came to be of overriding importance as the era of decolonization wound down in the older European empires in the 1970s. Che <indexterm class="singular" xml:id="b-9781474207300-IDX-836">
            <primary>Guevara, Che</primary>
          </indexterm>Guevara, the anticolonial revolutionary active in <indexterm class="singular" xml:id="b-9781474207300-IDX-1140">
            <primary>Latin America</primary>
          </indexterm>Latin America and Africa, wrote about and practiced guerilla warfare in the mold of Mao Zedong, and like Frantz <indexterm class="singular" xml:id="b-9781474207300-IDX-578">
            <primary>Fanon, Frantz</primary>
          </indexterm>Fanon preached the value of violent struggle not only in defeating western colonialism, but in reconstituting the self-worth of subjugated populations. In 1967, the year of his death, he wished for a “bright future” in which “two, three or many Vietnams” would “flourish throughout the world with their share of deaths and their immense tragedies, their everyday heroism and their repeated blows against imperialism” (<link linkend="b-9781474207300-ref248" role="bib">Guevara 1998</link>: 175). Yet as scholar Martin <indexterm class="singular" xml:id="b-9781474207300-IDX-1821">
            <primary>Thomas, Martin</primary>
          </indexterm>Thomas has noted, the violence of colonial states and their agents was “an insecure foundation on which to build a supposedly better society” (<link linkend="b-9781474207300-ref538" role="bib">Thomas 2011</link>). If this was true, it begged the question not only of whether the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1903">
            <primary>United States</primary>
          </indexterm>United States could build a better future through nearly constant warfare in defense of its new, peculiar form of empire, but also whether the violence that figures such as Guevara and Fanon called for in opposition to this new kind of imperialism could lead to the bright, emancipated future of anticolonialists’ dreams. The fifty years that have passed since Guevara’s death may not yet have clarified the issue.</para>
</section>
<section xml:id="b-9781474207300-310">
<info xml:id="b-9781474207300-311">
<title xml:id="b-9781474207300-312">Conclusion: War Without End, 1975–Present</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-313">In 1975, one of the West’s oldest overseas empires all but ceased to exist. After a 1974 revolution that ended authoritarian rule in <indexterm class="singular" xml:id="b-9781474207300-IDX-1517">
            <primary>Portugal</primary>
          </indexterm>Portugal, the process of decolonization accelerated in an empire that had originated over five and a half centuries earlier. Colonial war was critical to the entire process, since fighting to maintain control of imperial holdings was a priority for the ruling <emphasis role="italic">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-543">
              <primary>
                <emphasis role="italic">Estado Novo</emphasis>
              </primary>
            </indexterm>Estado Novo</emphasis>, and indeed exhaustion from fighting wars against <indexterm class="singular" xml:id="b-9781474207300-IDX-27">
            <primary>Africa</primary>
            <secondary>independence movements</secondary>
          </indexterm>independence movements in Africa was a critical factor in bringing on revolution in the metropole. The new regime first recognized the independence of <indexterm class="singular" xml:id="b-9781474207300-IDX-842">
            <primary>Guinea-Bissau</primary>
          </indexterm>Guinea-Bissau, then <indexterm class="singular" xml:id="b-9781474207300-IDX-1314">
            <primary>Mozambique</primary>
          </indexterm>Mozambique, <indexterm class="singular" xml:id="b-9781474207300-IDX-1619">
            <primary>São Tomé and Principe</primary>
          </indexterm>São Tomé and Principe, and <indexterm class="singular" xml:id="b-9781474207300-IDX-100">
            <primary>Angola</primary>
          </indexterm>Angola, and so by the end of 1975 colonial wars that had raged for over 13 years came to an end (<link linkend="b-9781474207300-ref381" role="bib">MacQueen 1997</link>). Yet violence did not end in the newly independent nations, and Angola immediately descended into civil war, while the former Portuguese colony of <indexterm class="singular" xml:id="b-9781474207300-IDX-511">
            <primary>East Timor</primary>
          </indexterm>East Timor, which had declared independence in November 1975, suffered invasion and occupation by <indexterm class="singular" xml:id="b-9781474207300-IDX-975">
            <primary>Indonesia</primary>
          </indexterm>Indonesia before the year was out. The Portuguese empire was virtually extinct (it would relinquish its last remaining territory, <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1190">
            <primary>Macau</primary>
          </indexterm>Macau, to China in 1999), but the legacy of colonial violence lived on, as it would in many former colonial possessions of the Western overseas empires.</para>
<para xml:id="b-9781474207300-314">The year 1975 also saw another process whereby a process of decolonization came to completion through war, and once again the aftermath saw yet <indexterm class="endofrange" startref="b-9781474207300-IDX-466" xml:id="b-9781474207300-IDX-end38"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2091" xml:id="b-9781474207300-IDX-end231"/>more <?page value="43"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-604">
            <primary>
              <emphasis role="italic">Françafrique</emphasis>
            </primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1950">
            <primary>United States</primary>
            <secondary>policies of</secondary>
          </indexterm>violence as part of the legacy of <indexterm class="singular" xml:id="b-9781474207300-IDX-639">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>empire. Yet whereas events in Portuguese Africa signaled the exit of a western imperial power from the modern story of war and empire, events in <indexterm class="singular" xml:id="b-9781474207300-IDX-1976">
            <primary>Vietnam</primary>
          </indexterm>Vietnam exemplified the continuing importance of the United States as the world’s most prominent imperial power, and as a central player in many episodes of global imperial violence. On April 30, the South Vietnamese capital of <indexterm class="singular" xml:id="b-9781474207300-IDX-1614">
            <primary>Saigon</primary>
          </indexterm>Saigon fell to invading North Vietnamese troops. The last US troops and political personnel fled the former client-state as it crumbled, ending a two-decade effort to prevent the unification of Vietnam under communist control. The communists, for their part, proclaimed this their final victory in the war to decolonize Vietnam and free it from foreign imperial control (<link linkend="b-9781474207300-ref240" role="bib">Goscha 2016</link>). Yet war was far from over, and skirmishing with neighboring <indexterm class="singular" xml:id="b-9781474207300-IDX-292">
            <primary>Cambodia</primary>
          </indexterm>Cambodia began immediately. These clashes escalated steadily, culminating in Vietnam’s invasion of Cambodia in 1978. A good deal of the friction between the two nations stemmed from the presence in Cambodia of the murderous and erratic <indexterm class="singular" xml:id="b-9781474207300-IDX-1102">
            <primary>Khmer Rouge</primary>
          </indexterm>Khmer Rouge government, whose way to power was paved by US destabilization of the country in the early 1970s, carried out as part of American efforts to prevail in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1984">
            <primary>Vietnam War</primary>
          </indexterm>Vietnam War (<link linkend="b-9781474207300-ref598" role="bib">Young 1991</link>). The twisting course of instability and violence in south-east <indexterm class="singular" xml:id="b-9781474207300-IDX-1700">
            <primary>Southeast Asia</primary>
          </indexterm>Asia is deeply complex, but the role of the United States is clear and critical. And though US policy in the region culminated ignominiously and symbolically with a chaotic evacuation from the rooftop of the American embassy in Saigon, the United States has remained the central actor in the global history of war and empire in the late twentieth and early twenty-first centuries.</para>
<para xml:id="b-9781474207300-315">This is not to say that other actors and events were not important during the period. France has maintained very close military, political, economic, and commercial ties with many of its former colonies in Africa. This is a deliberate policy choice, and is distinct and well-known enough to have a name, <emphasis role="italic">Franceafrique</emphasis>. France intervenes militarily in Africa more than any other former colonial power, and the presence of troops from former colonies in July 14 and <indexterm class="singular" xml:id="b-9781474207300-IDX-128">
            <primary>Armistice Day</primary>
          </indexterm>Armistice <indexterm class="singular" xml:id="b-9781474207300-IDX-198">
            <primary>Bastille Day</primary>
          </indexterm>Day ceremonies highlights the ways empire, war, and the fraternity of arms continues to link France with its former colonies. <indexterm class="singular" xml:id="b-9781474207300-IDX-770">
            <primary>Great Britain</primary>
          </indexterm>Great Britain’s approach is not so obvious in many ways, but its willingness on occasion to fight to retain control of the last remnants of empire that remain does stand out. The two-month <indexterm class="singular" xml:id="b-9781474207300-IDX-574">
            <primary>Falklands Crisis (1982)</primary>
          </indexterm>Falklands war of 1982 may have seemed a curious anachronism and an odd sideshow, but one of the world’s wealthiest and most powerful nations mobilized a huge and technologically advanced naval, air, and ground force and conducted serious military operations to maintain control of a few islands and a few thousand residents almost 8,000 miles away from London.</para>
<para xml:id="b-9781474207300-316">Even as the last stages of decolonization continued with the end of white minority rule in <indexterm class="singular" xml:id="b-9781474207300-IDX-1683">
            <primary>South Africa</primary>
          </indexterm>South Africa in 1994, and the return of outposts like <indexterm class="singular" xml:id="b-9781474207300-IDX-883">
            <primary>Hong Kong</primary>
          </indexterm>Hong Kong and Macau to China in the late 1990s, then, the violent afterlives of empire punctuated the history of the late twentieth century. Often these events were evidence of <indexterm class="singular" xml:id="b-9781474207300-IDX-1361">
            <primary>neoimperialism</primary>
          </indexterm>neoimperialism and <indexterm class="singular" xml:id="b-9781474207300-IDX-1358">
            <primary>neocolonialism</primary>
          </indexterm>neocolonialism—names for processes <indexterm class="endofrange" startref="b-9781474207300-IDX-352" xml:id="b-9781474207300-IDX-end30"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1190" xml:id="b-9781474207300-IDX-end129"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1522" xml:id="b-9781474207300-IDX-end162"/>by <?page value="44"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure1_5"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1716">
            <primary>Soviet Union</primary>
            <secondary>military</secondary>
          </indexterm>which former colonial powers maintained predominant positions in business and finance, and interfered in newly independent nations’ politics to exercise a control that smacked of older imperial and colonial hierarchies. And violence or the threat of violence, <indexterm class="singular" xml:id="b-9781474207300-IDX-1996">
            <primary>violence</primary>
            <secondary>structural</secondary>
          </indexterm>structural or in the form of open warfare, was never very far out of the picture. Even the fall of <indexterm class="singular" xml:id="b-9781474207300-IDX-401">
            <primary>communism</primary>
          </indexterm>communism in <indexterm class="singular" xml:id="b-9781474207300-IDX-513">
            <primary>Eastern Europe</primary>
          </indexterm>eastern Europe in 1989 and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1713">
            <primary>Soviet Union</primary>
            <secondary>demise of</secondary>
          </indexterm>demise of the Soviet Union in 1991, which arguably constituted very large-scale processes of <indexterm class="singular" xml:id="b-9781474207300-IDX-467">
            <primary>decolonization</primary>
          </indexterm>decolonization (certainly the Soviet <indexterm class="singular" xml:id="b-9781474207300-IDX-1715">
            <primary>Soviet Union</primary>
            <secondary>empire</secondary>
          </indexterm>empire came to an end), had some roots in imperial war. In 1978, the Soviet Union invaded <indexterm class="singular" xml:id="b-9781474207300-IDX-10">
            <primary>Afghanistan</primary>
          </indexterm>Afghanistan in order to restore a client regime on its southern border. The protracted quagmire that ensued has prompted comparisons with the Vietnam War ever since, and played a role in weakening the Soviet army and state in the years leading up to the collapse of 1989–91 (<link linkend="b-9781474207300-ref79" role="bib">Braithwaite 2011</link>).</para>
<figure label="1.5" xlink:href="b-9781474207300-figure1_5" xlink:role="objectPointer" xml:id="b-9781474207300-fig1_5">
<info xml:id="b-9781474207300-317">
<title xml:id="b-9781474207300-318">September 4, 1965: Vietnamese children at the Phu Thuong Orphanage near Da Nang taste ice cream for the first time, brought to them by US Marines as part of a goodwill mission during the Vietnam War, Vietnam. Credit: US Marine Corps/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-319">
<imageobject xml:id="b-9781474207300-320">
<imagedata align="center" fileref="images/fig1_5.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-322">But it is the United States’ role in the world that ensures the story of war and Western empire is still ongoing in the twenty-first century. The US most directly stood in for, or “replaced,” old-style European imperial power when it took responsibility from <indexterm class="singular" xml:id="b-9781474207300-IDX-613">
            <primary>France</primary>
          </indexterm>France for maintaining a non-communist <indexterm class="singular" xml:id="b-9781474207300-IDX-1698">
            <primary>South Vietnam</primary>
          </indexterm>South Vietnam. <indexterm class="endofrange" startref="b-9781474207300-IDX-1903" xml:id="b-9781474207300-IDX-end197"/>It <?page value="45"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure1_6"/>is clear that Americans and their leaders do not see themselves as building and maintaining an <indexterm class="singular" xml:id="b-9781474207300-IDX-640">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>empire along the lines of previous Western empires, ruling over peoples and territories directly. For instance, in the early years of the twenty-first century, Secretary of Defense Donald <indexterm class="singular" xml:id="b-9781474207300-IDX-1592">
            <primary>Rumsfeld, Donald</primary>
          </indexterm>Rumsfeld routinely went out of his way to assure the world that despite US military action in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1270">
            <primary>Middle East</primary>
          </indexterm>Middle East, the United Sates had “no aspiration to occupy or maintain any real estate in that region.”<footnote label="1" role="end-bk-note" xml:id="b-9781474207300-fn1_1">
            <para xml:id="b-9781474207300-323">Rumsfeld spoke along these lines on many occasions during his time as Secretary of Defense under President George W. Bush (2001–6). This quotation is from a press briefing on October 9, 2001: see <link xlink:href="http://www.washingtonpost.com/wp-srv/nation/specials/attacked/transcripts/rumsfeld_100901.html">
                <uri>http://www.washingtonpost.com/wp-srv/nation/specials/attacked/transcripts/rumsfeld_100901.html</uri>
              </link>. See also a 2002 speech at NATO headquarters in Brussels: <link xlink:href="http://www.nato.int/docu/speech/2002/s020606g.htm">
                <uri>http://www.nato.int/docu/speech/2002/s020606g.htm</uri>
              </link>.</para>
          </footnote> The nature of US hegemony and its status as an empire is a subject of intense debate, but those who describe the United States as an empire, whether approvingly or disapprovingly, rarely confuse it with the territorial empires of earlier centuries. The United States usually exercises imperial influence and control indirectly, via culture, economic weight, and neoimperial and neocolonial relationships. The United States also maintains empire through the military and war, force, and violence. And all of these methods can mix together simultaneously, as when the United States carries out the kinds of “hearts and minds” campaigns of economic and humanitarian aid that have been an overt part of military and political strategies ever since at least the Vietnam War, strategies that would for instance be very familiar to earlier architects of the French republican colonial empire such as <indexterm class="singular" xml:id="b-9781474207300-IDX-700">
            <primary>Gallieni, Joseph</primary>
          </indexterm>Gallieni and <indexterm class="singular" xml:id="b-9781474207300-IDX-1184">
            <primary>Lyautey, Hubert</primary>
          </indexterm>Lyautey.</para>
<figure label="1.6" xlink:href="b-9781474207300-figure1_6" xlink:role="objectPointer" xml:id="b-9781474207300-fig1_6">
<info xml:id="b-9781474207300-324">
<title xml:id="b-9781474207300-325">A US special forces soldier monitors Iraqi forces advancing toward Mosul airport on February 23, 2017. Credit: AHMAD AL-RUBAYE/AFP/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-326">
<imageobject xml:id="b-9781474207300-327">
<imagedata align="center" fileref="images/fig1_6.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-329">The United States enforces what many call an informal empire via repeated military interventions (historically most notably in <indexterm class="singular" xml:id="b-9781474207300-IDX-1141">
            <primary>Latin America</primary>
          </indexterm>Latin America), <indexterm class="endofrange" startref="b-9781474207300-IDX-1984" xml:id="b-9781474207300-IDX-end211"/>larger-scale <?page value="46"?>wars (most recently in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1496">
            <primary>Persian Gulf</primary>
          </indexterm>Persian Gulf, <indexterm class="singular" xml:id="b-9781474207300-IDX-11">
            <primary>Afghanistan</primary>
          </indexterm>Afghanistan, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1015">
            <primary>Iraq</primary>
          </indexterm>Iraq), and a network of over 700 military bases in dozens of countries around the world. Since the terrorist attacks of September 11, 2001, the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1904">
            <primary>United States</primary>
          </indexterm>United States has been involved in major military operations—in a word, war—continuously in Afghanistan and Iraq. The so-called “<indexterm class="singular" xml:id="b-9781474207300-IDX-2005">
            <primary>war on terror</primary>
          </indexterm>war on terror” of which these are ostensibly a part also embraces smaller-scale operations that involve the deployment of troops, drone strikes, and many other forms of militarized violence around the world in an effort to preserve American interests, which amount to an effort to preserve American hegemony. It is difficult to see this as anything other than violence in defense of empire, whether or not the United States is interested in formally acquiring colonial “real estate,” and it is the sort of violence that moves back and forth between the two poles that have defined the history of war and empire since 1920: everyday structural violence and open conventional warfare. Certainly, peoples around the world on the receiving end of American force in defense of national interests often experience American power as a structural pressure, frequently taking cultural forms, in their everyday lives. These same peoples also often experience this power as a deadly and concrete reality. This is nothing new, because imperial violence and war have been a constant, seemingly endless presence in the lives of many of the world’s peoples during the whole history of modern Western empires. And, not coincidentally, many of the peoples affected by American imperial violence experienced it historically at the hands of other, earlier empires. Nearly a hundred years after the empires of the West concluded a global war that caused the collapse of several of them, and unleashed forces that would erode others, it seems clear that empire and war remain alive and well and intertwined, and there is no end in sight.</para>
</section>
</chapter>
<chapter label="2" xml:id="b-9781474207300-chapter2">
<info xml:id="b-9781474207300-330">
<title xml:id="b-9781474207300-331">
          <?page value="47"?>Trade</title>
<author xlink:href="C0007" xlink:role="biblioAuID">
<personname role="first-last">
<firstname>David</firstname> <surname>Lynch</surname>
          </personname>
        </author>
<pagenums>47–68</pagenums>
<biblioid class="doi">10.5040/9781474207300.ch-002</biblioid>
<mediaobject xml:id="b-9781474207300-332">
<imageobject xml:id="b-9781474207300-333">
<imagedata fileref="pdfs/9781474207300.ch-002.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
<copyright>
          <year>2019</year>
          <holder>Bloomsbury Publishing</holder>
        </copyright>
      </info>
<section xml:id="b-9781474207300-334">
<info xml:id="b-9781474207300-335">
<title xml:id="b-9781474207300-336">The Epic Story of Trade</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-337">Trade in and since the twentieth century has expanded massively in its volume, variety, complexity, and geographic scope. The countries at the forefront of this expansion were the early industrializers, which is to say the western imperial powers such as <indexterm class="singular" xml:id="b-9781474207300-IDX-771">
            <primary>Great Britain</primary>
          </indexterm>Great Britain, the United States, <indexterm class="singular" xml:id="b-9781474207300-IDX-614">
            <primary>France</primary>
          </indexterm>France, and Germany. During this era, the imperial powers lost their colonies, but much of the colonial relationship continued in what some have called informal <indexterm class="singular" xml:id="b-9781474207300-IDX-916">
            <primary>imperialism</primary>
          </indexterm>imperialism in which military and economic power inequities continue despite newly independent countries’ political sovereignty<footnote label="1" role="end-bk-note" xml:id="b-9781474207300-fn2_1">
            <para xml:id="b-9781474207300-338">Baumgart, it should be added, finds the term “informal imperialism” too broad as to be useful, but notes the history of the term’s usage (1982: 5–7, 10).</para>
          </footnote> (<link linkend="b-9781474207300-ref53" role="bib">Baumgart 1982</link>: 6–7).</para>
<para xml:id="b-9781474207300-339">The expansion of trade has brought with it societal changes both celebrated and vilified. Early industrializers experienced unimaginable levels of wealth, dramatically more urbanization, and celebrated the free trade they believe got them there. Yet trade has been castigated by those harmed or threatened by it. In former western colonies, the trade patterns developed in the colonial era have, too often, continued after formal colonialism’s end: primary products are exported from developing former colonies to the industrialized former colonial powers where they are transformed, with greater value added, into final products. Advances into more <indexterm class="singular" xml:id="b-9781474207300-IDX-986">
            <primary>industrial production</primary>
          </indexterm>industrial production by former colonies have been hindered by developed countries’ tariff escalation: low <indexterm class="singular" xml:id="b-9781474207300-IDX-1789">
            <primary>tariffs</primary>
          </indexterm>tariffs on primary products and higher tariffs on intermediate or finished articles. Because tariff escalation includes low or no tariffs on primary products used in industrial production—the very thing many former colonies have specialized in since colonialism—the situation seems helpful to them (<link linkend="b-9781474207300-fig2_1" role="figure">Figure 2.1</link>). The return on investment in developing nations is therefore altered to favor primary <indexterm class="endofrange" startref="b-9781474207300-IDX-1904" xml:id="b-9781474207300-IDX-end198"/>products, <?page value="48"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure2_1"/>… while the high protective rates levied on manufactured goods pose a significant entry barrier for any developing nation wishing to compete in this area” (<link linkend="b-9781474207300-ref105" role="bib">Carbaugh 2015</link>: 115).</para>
<figure label="2.1" xlink:href="b-9781474207300-figure2_1" xlink:role="objectPointer" xml:id="b-9781474207300-fig2_1">
<info xml:id="b-9781474207300-340">
<title xml:id="b-9781474207300-341">A wood chip mountain for export in Puerto Montt, southern Chile. Credit: Julio Etchart/ullstein bild via Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-342">
<imageobject xml:id="b-9781474207300-343">
<imagedata align="center" fileref="images/fig2_1.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-345">Despite this, some former colonies, such as <indexterm class="singular" xml:id="b-9781474207300-IDX-244">
            <primary>Brazil</primary>
          </indexterm>Brazil, <indexterm class="singular" xml:id="b-9781474207300-IDX-976">
            <primary>Indonesia</primary>
          </indexterm>Indonesia, <indexterm class="singular" xml:id="b-9781474207300-IDX-1260">
            <primary>Mexico</primary>
          </indexterm>Mexico, <indexterm class="singular" xml:id="b-9781474207300-IDX-1212">
            <primary>Malaysia</primary>
          </indexterm>Malaysia, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1663">
            <primary>Singapore</primary>
          </indexterm>Singapore, have become more industrialized as investment from developed to developing countries has increased <indexterm class="singular" xml:id="b-9781474207300-IDX-988">
            <primary>industrialization</primary>
          </indexterm>industrialization. Low wages are a competitive advantage, as is so-called competition in laxity in which developing nations attract investment by lowering environmental or other standards. To critics this is a “race to the bottom,” draining the capacity of governments to function in developed and developing countries.<footnote label="2" role="end-bk-note" xml:id="b-9781474207300-fn2_2">
            <para xml:id="b-9781474207300-346">Anecdotal evidence for the race to the bottom abounds, but most investment does not flow to the least regulatory governments. In most years, most investment flows between developed countries, which tend to have more stringent environmental, health and safety, and labor laws. Additionally, more globalized countries are apt to have higher rates of government spending than less globalized countries, as economist Dani Rodrik, who is wary of unregulated globalization, has found. This evidence is strongly against the race to the bottom argument but does not negate the many specific instances of corporations successfully negotiating with developing country governments to relax regulations as a condition of investment.</para>
          </footnote> There is discontent within developed economies as well. Industries that face greater competition from imports and thus declining market shares, profits, wages, and jobs are likely to fight against more trade <indexterm class="singular" xml:id="b-9781474207300-IDX-1839">
            <primary>trade</primary>
            <secondary>liberalization of</secondary>
          </indexterm>liberalization. In the 1970s and 1980s, for instance, <indexterm class="singular" xml:id="b-9781474207300-IDX-1808">
            <primary>textiles</primary>
          </indexterm>textile and apparel production in developed countries was under dramatic price competition from imports in developing countries, many of which were former colonies. The former colonies and other developing countries have come to dominate textile and especially apparel production, with only niche or very high-end production surviving in metropole and other developed countries.</para>
<para xml:id="b-9781474207300-347">These battles are not new. A particularly dramatic set of events associated with trade, <indexterm class="singular" xml:id="b-9781474207300-IDX-516">
            <primary>economic liberalization</primary>
          </indexterm>economic liberalization, and, more broadly, <indexterm class="singular" xml:id="b-9781474207300-IDX-747">
            <primary>globalization</primary>
          </indexterm>globalization, has led to <?page value="49"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-419">
            <primary>consumerism</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1796">
            <primary>technology</primary>
          </indexterm>a dominant narrative among scholars in a number of fields and among policymakers in many countries, including the industrialized countries that continue to dominate the major international economic institutions. This dominant theme celebrates the rise of the West and suggests development in former colonies, and other developing countries, should be based on open trade and investment policies. W.W. <indexterm class="singular" xml:id="b-9781474207300-IDX-1585">
            <primary>Rostow, W.W.</primary>
          </indexterm>Rostow, a US economist and key advisor in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1076">
            <primary>Kennedy, John F.</primary>
          </indexterm>Kennedy and <indexterm class="singular" xml:id="b-9781474207300-IDX-1066">
            <primary>Johnson, Lyndon B.</primary>
          </indexterm>Johnson administrations, identified five stages of economic growth, which he believed countries could move through more rapidly than early industrializers had done because it was now clear what needed to be done. Countries could advance from the traditional to the transitional stage through <indexterm class="singular" xml:id="b-9781474207300-IDX-1725">
            <primary>specialization</primary>
          </indexterm>specialization of primary products. Income from primary product specialization would then be invested in a few leading industries. As these initial steps in industrialization met with success, the country would urbanize and the economy’s industrial base would widen. The country would then enter the take-off stage in which “growth becomes … [society’s] normal condition,” investment having now become entrenched in the economy with technological innovation becoming increasingly important as the economy would mature and, lastly, the country would reach the <indexterm class="singular" xml:id="b-9781474207300-IDX-1235">
            <primary>mass consumption</primary>
          </indexterm>mass <indexterm class="singular" xml:id="b-9781474207300-IDX-420">
            <primary>consumption</primary>
          </indexterm>consumption stage in which services would become a larger aspect of the economy (<link linkend="b-9781474207300-ref478" role="bib">Rostow 1960</link>: 4–11). That mass consumption would be held up as the ultimate goal of economic development toward which there should be a normal progression demonstrates the assumed tacit acceptance of US-promulgated market-oriented cultural practices. The <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1905">
            <primary>United States</primary>
          </indexterm>United States proselytized pro-market and pro-consumption values to <indexterm class="singular" xml:id="b-9781474207300-IDX-553">
            <primary>Europe</primary>
          </indexterm>Europe and then to the rest of the world. These consumptive values and concomitant market orientation were at the core of what Victoria <indexterm class="singular" xml:id="b-9781474207300-IDX-458">
            <primary>de Grazia, Victoria</primary>
          </indexterm>de Grazia calls the United States’ dominance of the Market Empire in which US imperial influence was an empire without borders and “a great imperium with the outlook of a great emporium” (2005: 3). The key to its ascendance were the legions of mass marketers who inculcated much of the world in the culture of brands, identity through consumption, and other hallmarks of a consumer culture, which ultimately would come to see open markets as the proper order.</para>
<para xml:id="b-9781474207300-348">Just as there are sometimes local backlashes against a homogenizing culture, some were skeptical that colonial and other developing countries would experience the steady economic trajectory toward prosperity suggested by Rostow and others. Raúl <indexterm class="singular" xml:id="b-9781474207300-IDX-1535">
            <primary>Prebish, Raúl</primary>
          </indexterm>Prebish, sometimes called Latin America’s Keynes, had been an economic liberal, but increasingly saw the shortcomings of applying market solutions to the developing world. Competition between developed countries and <indexterm class="singular" xml:id="b-9781474207300-IDX-1299">
            <primary>monetary policy</primary>
          </indexterm>monetary policies in dominant markets could roil <indexterm class="singular" xml:id="b-9781474207300-IDX-442">
            <primary>currency market</primary>
          </indexterm>currency markets and thus harm developing countries. Markets did not operate as advertised he thought, particularly in developing countries. In essence, agricultural and other primary product prices dropped relative to imported industrial goods. This was later known as the <indexterm class="singular" xml:id="b-9781474207300-IDX-1816">
            <primary>theory of unequal exchange</primary>
          </indexterm>theory of unequal exchange. <?page value="50"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-385">
            <primary>colonialism</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-921">
            <primary>India</primary>
          </indexterm>Scholars associated with the concept had different ideas about what drove inequality in the exchange between rich and poor countries, but what they agreed upon was that the relationship’s unfairness harmed colonial and other developing countries (<link linkend="b-9781474207300-ref371" role="bib">Love 1980</link>: 45, 64). These voices would emerge as a partial corrective to the standard <indexterm class="singular" xml:id="b-9781474207300-IDX-1838">
            <primary>trade</primary>
            <secondary>liberals</secondary>
          </indexterm>liberal view of trade and <indexterm class="singular" xml:id="b-9781474207300-IDX-748">
            <primary>globalization</primary>
          </indexterm>globalization, but have not become the dominant story.</para>
<para xml:id="b-9781474207300-349">This dominant story of trade in and since the twentieth century is often told as an epic—there are heroes and villains, setbacks and doubt along a journey of growth. The telling and retelling of such epics establishes widely held cultural myths, such as the belief that developed countries industrialized with few barriers to foreign competition (and thus so too should former colonies). Myths further community solidarity and imbue storytellers and listeners with societal and cultural norms such as individual sacrifice for the greater good. The epic story of trade, along with its related liberalizing force, investment, helped make industrialized countries wealthy well beyond prior generations’ imaginations and deepened the wealth and power gap between industrialized countries and the rest of the <indexterm class="singular" xml:id="b-9781474207300-IDX-2055">
            <primary>World War I</primary>
          </indexterm>world to unprecedented levels. The tale as it has been commonly told includes a utopian past—before the First World War when the fruits of economic <indexterm class="singular" xml:id="b-9781474207300-IDX-1168">
            <primary>liberalization</primary>
          </indexterm>liberalization were supposedly enjoyed by many—ruined by the villain of excessive <indexterm class="singular" xml:id="b-9781474207300-IDX-1336">
            <primary>nationalism</primary>
          </indexterm>nationalism that ultimately led to the First World War. While trade and investment levels were indeed high before the First World War, it should be noted that the dominant narrative contained in this epic is itself contested. Some argue that facts have been misremembered in order to promote the “correct” lesson; one prominent critic has called the “official history of globalization” a misleading fable (<link linkend="b-9781474207300-ref112" role="bib">Chang 2008</link>: 21–6). The utopian past of pre-First World War globalization did, in fact, include substantial economic interdependence and increasing liberalization, but it also included very high <indexterm class="singular" xml:id="b-9781474207300-IDX-1957">
            <primary>United States</primary>
            <secondary>tariffs</secondary>
          </indexterm>tariffs in many industrial economies, including the world’s largest at the time, the United States. Before 1913, US tariffs on industrial goods averaged 44 percent. In 1913, they dropped to 25 percent, but were raised again during the First World War (<link linkend="b-9781474207300-ref112" role="bib">Chang 2008</link>: 54). Moreover, this globalization era, so celebrated in the narrative, included considerable non-voluntary participation. Colonialization was a key part of pre-First World War globalization, including the exploitation of colonial populations and economies to the point of altering global trade and investment patterns: colonial economies were shaped to ensure a steady supply of raw materials would flow to industrialized metropole economies. For instance, the Indian textile industry was once more advanced than that of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-772">
            <primary>Great Britain</primary>
          </indexterm>Britain (<link linkend="b-9781474207300-fig2_2" role="figure">Figure 2.2</link>), but collapsed in the face of British restrictions on internal Indian textile production and sales, and on Indian textile exports to Britain (<link linkend="b-9781474207300-ref426" role="bib">Nehru [1946] 1985</link>: 298–9, 331). British textile mills did not have to compete with Indian mills for access to Indian <indexterm class="endofrange" startref="b-9781474207300-IDX-1905" xml:id="b-9781474207300-IDX-end199"/>cotton.<footnote label="3" role="end-bk-note" xml:id="b-9781474207300-fn2_3">
            <para xml:id="b-9781474207300-350">Adam Hochschild’s <link linkend="b-9781474207300-ref276" role="bib">
                <emphasis role="italic">King Leopold’s Ghost: A Story of Greed, Terror, and Heroism in Colonial Africa</emphasis>
              </link> (1998) and Sven Beckert’s <link linkend="b-9781474207300-ref54" role="bib">
                <emphasis role="italic">Empire of Cotton, A Global History</emphasis>
              </link> (2015) are good examples, respectively, of the forced nature of economic relations and the importance of primary products from colonial countries to metropole economies.</para>
          </footnote>
        </para>
<?page value="51"?>
<figure label="2.2" xml:id="b-9781474207300-fig2_2">
<info xml:id="b-9781474207300-351">
<title xml:id="b-9781474207300-352">Weighing cotton in Mumbai. Illustration from the magazine <emphasis role="italic">The Illustrated London News</emphasis>, Volume XLI, October 11, 1862. Credit: De Agostini/Biblioteca Ambrosiana.</title>
</info>
<mediaobject xml:id="b-9781474207300-353">
<imageobject xml:id="b-9781474207300-354">
<imagedata align="center" fileref="images/fig2_2.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-356">The dominant narrative regarding trade in the twentieth century downplays the coercive and antiliberal aspects of the colonial past. This narrative is part of an overarching narrative regarding the role of markets in history and what led to <indexterm class="singular" xml:id="b-9781474207300-IDX-554">
            <primary>Europe</primary>
          </indexterm>Europe’s take-off. Historian Kenneth <indexterm class="singular" xml:id="b-9781474207300-IDX-1514">
            <primary>Pomeranz, Kenneth</primary>
          </indexterm>Pomeranz exams the roots of what he calls “the great divergence,” the title of his book examining Europe’s rise. While there is no single nor simple answer to why Europe took off economically, he notes scholarly literature’s overemphasis on market forces as having led industrialization in Britain and in Europe more broadly. As historians looked to previous centuries for the seeds of the West’s rise, which germinated in the nineteenth and twentieth centuries, he argues, … the more market dynamics appear even amid supposedly hostile medieval culture and institutions, the more tempting it has been to make market-driven growth the <emphasis role="italic">entire</emphasis> story of European development, ignoring the messy details and mixed effects of numerous government policies and local customs” (<link linkend="b-9781474207300-ref456" role="bib">Pomeranz 2000</link>: 5).</para>
<para xml:id="b-9781474207300-357">Pomeranz also notes that—like the story of trade examined in this chapter—the historical narrative explaining western Europe’s rise serves a current <?page value="52"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-5008">
            <primary>World War II</primary>
          </indexterm>purpose: … an increasingly exclusive focus on private initiatives has not only provided an enviably clear story line, but a story line compatible with currently predominant neoliberal ideas” (2000: 4).</para>
</section>
<section xml:id="b-9781474207300-358">
<info xml:id="b-9781474207300-359">
<title xml:id="b-9781474207300-360">Economic Liberalism before the Fall</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-361">The dominant narrative, focusing on trade and investment liberalization, thus skims over these substantial caveats. After all, there are dramatic events to describe: beneficial and expanding <indexterm class="singular" xml:id="b-9781474207300-IDX-749">
            <primary>globalization</primary>
          </indexterm>globalization cut short by cataclysmic <indexterm class="startofrange" xml:id="b-9781474207300-IDX-733">
            <primary>Germany</primary>
            <secondary>war reparations</secondary>
          </indexterm>war, only to rise again, falling to the <indexterm class="singular" xml:id="b-9781474207300-IDX-816">
            <primary>Great Depression</primary>
          </indexterm>Great Depression and the Second <indexterm class="singular" xml:id="b-9781474207300-IDX-2056">
            <primary>World War I</primary>
          </indexterm>World War, and then redemption: globalization’s spread and with it, prosperity. Due to the rapid increases in <indexterm class="singular" xml:id="b-9781474207300-IDX-1845">
            <primary>transportation</primary>
          </indexterm>transportation and <indexterm class="singular" xml:id="b-9781474207300-IDX-393">
            <primary>communication</primary>
          </indexterm>communication technologies in the nineteenth century (ever more efficient steam ships, the expansion of trains, the dissemination of telegraph and then telephone technology), the world had shrunk to a degree not possible in previous eras.</para>
<para xml:id="b-9781474207300-362">Many but all not major economies followed more liberalized trade and investment policies.<footnote label="4" role="end-bk-note" xml:id="b-9781474207300-fn2_4">
            <para xml:id="b-9781474207300-363">Trade in Europe became more open with the 1860 Treaty of Commerce between France and Great Britain and the subsequent rush of other European countries seeking to be included in an increasingly integrated European market through a network of trade agreements (<link linkend="b-9781474207300-ref351" role="bib">Lazer 1999</link>: 447–8).</para>
          </footnote> Despite caveats about continued trade barriers, the world had shrunk in terms of transportation, communication, and tariff policy. John Maynard <indexterm class="singular" xml:id="b-9781474207300-IDX-1095">
            <primary>Keynes, John Maynard</primary>
          </indexterm>Keynes captured the spirit of the pre-First World War era of globalization—liberalism before the fall—as it has been mythologized.</para>
<blockquote xml:id="b-9781474207300-364">
<para xml:id="b-9781474207300-365">The inhabitant of London could order by telephone, sipping his morning tea in bed, the various products of the whole earth, in such quantity as he might see fit, and reasonably expect their early delivery upon his doorstep; he could at the same moment and by the same means adventure his wealth in the natural resources and new enterprises of any quarter of the world, and share, without exertion or even trouble, in their prospective fruits and advantages; or he could decide to couple the security of his fortunes with the good faith of the townspeople of any substantial municipality in any continent that fancy or information might recommend … But most important of all, he regarded this state of affairs as normal, certain, and permanent, except in the direction of further improvement, and any deviation from it as aberrant, scandalous, and avoidable (<link linkend="b-9781474207300-ref329" role="bib">Keynes 1920</link>: 6).</para>
</blockquote>
<para role="fullOut" xml:id="b-9781474207300-366">Keynes’ point was, of course, that this did come crashing down with the First World War and that he foresaw the structural problems from the coming prosperity: namely burdening Germany with reparations that would ruin its economy.</para>
<para xml:id="b-9781474207300-367">Keynes’ arguments against reparations had already failed to change the minds of policymakers when he raised them as an official in the British Treasury Department while Britain negotiated the terms of the peace. He resigned when he could not convince his government that requiring Germany to pay <indexterm class="endofrange" startref="b-9781474207300-IDX-772" xml:id="b-9781474207300-IDX-end77"/>reparations <?page value="53"?>far in excess of its ability to pay would be ruinous. His book, <emphasis role="italic">The Economic Consequences of the Peace</emphasis>, written in 1919 and published in 1920, was intended to highlight what to him was clearly folly. The book made Keynes a well-known figure, and his wisdom about German war reparations was later shown to be prescient. This set him on the path to being the most important economic figure of the century.</para>
</section>
<section xml:id="b-9781474207300-368">
<info xml:id="b-9781474207300-369">
<title xml:id="b-9781474207300-370">A Return to Normalcy?</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-371">But his book’s cautions about reparations did not prevent the prosperity of the 1920s from creating societal amnesia about globalization’s fragility. The recovery from the war in the 1920s seemed genuine to most contemporary observers and expanding economic levels of trade and investment seemed like a “return to normalcy,” to borrow a slogan from Warren <indexterm class="singular" xml:id="b-9781474207300-IDX-852">
            <primary>Harding, Warren</primary>
          </indexterm>Harding’s successful 1920 presidential campaign. Part of that normalcy, to observers at the time, was the continued close economic relationship between western colonial powers and their colonies, former colonies, or some other imperial arrangement, such as the mandates. Much of that economic relationship consisted of primary products exported to the metropole countries for industrial production. <indexterm class="singular" xml:id="b-9781474207300-IDX-430">
            <primary>cotton</primary>
          </indexterm>Cotton and <indexterm class="singular" xml:id="b-9781474207300-IDX-1587">
            <primary>rubber</primary>
          </indexterm>rubber are two prominent examples (Figure <indexterm class="endofrange" startref="b-9781474207300-IDX-733" xml:id="b-9781474207300-IDX-end68"/>2.3).</para>
<figure label="2.3" xml:id="b-9781474207300-fig2_3">
<info xml:id="b-9781474207300-372">
<title xml:id="b-9781474207300-373">A woman farmer taps dripping resin from a rubber tree in a plantation on Pulau Langkawi Island, Malaysia. Credit: In Pictures Ltd./Corbis via Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-374">
<imageobject xml:id="b-9781474207300-375">
<imagedata align="center" fileref="images/fig2_3.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<?page value="54"?>
<para xml:id="b-9781474207300-377">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-615">
            <primary>France</primary>
          </indexterm>Economic relations between colonial and other dominions and the metropole remained important and indeed, at least for the Allied victors of the First <indexterm class="singular" xml:id="b-9781474207300-IDX-2057">
            <primary>World War I</primary>
          </indexterm>World War, had expanded. Germany’s West and East African colonies were transferred through the <indexterm class="singular" xml:id="b-9781474207300-IDX-1153">
            <primary>League of Nations</primary>
          </indexterm>League of Nations’ mandate system, as were the holdings of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1453">
            <primary>Ottoman Empire</primary>
          </indexterm>Ottoman <indexterm class="singular" xml:id="b-9781474207300-IDX-727">
            <primary>Germany</primary>
            <secondary>empire</secondary>
          </indexterm>empire first envisaged by <indexterm class="singular" xml:id="b-9781474207300-IDX-1766">
            <primary>Sykes-Picot Agreement</primary>
          </indexterm>Sykes-Picot in 1916, into largely British and French authority. Their authority over these “new” lands was nominally with the intent of independence, but in reality remained quite colonial, to the dismay of many living there who hoped for more rapid independence. <indexterm class="singular" xml:id="b-9781474207300-IDX-1429">
            <primary>oil</primary>
          </indexterm>Oil had been discovered in commercially viable amounts in <indexterm class="singular" xml:id="b-9781474207300-IDX-1008">
            <primary>Iran</primary>
          </indexterm>Iran in 1901 (<link linkend="b-9781474207300-ref224" role="bib">Gasiorowski 2017</link>: 292). While there were hopes for commercial oil in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1167">
            <primary>Levant</primary>
          </indexterm>Levant and in the <indexterm class="singular" xml:id="b-9781474207300-IDX-120">
            <primary>Arabian Peninsula</primary>
          </indexterm>Arabian Peninsula, commercially viable amounts of oil would not be discovered there until the 1930s.<footnote label="5" role="end-bk-note" xml:id="b-9781474207300-fn2_5">
            <para xml:id="b-9781474207300-378">More specifically, oil was discovered in commercially viable amounts in Bahrain in 1932, Iraq in 1934, and in Kuwait and Saudi Arabia in 1938 (<link linkend="b-9781474207300-ref597" role="bib">Yergin 1991</link>: 300; <link linkend="b-9781474207300-ref13" role="bib">Ahram 2017</link>: 258; <link linkend="b-9781474207300-ref153" role="bib">Crystal 2017</link>: 362).</para>
          </footnote> British oil interests in Iran would be facilitated by a British military presence in the Levant. This Levantine British presence would also secure trade with <indexterm class="singular" xml:id="b-9781474207300-IDX-922">
            <primary>India</primary>
          </indexterm>India, which was seen as more commercially important to <indexterm class="singular" xml:id="b-9781474207300-IDX-773">
            <primary>Great Britain</primary>
          </indexterm>Britain than was the <indexterm class="singular" xml:id="b-9781474207300-IDX-1271">
            <primary>Middle East</primary>
          </indexterm>Middle East.</para>
<para xml:id="b-9781474207300-379">Metropole countries had been quite reliant on their trade with their colonies and it was widely perceived that this would continue, despite lip service about <indexterm class="singular" xml:id="b-9781474207300-IDX-1634">
            <primary>self-determination</primary>
          </indexterm>self-determination. Why would it change? After all, colonization was widely perceived in metropole countries as being good for both sides and these holdings were important economically for the metropole countries. John <indexterm class="singular" xml:id="b-9781474207300-IDX-1565">
            <primary>Ravenhill, John</primary>
          </indexterm>Ravenhill notes:</para>
<blockquote xml:id="b-9781474207300-380">
<para xml:id="b-9781474207300-381">For the early European industrializers, trade with their colonies, dominions, or with other lands of recent European settlement, such as Argentina, was more important than trade with other industrialized countries. For the United Kingdom, a larger share of imports was contributed by Argentina, Australia, Canada and India together than by the United States, despite the latter’s importance in British imports of cotton for its burgeoning textiles industry. These four countries also took five times the American share of British exports in 1916. Similarly, Algeria was a larger market for French exports in 1913 than was the United States (2011: 10).</para>
</blockquote>
<para role="fullOut" xml:id="b-9781474207300-382">The British government wanted the public to view their colonies as beneficial, as the <indexterm class="singular" xml:id="b-9781474207300-IDX-263">
            <primary>British Empire Marketing Board</primary>
          </indexterm>British Empire Marketing Board’s 1927 poster “Jungles To-day are Gold Mines To-morrow” attests, complete with stereotyped representations of indigenous Africans—presumably traders—and a list of trade values under the heading “Tropical African Colonies in Account with the Home Country” (<link linkend="b-9781474207300-fig2_4" role="figure">Figure 2.4</link>). In case the viewer missed the banner declaring “growing markets for our good,” the trade values for 1895, 1905, 1910, 1915, and 1925 are listed. In four of the five years, Britain had a trade surplus with these colonies and over the thirty-year period, the nominal value of trade went up ten-fold (<link linkend="b-9781474207300-ref84" role="bib">British National Archives, n.d.</link>).</para>
<?page value="55"?>
<figure label="2.4" xml:id="b-9781474207300-fig2_4">
<info xml:id="b-9781474207300-383">
<title xml:id="b-9781474207300-384">Empire Marketing Board 1927–33 poster. Credit: British National Archives.</title>
</info>
<mediaobject xml:id="b-9781474207300-385">
<imageobject xml:id="b-9781474207300-386">
<imagedata align="center" fileref="images/fig2_4.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-388">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-5009">
            <primary>World War II</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-584">
            <primary>farming</primary>
          </indexterm>The economic growth and expanding economic liberalism that passed for normalcy in the 1920s would later seem like an aberration. The <indexterm class="startofrange" xml:id="b-9781474207300-IDX-817">
            <primary>Great Depression</primary>
          </indexterm>Great Depression, the rise of trade and monetary nationalism, the spread of <indexterm class="singular" xml:id="b-9781474207300-IDX-587">
            <primary>fascism</primary>
          </indexterm>fascism, and, of course, the Second World War made it clear. The epic of <indexterm class="singular" xml:id="b-9781474207300-IDX-669">
            <primary>Free Trade</primary>
          </indexterm>free trade goes to great lengths to show that the all-too human response to economic crisis—trade <indexterm class="singular" xml:id="b-9781474207300-IDX-1840">
            <primary>trade</primary>
            <secondary>protectionism</secondary>
          </indexterm>protectionism—was flawed. It was the largest economy in the world and the largest trader, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1906">
            <primary>United States</primary>
          </indexterm>United States, which set rising protectionism into motion.</para>
</section>
<section xml:id="b-9781474207300-389">
<info xml:id="b-9781474207300-390">
<title xml:id="b-9781474207300-391">Sins against Free Trade</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-392">The Great Depression generated an existential challenge to many domestic producers. Agricultural prices dropped substantially, proving disastrous to farmers in both colonial and metropole economies. Industrial prices also dropped as demand evaporated. This increased pressure on the US <indexterm class="singular" xml:id="b-9781474207300-IDX-1934">
            <primary>United States</primary>
            <secondary>Congress</secondary>
          </indexterm>Congress to limit the damage done by imports. The Tariff Act of 1930, better known as the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1668">
            <primary>Smoot-Hawley Tariff Act</primary>
          </indexterm>Smoot-Hawley tariff act (or simply Smoot-Hawley), so named after its congressional co-sponsors, raised tariffs in order to protect struggling US farmers and manufacturers from low prices. The bill began with the aim of protecting farmers—global <indexterm class="singular" xml:id="b-9781474207300-IDX-2017">
            <primary>wheat</primary>
          </indexterm>wheat and <indexterm class="singular" xml:id="b-9781474207300-IDX-1752">
            <primary>sugar</primary>
          </indexterm>sugar prices, for instance, were depressed—but was logrolled into protecting a wide swath of US agriculture and industry. In the Senate alone, there were some 1,200 amendments to the <?page value="56"?>bill and the public record of the hearings on the bill was nearly 20,000 pages long (<link linkend="b-9781474207300-ref180" role="bib">Eichengreen 1986</link>: 5). This gave US trading partners sufficient warning that their fragile economies were about to be harmed by the United States. <indexterm class="singular" xml:id="b-9781474207300-IDX-158">
            <primary>Australia</primary>
          </indexterm>Australia, <indexterm class="singular" xml:id="b-9781474207300-IDX-299">
            <primary>Canada</primary>
          </indexterm>Canada, <indexterm class="singular" xml:id="b-9781474207300-IDX-436">
            <primary>Cuba</primary>
          </indexterm>Cuba, <indexterm class="singular" xml:id="b-9781474207300-IDX-616">
            <primary>France</primary>
          </indexterm>France, <indexterm class="singular" xml:id="b-9781474207300-IDX-1032">
            <primary>Italy</primary>
          </indexterm>Italy, <indexterm class="singular" xml:id="b-9781474207300-IDX-1261">
            <primary>Mexico</primary>
          </indexterm>Mexico, <indexterm class="singular" xml:id="b-9781474207300-IDX-1376">
            <primary>New Zealand</primary>
          </indexterm>New Zealand, <indexterm class="singular" xml:id="b-9781474207300-IDX-1518">
            <primary>Portugal</primary>
          </indexterm>Portugal, <indexterm class="singular" xml:id="b-9781474207300-IDX-1718">
            <primary>Spain</primary>
          </indexterm>Spain, <indexterm class="singular" xml:id="b-9781474207300-IDX-1762">
            <primary>Switzerland</primary>
          </indexterm>Switzerland, and others moved toward protectionism in the wake of the law (<link linkend="b-9781474207300-ref298" role="bib">Irwin 2011</link>: 168–70; <link linkend="b-9781474207300-ref105" role="bib">Carbaugh 2015</link>: 183). In Canada, Smoot-Hawley became a campaign issue in the 1930 election before it had been signed into law in the United States. It helped the protectionist Conservative Party come to power and it subsequently raised <indexterm class="singular" xml:id="b-9781474207300-IDX-1790">
            <primary>tariffs</primary>
          </indexterm>tariffs (McDonald <emphasis role="italic">et al.</emphasis> 1997: 803). The US lurch toward protectionism led twenty-five other countries to respond with higher tariffs of their own (<link linkend="b-9781474207300-ref105" role="bib">Carbaugh 2015</link>: 183). Moreover, other trade developments damaged world trade in this era. Some countries simply turned away from the United States by extending trade preferences to select other countries. For instance, <indexterm class="singular" xml:id="b-9781474207300-IDX-774">
            <primary>Great Britain</primary>
          </indexterm>Great Britain and its former colonies met in Ottawa in 1932 and agreed to reduce tariffs between one another. “Although imperial preferences were not established in direct retaliation against the United States, the international climate against the Smoot-Hawley tariff helped give rise to it” (<link linkend="b-9781474207300-ref299" role="bib">Irwin 2012</link>: 18).</para>
<para xml:id="b-9781474207300-393">Smoot-Hawley and the retaliation it inspired had the collective effect of raising taxes on consumers during a depression. To be sure, this was the wrong policy to help alleviate the Great Depression, but the negative economic effects of Smoot-Hawley have long been exaggerated. The Smoot-Hawley tariff act raised tariffs marginally, from approximately 38 percent to 45 percent on dutiable items<footnote label="6" role="end-bk-note" xml:id="b-9781474207300-fn2_6">
            <para xml:id="b-9781474207300-394">Average tariffs can be calculated with various methods, so there are different numbers cited for the impact of Smoot-Hawley. The tariff rate on “dutiable items” excludes any items imported with zero duties in calculating the average. Under Smoot-Hawley this rose to just over 47 percent in 1930, according to Douglas Irwin. He further notes that this number rose to 60 percent in late 1932 because the prices for the underlying goods dropped dramatically and some of the tariffs were specific tariffs (a specific tariff places a dollar amount per unit of imports), not just <emphasis role="italic">ad valorem</emphasis> tariffs (a tariff charged as a percentage of the imported product’s value) (<link linkend="b-9781474207300-ref297" role="bib">Irwin 1998</link>: 327). Because prices dropped substantially during the Great Depression, any specific import tariff would increase as a percentage of the price of the product. This part of the tariff increase after Smoot-Hayley would have taken place with or without Smoot-Hawley for specific tariffs (1998: 327).</para>
          </footnote> (<link linkend="b-9781474207300-ref181" role="bib">Eichengreen 2015</link>: 120–2). Tariffs, in other words, were already quite high and Smoot-Hawley is thought to have had only minor investment repercussions. Its damage was more nuanced. It increased international friction, engendered retaliation instead of conciliation, and ended the prospects for coordinating responses to reverse the economic decline just when international coordination was most desperately needed (<link linkend="b-9781474207300-ref181" role="bib">Eichengreen 2015</link>: 120–2).</para>
<para xml:id="b-9781474207300-395">What is not exaggerated is the scar this left on economic policymakers. The lesson that protectionism dangerously led to more protectionism and that it ultimately benefits no one became as entrenched as the belief that it was a mistake to appease <indexterm class="singular" xml:id="b-9781474207300-IDX-870">
            <primary>Hitler, Adolph</primary>
          </indexterm>Hitler at Munich. Even though trade’s collapse in the Great Depression cannot be correctly blamed on Smoot-Hawley, a global trade decline of approximately two-thirds between 1929 and 1934 was a searing event and policymakers had a Pavlovian response (<link linkend="b-9781474207300-ref588" role="bib">Winham 2009</link>: 13). The socialization regarding Smoot-Hawley became so embedded in economic policy lore that in 1993, sixty-three years after Smoot-Hawley’s passage, Smoot-Hawley was the defining moment in a showdown debate over the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1413">
            <primary>North American Free Trade Agreement, NAFTA</primary>
          </indexterm>North American Free Trade Agreement (NAFTA) between Democratic Vice President Al <indexterm class="singular" xml:id="b-9781474207300-IDX-761">
            <primary>Gore, Al</primary>
          </indexterm>Gore and third-party presidential candidate Ross <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1495">
            <primary>Perot, Ross</primary>
          </indexterm>Perot. During the debate, Gore gave Perot a photograph of Smoot and Hawley as a gift, explaining to the audience that <?page value="57"?>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-5010">
            <primary>World War II</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-564">
            <primary>European Union, EU</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1348">
            <primary>Nazis</primary>
            <secondary>ideology</secondary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2043">
            <primary>World Trade Organization, WTO</primary>
          </indexterm>Perot’s opposition to NAFTA was akin to Smoot and Hawley’s disastrous <indexterm class="singular" xml:id="b-9781474207300-IDX-1540">
            <primary>protectionism</primary>
          </indexterm>protectionism. Whether the parallel was true was immaterial; Perot had been painted with the negative connotations of protectionism by the comparison. The role of Smoot-Hawley in the epic story of trade is cautionary and remains powerful. Barry <indexterm class="singular" xml:id="b-9781474207300-IDX-527">
            <primary>Eichengreen, Barry</primary>
          </indexterm>Eichengreen, who persuasively argues that Smoot-Hawley’s economic impact is exaggerated, also notes its continued socializing role for policymakers everywhere.</para>
<blockquote xml:id="b-9781474207300-396">
<para xml:id="b-9781474207300-397">Thus the textbook assertion that Smoot-Hawley worsened the Depression in the United States is bad history in the service of good policy. Although there is no evidence that the tariff had a significant negative impact on the American economy, its ritual invocation helped policy makers resist the protectionist temptation in 2009. That in turn made it easier to mount an internationally coordinated response (2015: 122).</para>
</blockquote>
<para role="fullOut" xml:id="b-9781474207300-398">The <indexterm class="singular" xml:id="b-9781474207300-IDX-832">
            <primary>Group of</primary>
          </indexterm>Group of 20 (G20)—whose members include the EU and nineteen of the most significant national economies—pledged not to engage in trade protectionism in the face of the <indexterm class="singular" xml:id="b-9781474207300-IDX-821">
            <primary>Great Recession</primary>
          </indexterm>Great Recession. To facilitate this, the G20 has the WTO issue a report every six months listing all restrictive trade measures the G20 members have taken. This is not foolproof, of course, and in the 2017 G20 meeting in <indexterm class="singular" xml:id="b-9781474207300-IDX-717">
            <primary>Germany</primary>
          </indexterm>Germany, the Trump administration successfully pressed the G20’s communique to weaken its free-trade pledge by removing language about the G20 goal being to “avoid all forms of protectionism” (<link linkend="b-9781474207300-ref89" role="bib">Buergin <emphasis role="italic">et al.</emphasis> 2017</link>; <link linkend="b-9781474207300-ref221" role="bib">G20 2017</link>: 1).</para>
</section>
<section xml:id="b-9781474207300-399">
<info xml:id="b-9781474207300-400">
<title xml:id="b-9781474207300-401">Redemption</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-402">Indeed, it was the perceived evils of the Smoot-Hawley tariff act, the subsequent lack of coordinated international response to end the Great Depression, and the view that economic collapse strengthens political extremism (e.g., <indexterm class="singular" xml:id="b-9781474207300-IDX-2012">
            <primary>Weimar Republic</primary>
          </indexterm>Weimar Germany’s economic chaos assisting Nazism’s rise) that led policymakers to meet at <indexterm class="startofrange" xml:id="b-9781474207300-IDX-253">
            <primary>Bretton Woods Conference</primary>
          </indexterm>Bretton Woods, New Hampshire in 1944. They proposed economic institutions to facilitate economic cooperation and coordination after the war. They sought cooperation and coordination sufficient to gain the benefits of capitalism—innovation and efficiency—while tempering capitalism’s unacceptable instability. Thus the major post-Second World War economic institutions were born: the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-997">
            <primary>International Monetary Fund, IMF</primary>
          </indexterm>International Monetary Fund (IMF), the International Bank for Reconstruction and Development (IBRD), better known as the <indexterm class="singular" xml:id="b-9781474207300-IDX-2042">
            <primary>World Bank</primary>
          </indexterm>World Bank, and, after a proposed <indexterm class="singular" xml:id="b-9781474207300-IDX-998">
            <primary>International Trade Organization, ITO</primary>
          </indexterm>International Trade Organization (ITO) could not make it through the US <indexterm class="singular" xml:id="b-9781474207300-IDX-1935">
            <primary>United States</primary>
            <secondary>Congress</secondary>
          </indexterm>Congress, the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-709">
            <primary>General Agreement on Tariff and Trade, GATT</primary>
          </indexterm>General Agreement on Tariff and Trade (GATT).<footnote label="7" role="end-bk-note" xml:id="b-9781474207300-fn2_7">
            <para xml:id="b-9781474207300-403">The ITO’s inability to get through the US Congress is due to those that thought it too protectionist and insufficiently protectionist. There were also fears in Congress that a supranational organization would infringe on US sovereignty (<link linkend="b-9781474207300-ref544" role="bib">Toye 2012</link>: 86, 97).</para>
          </footnote> The GATT was supposed to be a temporary mechanism to reduce tariffs and was intended to be subsumed within the more expansive ITO once the ITO wound its way <indexterm class="endofrange" startref="b-9781474207300-IDX-1413" xml:id="b-9781474207300-IDX-end147"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1495" xml:id="b-9781474207300-IDX-end159"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1668" xml:id="b-9781474207300-IDX-end175"/>through <?page value="58"?>the ratification process (<link linkend="b-9781474207300-ref172" role="bib">Drache 2000</link>: 7; Irwin <link linkend="b-9781474207300-ref300" role="bib">
            <emphasis role="italic">et al.</emphasis> 2008</link>: 112). Instead, it became permanent and in 1995, a few years before turning fifty, the GATT evolved into the <indexterm class="singular" xml:id="b-9781474207300-IDX-2058">
            <primary>World War I</primary>
          </indexterm>World Trade Organization (WTO). These institutions fit into the larger attempt by (especially) the <indexterm class="singular" xml:id="b-9781474207300-IDX-1907">
            <primary>United States</primary>
          </indexterm>United States and Britain of creating a strong global economy to make extremism (<indexterm class="singular" xml:id="b-9781474207300-IDX-402">
            <primary>communism</primary>
          </indexterm>communism) less attractive. Of course, there were commercial interests too; the institutions were complementary in that access to (initially US) capital would help countries rebuild and thus revert to being customers again. Stable foreign exchange markets fostered by the IMF, anchored to the US dollar, would also facilitate trade, a direct reaction against the currency wars that further hobbled trade during the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-775">
            <primary>Great Britain</primary>
          </indexterm>Great Depression. These institutions were clearly dominated by the western industrial powers, especially the United States. Membership was open, but decision-making in them remained in the West. To economic liberals, these institutions underpinned cooperation that led to the strong economic growth throughout the <indexterm class="singular" xml:id="b-9781474207300-IDX-376">
            <primary>Cold War</primary>
          </indexterm>Cold War. Even other western powers—despite their own privileged position in these institutions—had reservations that the already substantial US economic power was growing. For example, former French President Valéry Giscard <indexterm class="singular" xml:id="b-9781474207300-IDX-482">
            <primary>d’Estaing, Valéry Giscard</primary>
          </indexterm>d’Estaing famously said the US dollar acting as the anchor in the Bretton Woods system gave the United States an “exorbitant privilege.” The view from former colonies, many of which became newly independent in this timeframe and had no privileged position in these institutions, was more critical. There, the institutions came to be seen as proxies for the US approach to economic development: that poor countries should develop with less government intervention in the economy.</para>
<para xml:id="b-9781474207300-404">The epic story of trade describes the Bretton Woods Conference and the institutions it established as redemption against the sins of the interwar beggar-thy-neighbor policies. They further point to the “saintly” John Maynard <indexterm class="singular" xml:id="b-9781474207300-IDX-1096">
            <primary>Keynes, John Maynard</primary>
          </indexterm>Keynes—a major influence at Bretton Woods—being vindicated. His advice about German <indexterm class="singular" xml:id="b-9781474207300-IDX-734">
            <primary>Germany</primary>
            <secondary>war reparations</secondary>
          </indexterm>war reparations after the First World War, which policymakers ignored in 1919 to disastrous effect, instead largely became policy at end of the Second World War and has been viewed as having helped heal and unite Europe after the war. Indeed, it has become part of the larger story that Keynes helped save capitalism from its own worst excesses.<footnote label="8" role="end-bk-note" xml:id="b-9781474207300-fn2_8">
            <para xml:id="b-9781474207300-405">The elements that include him saving capitalism from its worst excesses include the establishment of the Bretton Woods institutions, which created both stability and access to capital, at least for a time, and Keynesianism, using government to counter-cyclically simulate (or dampen) markets. Keynesianism has provided a rationale for governments to intervene in markets to stabilize them, but the so-called Great Recession was a sobering demonstration that policymakers are not particularly capable of taming “irrationality” out of markets.</para>
          </footnote> The story also includes a largely benevolent United States serving as a market of last resort, a lender of last resort, and a guarantor of military security. The United States was benevolent in the sense it kept the trading system largely open and stable since the Second World War. This benevolence did not help everyone and it certainly coincided with US self-interest by bolstering anticommunist governments and creating customers for US producers. However, the Bretton Woods institutions coupled with the <indexterm class="singular" xml:id="b-9781474207300-IDX-1230">
            <primary>Marshall Plan</primary>
          </indexterm>Marshall Plan had another effect: it bought the western colonial powers time and, more importantly, money, to delay the independence of their colonies. Exhausted from the Second World War, western colonial powers struggled to retain their colonies. The United States was publicly calling <indexterm class="endofrange" startref="b-9781474207300-IDX-253" xml:id="b-9781474207300-IDX-end19"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-817" xml:id="b-9781474207300-IDX-end86"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-997" xml:id="b-9781474207300-IDX-end106"/>on <?page value="59"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1311">
            <primary>Most Favored Nation Status, MFN</primary>
          </indexterm>them to decolonize, but also handing colonial powers financing that allowed colonialism to continue. So, too, did direct US aid for specific colonial holdings in the face of communist insurgencies such as aid to <indexterm class="singular" xml:id="b-9781474207300-IDX-617">
            <primary>France</primary>
          </indexterm>France in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1977">
            <primary>Vietnam</primary>
          </indexterm>Vietnam, to the <indexterm class="singular" xml:id="b-9781474207300-IDX-1365">
            <primary>Netherlands</primary>
          </indexterm>Netherlands in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-977">
            <primary>Indonesia</primary>
          </indexterm>Indonesia, and to Britain in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1213">
            <primary>Malaysia</primary>
          </indexterm>Malaysia (Go 2011: 140).</para>
</section>
<section xml:id="b-9781474207300-406">
<info xml:id="b-9781474207300-407">
<title xml:id="b-9781474207300-408">Implementing and Deepening Redemption</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-409">True to its goals, the GATT did indeed facilitate the reduction of tariffs in the post-Second World War era. This was especially true for trade among the major industrial economies that established GATT and dominated its membership in its early decades. It should be added that the GATT had a running start. The lessons of <indexterm class="singular" xml:id="b-9781474207300-IDX-1669">
            <primary>Smoot-Hawley Tariff Act</primary>
          </indexterm>Smoot-Hawley had already been learned before the Bretton Woods conference and before the start of GATT; <indexterm class="singular" xml:id="b-9781474207300-IDX-1936">
            <primary>United States</primary>
            <secondary>Congress</secondary>
          </indexterm>Congress reversed Smoot-Hawley’s protectionism with the <indexterm class="singular" xml:id="b-9781474207300-IDX-1567">
            <primary>Reciprocal Trade Agreements Act of 1934</primary>
          </indexterm>Reciprocal Trade Agreements Act of 1934, which authorized the president to lower tariffs with other countries through bilateral agreements, so long as there was reciprocity. The United States entered into thirty-two such agreements between 1934 and 1947, when the GATT began, bringing down the tariff on dutiable items by about half (<link linkend="b-9781474207300-ref105" role="bib">Carbaugh 2015</link>: 185).</para>
<para xml:id="b-9781474207300-410">But to be sure, the GATT itself lowered tariff rates substantially and this was an achievement. Trade barriers became lower than at any time in history. The GATT made trade far more rules-based, theoretically minimizing the role power—especially economic power—would play in trade relations more than in any previous trade governance (leaving plenty of room for powerful countries to dominate weaker ones as previous trade governance was scant, essentially allowing the codification of colonialism, for instance). The GATT sought to reduce the role of power through its core principles of reciprocity (all countries will lower barriers toward one another) and non-discrimination, which includes national treatment and the granting of most favored nation (MFN) status (<link linkend="b-9781474207300-ref37" role="bib">Baldwin 2016b</link>: 97). National treatment means governments will not distinguish between foreign and domestic production once the foreign product has been imported. For instance, a law on fuel formulations that falls negatively on imported fuel but not domestic fuel would violate this principle.<footnote label="9" role="end-bk-note" xml:id="b-9781474207300-fn2_9">
            <para xml:id="b-9781474207300-411">In fact, the first ruling by the WTO’s dispute resolution body was over this very issue. The US Clean Air Act included rules regarding fuel formulations, ostensibly for environmental reasons, and treated imported and domestically produced fuels differently. Venezuela and Brazil took the United States to the WTO dispute resolution mechanism and a WTO legal panel ruled that this was a violation of the non-discrimination principle and the US should change it (or face further legal challenges that could grant Venezuela and Brazil compensation). The US complied with the ruling (WTO 2010).</para>
          </footnote> MFN means that all GATT members, and now all WTO members, will grant other members the lowest tariff rate they grant to any other member (with some exceptions).<footnote label="10" role="end-bk-note" xml:id="b-9781474207300-fn2_10">
            <para xml:id="b-9781474207300-412">As with all things trade, there are exceptions: members may grant better than MFN treatment if they are in a bilateral or multilateral reciprocal free trade agreement or members may grant better than MFN treatment to least developed countries through preferential trade agreements (PTAs), also called unilateral preferential trade agreements. The primary program for this at the WTO is the General System of Preferences (GSP), with more recent versions tending to have catchier names such as the EU’s Everything But Arms Initiative or the United States’ Africa Growth and Opportunity Act. These programs let in specific products at reduced or tariff-free levels for poorer WTO countries that meet a given program’s criteria, but not for other WTO members. They are less helpful to poor WTO members than they sound. For instance, the EU’s Everything But Arms Initiative would be more accurately named Everything But Arms and Agriculture. The programs tend to include more primary products than finished goods so as to not compete with domestic production in the importing country. Should any category of imports grow uncomfortably large, the importing country can, of course, unilaterally alter the program including what countries are granted the preferences and how much.</para>
          </footnote> Thus, if a member lowers its tariffs toward one member country it does so for all members, allowing <indexterm class="singular" xml:id="b-9781474207300-IDX-1169">
            <primary>liberalization</primary>
          </indexterm>liberalization to ripple across the organization’s membership. Another GATT principle is that members are given a degree of flexibility in granting themselves a safety valve to delay the impact of greater liberalization. Importantly, the GATT’s safety valve mechanisms are rules-based and can be challenged by other members if perceived as being abused. This rules-based flexibility gives countries greater confidence to agree to liberalization about which they would otherwise be more <indexterm class="endofrange" startref="b-9781474207300-IDX-775" xml:id="b-9781474207300-IDX-end78"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2043" xml:id="b-9781474207300-IDX-end219"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-5010" xml:id="b-9781474207300-IDX-end5010"/>hesitant.<footnote label="11" role="end-bk-note" xml:id="b-9781474207300-fn2_11">
            <para xml:id="b-9781474207300-413">There are other GATT principles that scholars have identified, but there is no one identifiable official list. Richard Baldwin’s schema is useful. He identifies one general overarching principle—that trade should be rules-based not results-based—and five specific principles: nondiscrimination (at the border, it is manifested as MFN and behind the border as national treatment), transparency, reciprocity, flexibility (i.e., safety valves), and consensus decision-making.</para>
          </footnote>
        </para>
<?page value="60"?>
<para xml:id="b-9781474207300-414">While all of this, on the face of it, diminished the role of power in the trade regime, it also facilitated the end of colonial trade preferences for metropole powers. It thus expanded US access to the former colonies of other western colonial powers, despite the US injection of capital into metropole economies that otherwise sustained colonialization (Go 2011: 139–40).</para>
</section>
<section xml:id="b-9781474207300-415">
<info xml:id="b-9781474207300-416">
<title xml:id="b-9781474207300-417">Redemption’s Imperfections: We are all Sinners</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-418">The story of GATT’s success at lowering tariffs is often told with a celebratory tone and includes moral approbation against trade <indexterm class="singular" xml:id="b-9781474207300-IDX-1841">
            <primary>trade</primary>
            <secondary>protectionism</secondary>
          </indexterm>protectionism. But the openness the GATT facilitated must be tempered by the unevenness of trade liberalization. The largest reduction in tariff barriers was in economic sectors that industrialized powers dominated: manufactured goods, while those industries that were opposed to greater trade liberalization and powerful enough to stop it, especially in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1908">
            <primary>United States</primary>
          </indexterm>United States, successfully ensured that their economic sectors were left out of GATT altogether. As the United States (especially) and other industrialized powers were preaching the gospel of free trade, they were also not-so-secretly echoing <indexterm class="singular" xml:id="b-9781474207300-IDX-156">
            <primary>Augustine</primary>
          </indexterm>Augustine’s famous prayer, “Give me chastity and continency, but do not give it yet” ([1631] 1912: 441). <indexterm class="singular" xml:id="b-9781474207300-IDX-1809">
            <primary>textiles</primary>
          </indexterm>Textiles and apparel and <indexterm class="singular" xml:id="b-9781474207300-IDX-47">
            <primary>agriculture</primary>
          </indexterm>agriculture were specifically excluded from GATT and these are the most important economic sectors for developing nations. Textiles and apparel are among the most labor-intensive sectors in the world, thus low-wage developing nations have a competitive advantage. That low wages and poor working conditions are a competitive advantage also means that developing countries have little incentive to regulate labor conditions in these economic sectors. Exploitation is common in the industry: low pay, long hours, and unsafe conditions. Western companies, sadly, also profit from these conditions. Simply put, apparel production moves to <indexterm class="singular" xml:id="b-9781474207300-IDX-189">
            <primary>Bangladesh</primary>
          </indexterm>Bangladesh, for example, precisely for its low wages and lackadaisical regulation.</para>
<para xml:id="b-9781474207300-419">Agriculture is the largest employer in many developing countries and accounts for a high percentage of developing country exports. In fact, an important group of agriculture exporters that are promoting greater liberalization in agricultural trade in ongoing negotiations is the so-called <indexterm class="singular" xml:id="b-9781474207300-IDX-288">
            <primary>Cairns Group</primary>
          </indexterm>Cairns Group. It consists primarily of former western colonies; over half of the 19 Cairns members are former colonies in South and central America: <indexterm class="singular" xml:id="b-9781474207300-IDX-126">
            <primary>Argentina</primary>
          </indexterm>Argentina, <indexterm class="singular" xml:id="b-9781474207300-IDX-232">
            <primary>Bolivia</primary>
          </indexterm>Bolivia, <indexterm class="singular" xml:id="b-9781474207300-IDX-245">
            <primary>Brazil</primary>
          </indexterm>Brazil, <indexterm class="singular" xml:id="b-9781474207300-IDX-341">
            <primary>Chile</primary>
          </indexterm>Chile, <indexterm class="singular" xml:id="b-9781474207300-IDX-382">
            <primary>Colombia</primary>
          </indexterm>Colombia, <indexterm class="singular" xml:id="b-9781474207300-IDX-429">
            <primary>Costa Rica</primary>
          </indexterm>Costa Rica, <indexterm class="singular" xml:id="b-9781474207300-IDX-835">
            <primary>Guatemala</primary>
          </indexterm>Guatemala, <indexterm class="singular" xml:id="b-9781474207300-IDX-1479">
            <primary>Paraguay</primary>
          </indexterm>Paraguay, <indexterm class="singular" xml:id="b-9781474207300-IDX-1498">
            <primary>Peru</primary>
          </indexterm>Peru, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1962">
            <primary>Uruguay</primary>
          </indexterm>Uruguay. Former western colonies in <indexterm class="singular" xml:id="b-9781474207300-IDX-133">
            <primary>Asia</primary>
          </indexterm>Asia make up most of the rest of the group’s membership: Indonesia, Malaysia, <indexterm class="singular" xml:id="b-9781474207300-IDX-1465">
            <primary>Pakistan</primary>
          </indexterm>Pakistan, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1500">
            <primary>Philippines</primary>
          </indexterm>Philippines, and Vietnam (<link linkend="b-9781474207300-ref101" role="bib">Cairns Group, n.d.</link>).</para>
<para xml:id="b-9781474207300-420">The exclusion of textiles and apparel and agriculture from GATT was simply to protect those industries in developed countries. Had they been included in GATT, there would have been no GATT. This demonstrates clearly the <indexterm class="endofrange" startref="b-9781474207300-IDX-709" xml:id="b-9781474207300-IDX-end65"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-977" xml:id="b-9781474207300-IDX-end103"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1213" xml:id="b-9781474207300-IDX-end131"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1977" xml:id="b-9781474207300-IDX-end209"/>degree <?page value="61"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-5011">
            <primary>World War II</primary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-999">
            <primary>International Trade Organization, ITO</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1937">
            <primary>United States</primary>
            <secondary>Congress</secondary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2044">
            <primary>World Trade Organization, WTO</primary>
          </indexterm>to which the GATT was primarily a US creation (and secondarily of other western powers) and that <indexterm class="singular" xml:id="b-9781474207300-IDX-750">
            <primary>globalization</primary>
          </indexterm>globalization in the post-Second World War years would be shaped to benefit it. Simply put, any agreement that threatened US agriculture could not make it through the US <indexterm class="singular" xml:id="b-9781474207300-IDX-1955">
            <primary>United States</primary>
            <secondary>Senate</secondary>
          </indexterm>Senate and, given US economic dominance during GATT’s creation, there would be no GATT. It remains the case today that any new WTO agreement would also have to get through the US Senate where agricultural states are extremely overrepresented: the top four per capita agriculture producers have just over two percent of the national population, but have eight percent of the Senate’s representation. This is equal to the Senate representation of the four most populous states, despite the fact that they account for 33 percent of the population (<link linkend="b-9781474207300-ref558" role="bib">US Census Bureau 2016</link>; <link linkend="b-9781474207300-ref559" role="bib">USDA Economic Research Service 2016</link>).<footnote label="12" role="end-bk-note" xml:id="b-9781474207300-fn2_12">
            <para xml:id="b-9781474207300-421">The top four agricultural sales per capita states are, in descending order, Nebraska, South Dakota, North Dakota, and Iowa. The four most populous states are California, Texas, Florida, and New York. Population is from US Census Bureau estimates for 2016 and the farm data is based on 2015 gross receipts. National population figures used for calculations include only those populations with representation in the US Senate (i.e., Washington DC and Puerto Rico were excluded from the data).</para>
          </footnote> Agreements that US agriculture broadly dislikes will not make it through the US Senate. Similarly, textile and apparel producers were under enormous threat from imports and were also among the most powerful lobbies in Washington for much of the <indexterm class="singular" xml:id="b-9781474207300-IDX-377">
            <primary>Cold War</primary>
          </indexterm>Cold War era. Dynamics such as this played out in some other industrial countries, but with the US as the economic giant of the immediate postwar period, the United States’ domestic political concerns were enough to ensure agriculture and textiles and apparel’s exclusion.</para>
<para xml:id="b-9781474207300-422">As the United States and the other leading industrial countries excluded agriculture and textiles and apparel from the GATT, they preached free trade. In the early GATT negotiating rounds, developing nations were not typically involved at all. But the exclusion of these significant economic sectors, and the preaching about the merits of free trade, continued well after developing countries were more involved in GATT negotiations. The hypocrisy was definitely noticed by developing countries and the sectors’ exclusion led developing countries to further distrust the dominant industrial powers. The distrust continues today and hinders the WTO’s ability to successfully bring the <indexterm class="singular" xml:id="b-9781474207300-IDX-492">
            <primary>Doha Development Agenda, DDA</primary>
          </indexterm>Doha Development Agenda (DDA) negotiations, launched in 2001, to a conclusion.</para>
<para xml:id="b-9781474207300-423">This distrust was made worse because many of the proposals that were initially discussed at Bretton Woods came from developing countries and posed alternatives to orthodox liberal capitalism and were ultimately rejected by developed countries. The most influential developing country voice was that of Raúl <indexterm class="singular" xml:id="b-9781474207300-IDX-1536">
            <primary>Prebish, Raúl</primary>
          </indexterm>Prebish, an Argentine economist with the UN’s <indexterm class="singular" xml:id="b-9781474207300-IDX-515">
            <primary>Economic Commission for Latin America, ECLA</primary>
          </indexterm>Economic Commission for Latin America (ECLA), but there were many others that called for the Bretton Woods institutions to focus more on development, not just the stability of the overall system. US interest in pro-development changes to international economic governance on the road to and at the <indexterm class="singular" xml:id="b-9781474207300-IDX-254">
            <primary>Bretton Woods Conference</primary>
          </indexterm>Bretton Woods Conference was higher than it has typically been portrayed in the scholarship on the subject, in part because that interest diminished as the Cold War became a larger concern (<link linkend="b-9781474207300-ref269" role="bib">Helleiner 2014</link>: 16–22). The ill-fated ITO, a product of the Bretton Woods Conference that could not get US Congressional approval, was certainly <indexterm class="endofrange" startref="b-9781474207300-IDX-1908" xml:id="b-9781474207300-IDX-end200"/>more <?page value="62"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-710">
            <primary>General Agreement on Tariff and Trade, GATT</primary>
          </indexterm>pro-development than either the GATT or the WTO. For instance, the ITO included calls for focusing on full employment and had provisions that considered trade more expansively, including labor standards (<link linkend="b-9781474207300-ref172" role="bib">Drache 2000</link>: 7). The ITO’s developmental bent and more expansive view of trade were anathema to the new Republican majority in the US Congress in 1950 and thus President <indexterm class="singular" xml:id="b-9781474207300-IDX-1851">
            <primary>Truman, Harry S.</primary>
          </indexterm>Truman, who had backed the ITO, stopped seeking its Congressional approval to avoid a significant and public legislative loss. This also underscores the degree to which the GATT was an instrument of the United States. To economic liberals, this was simply the political reality, the level of free trade the GATT created was better than without the GATT. To former colonies, and other developing countries, it underscored that their lack of influence over international economic governance before GATT would continue in the GATT itself.</para>
<para xml:id="b-9781474207300-424">Developing countries would have to wait nearly fifty years for agriculture and textiles and apparel to be included in the GATT as it evolved into the WTO. Even then it required developing countries’ insistence and was a reward for accepting many new provisions they were otherwise unenthusiastic about, but that developed countries strongly sought, such as <indexterm class="startofrange" xml:id="b-9781474207300-IDX-993">
            <primary>Intellectual Property Rights, IPR</primary>
          </indexterm>intellectual property rights (IPRs). To developing countries’ ears, greater protection of copyrights and patents and other IPRs sound like royalties going to the industrialized “North” from the less developed “South” and the South’s governmental resources being drained from the greater administrative costs that enforcing IPRs would entail. Even with the inclusion of agriculture and textiles into the WTO, liberalizing provisions were phased in slowly and the sectors remain among the most protected sectors covered by the WTO.</para>
</section>
<section xml:id="b-9781474207300-425">
<info xml:id="b-9781474207300-426">
<title xml:id="b-9781474207300-427">Redemption gets Complicated</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-428">As the GATT became more successful at lowering industrial <indexterm class="singular" xml:id="b-9781474207300-IDX-1791">
            <primary>tariffs</primary>
          </indexterm>tariffs, countries began to rely on <indexterm class="singular" xml:id="b-9781474207300-IDX-1404">
            <primary>Non-tariff Barriers, NTB</primary>
          </indexterm>non-tariff barriers such as quotas or safety standards to maintain protectionism that was no longer being provided by tariffs. The GATT negotiations therefore turned their attention to lowering non-tariff barriers (NTBs). In fact, much of the GATT/TWO’s development since the 1970s has been focused on reducing or harmonizing non-tariff barriers. This has brought the WTO closer and closer to activities once considered the purview of domestic governments such as environmental or health and safety laws and regulations. This has been controversial and certainly has made achieving consensus on major trade agreements difficult. Also making consensus more difficult is the growing and diversifying membership. When the GATT was established in 1947, there were only twenty-three signatories. As the GATT lowered tariffs in successive negotiating rounds, it also gained members and began taking on additional trade-related issues. By the Kennedy Round of negotiations in <indexterm class="endofrange" startref="b-9781474207300-IDX-999" xml:id="b-9781474207300-IDX-end107"/>the <?page value="63"?>1960s, there were sixty-two members and the agenda was expanding beyond that of previous rounds. By the Tokyo Round in the 1970s, there were over one hundred members and the agenda expanded significantly again with a particular focus on NTBs. By the time the <indexterm class="singular" xml:id="b-9781474207300-IDX-1963">
            <primary>Uruguay Agreement</primary>
          </indexterm>Uruguay Agreement was signed in 1994, there were 123 members (<link linkend="b-9781474207300-ref431" role="bib">OECD 2009</link>: 81). The Uruguay Round negotiations lasted approximately seven and a half years and covered far more issues than past rounds: the establishment of the WTO, a more institutionalized (i.e., quasi-legal) and rigorous dispute resolution mechanism, trade in services, <indexterm class="singular" xml:id="b-9781474207300-IDX-48">
            <primary>agriculture</primary>
          </indexterm>agriculture, <indexterm class="singular" xml:id="b-9781474207300-IDX-1810">
            <primary>textiles</primary>
          </indexterm>textiles and apparel, trade-related aspects of investment, and intellectual property rights (IPRs), among other issues. The Uruguay Round’s legal text, called the final agreement or final act, was 550 pages long, excluding the other WTO ministerial declarations necessary to clarify it (WTO, n.d.). The next round of WTO negotiations was (and continues to be) more complicated. It took years of failed attempts, that included riots by protestors in Geneva and Seattle outside WTO meetings and quieter but more consequential disagreements within the conference halls, before WTO members were ready to launch the next round of talks in 2001. The developing world, though very diverse, was in agreement that the next round of talks would not start without a greater focus on their needs.</para>
<para xml:id="b-9781474207300-429">Developed countries wished to expand the WTO’s agenda further and typically wanted greater access to developing countries’ manufacturing markets, yet were not willing to open their own agricultural markets substantially. Developing countries were not eager to expand the agenda further, and instead wanted greater openness in developed countries’ agriculture markets. This included lower tariffs for developing country agriculture exports, of course, but also a decrease in rich-country agricultural subsidies. These subsidies would turn out to be a major hurdle to starting and completing an agreement. Developing countries also resisted further opening of their own manufacturing markets and, in fact, sought to weaken some other elements of the Uruguay Round.</para>
<para xml:id="b-9781474207300-430">One such call for change arose as part of a global social movement relating to the <indexterm class="singular" xml:id="b-9781474207300-IDX-25">
            <primary>Africa</primary>
            <secondary>HIV/AIDS</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-872">
            <primary>HIV/AIDS</primary>
          </indexterm>HIV/AIDS pandemic. Africa was by far the region most devastated by HIV/AIDS and the area with the fewest resources to adequately respond. As HIV/AIDS-related medications became available, they were well outside the financial reach of most Africans afflicted by the disease and the disease went, essentially, untreated. As protests mounted, lowering drug costs became a major focus of the movement and calls went out to weaken the WTO’s IPR provisions in order get more medicine to African patients. In order to begin the next round of trade negotiations, developed countries did concede that for medical emergencies, countries could produce medicines that would otherwise be a violation of the WTO’s IPR rules.<footnote label="13" role="end-bk-note" xml:id="b-9781474207300-fn2_13">
            <para xml:id="b-9781474207300-431">As it turned out, this was of little help to countries that were so poor so as not to have the capability to produce needed medicines, emergency or not. Thus, developing nations and activists began to push for another weakening in IPR provisions to allow off-patent production in a country other than the one facing the emergency and then export those medicines to the country with the medical emergency without punishment for violating the WTO’s IPR provisions. At one point the entire WTO membership except the US had agreed to the change. After much pressure, the US conceded. It had been worried that the medicine could easily be diverted to third countries where there was not an emergency and purchases there would undermine royalty-based sales. With what the US considered to be adequate institutional checks on third-party sales, the US agreed to the IPR exceptions. Critics charge that the institutional checks—including onerous paperwork to get the rules waiver and the requirement that a government control the importation—make the provisions far less useful.</para>
          </footnote> Thus, the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-493">
            <primary>Doha Development Agenda, DDA</primary>
          </indexterm>Doha Development Agenda (DDA), or the Doha Round, was finally <indexterm class="endofrange" startref="b-9781474207300-IDX-993" xml:id="b-9781474207300-IDX-end105"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2044" xml:id="b-9781474207300-IDX-end220"/>launched <?page value="64"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1909">
            <primary>United States</primary>
          </indexterm>in 2001, but at the end of 2016 there was still no final agreement in sight (although there have been some less significant spin-off agreements). The Doha Round now includes the WTO’s 164 members, with radically different levels of development and thus different trade-related interests. Many of the divides that made the Doha Round difficult to start have made it difficult to complete. It now appears unlikely that the Doha Round will successfully create substantial continued liberalization. Besides the obvious problem of disagreement between trade negotiators, there has been growing disenchantment on the part of the public in many developed countries. Since they continue to account for the bulk of world trade, economic liberalization’s future—and therefore the role of trade in former colonies’ development models—appears to be in jeopardy.</para>
</section>
<section xml:id="b-9781474207300-432">
<info xml:id="b-9781474207300-433">
<title xml:id="b-9781474207300-434">Much Ado about Something</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-435">Proponents of <indexterm class="singular" xml:id="b-9781474207300-IDX-670">
            <primary>Free Trade</primary>
          </indexterm>free trade often speak in soaring evangelical rhetoric, giving free trade credit for spreading opportunity, prosperity, and freedom. Critics deride trade as a killer of jobs in rich countries and an enabler of exploitation in poor countries. Such critics blame trade for all manner of economic ills that beset an economy. Trade is clearly important to jobs, investment, national productivity, and more, but some additional perspective is warranted. Trade flows are substantial, but they are dwarfed by financial flows. Global merchandise and services trade was valued at $20.7 trillion in <emphasis role="italic">all</emphasis> of 2015. Foreign exchange markets averaged over $5 trillion dollars per <emphasis role="italic">day</emphasis> in 2016. Every four days the value of money moving through foreign exchange markets is equivalent to an entire year’s value of all trade (<link linkend="b-9781474207300-ref45" role="bib">Bank for International Settlements 2016</link>: 4; WTO 2016: 18).</para>
<para xml:id="b-9781474207300-436">In fact, it may be that trade flows are the result of, not the cause of, financial flows. Foreign demand for US treasuries, for instance—widely seen as the safest investment in the world—plays a substantial role enabling or, put more strongly, creating US trade deficits. How so? Foreign purchases of US treasuries strengthen the US dollar relative to other currencies, making imports cheaper for US consumers and making US exports more expensive for foreign consumers. If financial flows can substantially influence the trade flows of the world’s largest economy, imagine their impact on former colonies and other developing countries.</para>
<para xml:id="b-9781474207300-437">Similarly, trade is vilified as causing a great deal more job loss than economists believe is warranted and, in fact, on balance creates jobs, as economists overwhelmingly agree. Some specific jobs are lost to trade, but the scale of the job loss is small compared with job churn from other sources. Trade-related job loss often packs a greater psychological and political punch than trade-related job gains and far more than trade-related non-employment gains <indexterm class="endofrange" startref="b-9781474207300-IDX-493" xml:id="b-9781474207300-IDX-end41"/>such <?page value="65"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2045">
            <primary>World Trade Organization, WTO</primary>
          </indexterm>as greater variety and cheaper consumption. Trade-related job loss is often concentrated—an entire plant may be moved to another country where wages are lower—and the pain is real, immediate, and obvious. The gains to the broader economy—cheaper consumption, for instance—are diffused. No one votes or joins an interest group or protests to save, say, $500 on consumer products, but they will to save their $50,000 per year job. The $500 savings per person, over an entire economy may outweigh the economic cost of the jobs at the plant. Further, jobs gained from trade are less visible than those lost from trade. Job gains from trade are often more diffused than trade-related job losses—companies already producing may expand due to greater exports, but this is typically marginal for any one producer. Less visible still are the jobs that come from cheaper inputs for domestic final product manufacturers that can source from around the world.</para>
<para xml:id="b-9781474207300-438">Trade is indeed important, but it is less so than is commonly perceived. To give a sense of how much job loss does not come from trade, during much of the 1990s as China was soaking up <indexterm class="singular" xml:id="b-9781474207300-IDX-347">
            <primary>China</primary>
            <secondary>manufacturing</secondary>
          </indexterm>manufacturing investment from around the world and new manufacturing facilities were being built at a dizzying pace in coastal China, the country actually lost industrial jobs. It closed some of its famously inefficient state-owned enterprises, some of which employed hundreds of thousands of workers. If more efficient production created job loss in China as it expanded industrial capacity so quickly, imagine what is happening in other countries that are not gaining Chinese levels of inward foreign investment. Trade, <indexterm class="singular" xml:id="b-9781474207300-IDX-989">
            <primary>industrialization</primary>
          </indexterm>industrialization, and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-751">
            <primary>globalization</primary>
          </indexterm>globalization in an era of growing automation may not be as beneficial to development to former colonies as it was for their metropole powers during their industrial expansion.</para>
</section>
<section xml:id="b-9781474207300-439">
<info xml:id="b-9781474207300-440">
<title xml:id="b-9781474207300-441">Liberalization—such that it is—Holds</title>
<itermset xml:id="b-9781474207300-IDX-see5">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-1170">
              <primary>liberalization</primary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-442">The <indexterm class="singular" xml:id="b-9781474207300-IDX-822">
            <primary>Great Recession</primary>
          </indexterm>Great Recession posed a challenge to former colonies and other developed countries on two fronts. First, there was a precipitous drop in demand for their exports, be they primary products or industrial goods. This economic pain would reverse itself upon the recession’s end. Second, the global economic pain in the developed countries and in the largest developing countries posed a threat to trade liberalization. Would there be a <indexterm class="singular" xml:id="b-9781474207300-IDX-1670">
            <primary>Smoot-Hawley Tariff Act</primary>
          </indexterm>Smoot-Hawley-like response in the large markets?</para>
<para xml:id="b-9781474207300-443">The Great Recession was notable for the degree to which it did not roll back liberalization (although given the backlash noted earlier in industrialized countries, perhaps it still will). One reason liberalization was not diminished is that it has been increasingly institutionalized in the WTO itself, and through the growing number of bilateral and multilateral free trade agreements, referred collectively as regional trade agreements. They are not new, but what is new about them from the 1990s onward, is the degree to which they include <?page value="66"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-565">
            <primary>European Union, EU</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1414">
            <primary>North American Free Trade Agreement, NAFTA</primary>
          </indexterm>provisions for deeper integration than previous generations of <indexterm class="singular" xml:id="b-9781474207300-IDX-1570">
            <primary>Regional Trade Agreements, RTA</primary>
          </indexterm>Regional Trade Agreements (RTAs). Many of these “modern” RTAs, for better or worse depending upon one’s perspective, include provisions that offer WTO-plus levels of access. They are more apt to include coverage of investment, services, and intellectual property rights than previous generations of RTAs. As with free trade more generally, RTAs have been controversial. If this was not already clear, the 2016 <indexterm class="singular" xml:id="b-9781474207300-IDX-256">
            <primary>Brexit</primary>
          </indexterm>Brexit vote—the British referendum to “exit” the EU—and the popularity of President Donald <indexterm class="singular" xml:id="b-9781474207300-IDX-1853">
            <primary>Trump, Donald</primary>
          </indexterm>Trump’s criticism of NAFTA have clarified the point. But the EU, NAFTA, and other RTAs have powerful constituencies and any country that abandons an RTA will not solve the problems posed by globalization. In other words, liberalism is likely to hold, however uncomfortably, for the foreseeable future.</para>
</section>
<section xml:id="b-9781474207300-444">
<info xml:id="b-9781474207300-445">
<title xml:id="b-9781474207300-446">New and Old Globalization</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-447">One reason that liberalization may be holding is simply because <indexterm class="singular" xml:id="b-9781474207300-IDX-1541">
            <primary>protectionism</primary>
          </indexterm>protectionism no longer has the same impact it once did given changed production patterns. Raising barriers on those products made wholly outside a given country by a foreign company (or a domestic company with foreign operations) using foreign inputs is how production is portrayed. Thus, protectionism would raise barriers on specific foreign production, helping wholly domestic producers. But trade and globalization have not worked this way for some time and are rapidly moving away from this image. Sourcing and production are increasingly regional or global in scope. Comparative advantage may still drive production, but what drives comparative advantage is less understood, more complicated and volatile. Trade theory has multiple explanations for comparative advantage—relative factor endowments (e.g., relative abundance in labor or a type of labor), research and development capacity, process innovation, product innovation and product life cycles, high-quality infrastructure, properly functioning government, and so on. A leading trade economist argues that comparative advantage shifts so much, so rapidly, and for so many reasons, it is best understood as “kaleidoscopic comparative advantage” (<link linkend="b-9781474207300-ref62" role="bib">Bhagwati 2005</link>). Raising a tariff barrier or engaging in some other form of protectionism may have implications that are difficult to understand in this environment. Manufacturing that does take place in a given country is likely to have components from around the world—not just foreign raw materials—but manufactured components. Components are likely to have crossed multiple borders already in their own production before they are sent across more borders still for final assembly. This type of production has spread so rapidly that trade regulations and our thinking have not kept pace.</para>
<para xml:id="b-9781474207300-448">Richard <indexterm class="singular" xml:id="b-9781474207300-IDX-178">
            <primary>Baldwin, Richard</primary>
          </indexterm>Baldwin points out the major shift toward new globalization came in roughly 1990. That is when the <indexterm class="singular" xml:id="b-9781474207300-IDX-698">
            <primary>G7</primary>
          </indexterm>G7 countries, long the richest and largest <?page value="67"?>industrialized economies in the world (the <indexterm class="singular" xml:id="b-9781474207300-IDX-1910">
            <primary>United States</primary>
          </indexterm>United States, <indexterm class="singular" xml:id="b-9781474207300-IDX-1050">
            <primary>Japan</primary>
          </indexterm>Japan, <indexterm class="singular" xml:id="b-9781474207300-IDX-618">
            <primary>France</primary>
          </indexterm>France, <indexterm class="singular" xml:id="b-9781474207300-IDX-718">
            <primary>Germany</primary>
          </indexterm>Germany, <indexterm class="singular" xml:id="b-9781474207300-IDX-776">
            <primary>Great Britain</primary>
          </indexterm>Great Britain, <indexterm class="singular" xml:id="b-9781474207300-IDX-1033">
            <primary>Italy</primary>
          </indexterm>Italy, and <indexterm class="singular" xml:id="b-9781474207300-IDX-300">
            <primary>Canada</primary>
          </indexterm>Canada—all colonial powers, except Canada) began losing income shares to rapidly industrializing countries (especially <indexterm class="singular" xml:id="b-9781474207300-IDX-344">
            <primary>China</primary>
          </indexterm>China, <indexterm class="singular" xml:id="b-9781474207300-IDX-1697">
            <primary>South Korea</primary>
          </indexterm>South Korea, <indexterm class="singular" xml:id="b-9781474207300-IDX-923">
            <primary>India</primary>
          </indexterm>India, <indexterm class="singular" xml:id="b-9781474207300-IDX-1508">
            <primary>Poland</primary>
          </indexterm>Poland, <indexterm class="singular" xml:id="b-9781474207300-IDX-978">
            <primary>Indonesia</primary>
          </indexterm>Indonesia, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1811">
            <primary>Thailand</primary>
          </indexterm>Thailand) exceptionally fast. From 1820 to the mid-1980s, the G7’s gross domestic product rose from about 20 percent to roughly two-thirds of the world total, often called the <indexterm class="singular" xml:id="b-9781474207300-IDX-820">
            <primary>Great Divergence</primary>
          </indexterm>Great Divergence. Then, from approximately 1990, the G7’s share of world income dropped to just over 40 percent in about twenty years, a level last seen in 1914. This “shocking share shift,” as Baldwin calls it, is reversing the Great Divergence (<link linkend="b-9781474207300-ref36" role="bib">Baldwin 2016a</link>: 1–3). He argues a <indexterm class="singular" xml:id="b-9781474207300-IDX-814">
            <primary>Great Convergence</primary>
          </indexterm>Great Convergence is under way and it is driven by the spread of information and communication <indexterm class="singular" xml:id="b-9781474207300-IDX-1797">
            <primary>technology</primary>
          </indexterm>technology (ICT) that allowed ideas to flow across borders through production networks. Technology designed to help facilitate joint production between low- and high-wage areas has in fact done so beyond what has been predicted and that is fundamentally different than joint production that preceded this era. Technological and managerial ideas have flowed from high-wage countries to lower-wage countries as part of this joint production. The impact of globalization may thus be speeding up, both in high-wage industrial countries and those developing countries that can successfully take advantage of the ideas flowing through production networks. This has enormous consequences for trade and trade regulation. Putting up barriers to trade in developed countries is more like putting up a wall in the middle of a factory (<link linkend="b-9781474207300-ref38" role="bib">Baldwin 2016c</link>). Hindering production networks’ ability to work in a given country is very unlikely to increase jobs and production in that country.</para>
<para xml:id="b-9781474207300-449">While the forces leading production to newly industrializing countries is on balance good for these countries, questions remain about its environmental sustainability and even about the degree to which <indexterm class="singular" xml:id="b-9781474207300-IDX-990">
            <primary>industrialization</primary>
          </indexterm>industrialization will deliver the much-needed jobs as had been the case for previous industrializers, predominantly the metropole countries. Dani <indexterm class="singular" xml:id="b-9781474207300-IDX-1581">
            <primary>Rodrik, Dani</primary>
          </indexterm>Rodrik has found industrialization is peaking earlier in the industrialization process than was once the case (2015: 15). This premature deindustrialization suggests the trajectory of early industrializers that so many countries have sought to reproduce may not deliver the same development punch it once did. This is all the more worrying because productivity gains in manufacturing have been higher than in other economic sectors and thus help countries sustain economic growth once manufacturing takes hold. He suggests other growth models may be needed, such as services-led growth. This, he notes, requires higher skill labor when many developing countries need employment for large numbers of lower skilled workers (2015: 23–4). Industrialization, long seen as a development panacea may not be what it once was. The rungs of the ladder that worked for the metropole powers when they industrialized may not hold as former colonies climb them in their attempt to <indexterm class="endofrange" startref="b-9781474207300-IDX-751" xml:id="b-9781474207300-IDX-end71"/>develop.</para>
<?page value="68"?>
<para xml:id="b-9781474207300-450">The controversies associated with trade will continue due to its centrality to development and because it is a hook onto which many issues can be placed. What is less clear is what story will be told about trade in the era of new globalization. Will former colonial countries escape the long shadows of their industrialized former metropoles?</para>
</section>
</chapter>
<chapter label="3" xml:id="b-9781474207300-chapter3">
<info xml:id="b-9781474207300-451">
<title xml:id="b-9781474207300-452">
          <?page value="69"?>Natural Worlds</title>
<author xlink:href="C0009" xlink:role="biblioAuID">
<personname role="first-last">
<firstname>Robert</firstname> <surname>Rouphail</surname>
          </personname>
        </author>
<pagenums>69–92</pagenums>
<biblioid class="doi">10.5040/9781474207300.ch-003</biblioid>
<mediaobject xml:id="b-9781474207300-453">
<imageobject xml:id="b-9781474207300-454">
<imagedata fileref="pdfs/9781474207300.ch-003.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
<itermset xml:id="b-9781474207300-IDX-see6">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1701">
            <primary>Southern Rhodesia</primary>
            <see>Zimbabwe</see>
          </indexterm>
        </itermset>
<copyright>
          <year>2019</year>
          <holder>Bloomsbury Publishing</holder>
        </copyright>
      </info>
<section xml:id="b-9781474207300-455">
<info xml:id="b-9781474207300-456">
<title xml:id="b-9781474207300-457">Introduction</title>
<itermset xml:id="b-9781474207300-IDX-see7">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-277">
              <primary>Burma</primary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-458">As <indexterm class="singular" xml:id="b-9781474207300-IDX-446">
            <primary>Cyclone Nargis</primary>
          </indexterm>Cyclone Nargis’ storm surge overwhelmed Myanmar’s <indexterm class="singular" xml:id="b-9781474207300-IDX-1023">
            <primary>Irrawaddy Delta</primary>
          </indexterm>Irrawaddy Delta in 2008, as the catastrophic 2011 <indexterm class="singular" xml:id="b-9781474207300-IDX-1051">
            <primary>Japan</primary>
          </indexterm>Japan tsunami unfurled itself across the <indexterm class="singular" xml:id="b-9781474207300-IDX-1056">
            <primary>Japan</primary>
            <secondary>Fukushima Prefecture</secondary>
          </indexterm>Fukushima prefecture countryside in full view of the entire <indexterm class="singular" xml:id="b-9781474207300-IDX-2059">
            <primary>World War I</primary>
          </indexterm>world, and as looming fears of <indexterm class="singular" xml:id="b-9781474207300-IDX-107">
            <primary>antibiotics</primary>
          </indexterm>antibiotic resistance begin to percolate through public consciousness, one of the most sacrosanct conceits of the twentieth century—of human mastery of the natural world—reveals itself again and again to be fiction. It is, however, a powerful fiction, one that has informed the ways in which states have constructed bureaucracies and social policies, and how nations and their citizens narrate collective pasts. Throughout the twentieth century, it was an imperial fiction, and one this chapter argues was critical to producing cultural registers of difference as a foundation of colonial rule in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-134">
            <primary>Asia</primary>
          </indexterm>Asia, the Americas, and in particular in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-16">
            <primary>Africa</primary>
          </indexterm>Africa, a geographic space long considered outside the dynamics of historical change and technological <indexterm class="singular" xml:id="b-9781474207300-IDX-1801">
            <primary>technology</primary>
            <secondary>development</secondary>
          </indexterm>development. Indeed, the history of colonial projects to extend state <indexterm class="singular" xml:id="b-9781474207300-IDX-1805">
            <primary>technology</primary>
            <secondary>power</secondary>
          </indexterm>power over the natural world in the twentieth century reveals that questions of political, social, and cultural relations to nature developed in relation to, and quite often in the service of, the expansion of imperial power.</para>
<para xml:id="b-9781474207300-459">What marks the temporal moment of when the twentieth century as distinct from earlier eras saw the ascendance of revolutionary forms of technological power that sparked unprecedented changes in understanding, changing, and moving through the natural world? As John <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1257">
            <primary>McNeill, John</primary>
          </indexterm>McNeill has suggested, the twentieth century saw the “screeching acceleration of so many processes that brought ecological change” (<link linkend="b-9781474207300-ref404" role="bib">McNeill 2000</link>: 2). In the colonial world, this <?page value="70"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-641">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-795">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1523">
            <primary>Portugal</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1942">
            <primary>United States</primary>
            <secondary>empire</secondary>
          </indexterm>“great acceleration” of the human ability to shape the natural world was a product of new technological advancements wielded in the service of imperial high modernism, when French, British, Portuguese, and American imperial powers sought to bring the natural world and their subjects under the auspices of the state and under those of globalized capital more broadly. The harmonizing of technology and centralized forms of colonial <indexterm class="singular" xml:id="b-9781474207300-IDX-1803">
            <primary>technology</primary>
            <secondary>governance</secondary>
          </indexterm>governance have allowed for societies to intervene in the natural world on an unprecedented geographical and temporal scale; from the thinning of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1457">
            <primary>ozone layer</primary>
          </indexterm>ozone layer to the melting of <indexterm class="singular" xml:id="b-9781474207300-IDX-1512">
            <primary>polar ice</primary>
          </indexterm>polar ice, changes whose effects are dramatic and durable. This has led historians to develop an arsenal of methodological and conceptual tools to interpret these changes, from the much-celebrated climate proxy sources like tree rings and ice core samples, to the historical/geological category of the “<indexterm class="singular" xml:id="b-9781474207300-IDX-105">
            <primary>anthropocene</primary>
          </indexterm>Anthropocene.”</para>
<para xml:id="b-9781474207300-460">The integration of technologies of governance with technologies of control over the natural world is historically significant not just in the history of the development of modern statecraft in relation to the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-538">
            <primary>environment</primary>
          </indexterm>environment, however, but also in understanding the cultural assumptions of difference that both emerged out of, and informed, these processes. The cultural history of twentieth-century Western empires and the natural world reveals that the development of technological power, the kind that sparked McNeill’s “great acceleration,” was a conceptual site for the production of cultural difference between colonizer and colonized, European and native, modern and primitive (<link linkend="b-9781474207300-ref405" role="bib">McNeill and Engelke 2016</link>). This chapter thus positions the synthesis of methods of governance and modes of rationalizing, categorizing, and ultimately “mastering” nature and people as exemplary of how the “natural world” was conceived, mobilized, and acted upon in the twentieth century.</para>
<para xml:id="b-9781474207300-461">This history is not, however, a linear story of western mastery over nature. To be sure, the development of technological refinement, the folding of technology into state power, and the wielding of that power against the natural world and imperial subjects is critical to understanding the history of the last century. But it is also important to interrogate the extent to which narratives that privilege the acceleration of scientific and technological <indexterm class="singular" xml:id="b-9781474207300-IDX-1802">
            <primary>technology</primary>
            <secondary>expertise</secondary>
          </indexterm>expertise offer a built-in structure that reproduces the very logics of state power which historians are meant critically to bring to light. In other words, the smooth story of the ascent of technological expertise and colonial efforts at rendering the natural world legible to human institutions can, without careful attention, merely reflect the ideological commitments of those very states. These Whiggish histories can obscure just how contested that knowledge could be and how its development reflected not a triumphant colonial power, but rather an embattled one, one reckoning with multiple forms of threat. The first two sections of this chapter, then—which focus on settler societies and imperial logics of development—conceptualize the intersection of state, nature, and culture as a site of disruption for Western empires in Africa and Asia in <indexterm class="endofrange" startref="b-9781474207300-IDX-16" xml:id="b-9781474207300-IDX-end3"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-134" xml:id="b-9781474207300-IDX-end11"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1257" xml:id="b-9781474207300-IDX-end134"/>particular.</para>
<?page value="71"?>
<para xml:id="b-9781474207300-462">This argument synthesizes two fields of scholarly literature that emphasize the instability and historicity of technological <indexterm class="singular" xml:id="b-9781474207300-IDX-1799">
            <primary>technology</primary>
            <secondary>change</secondary>
          </indexterm>change, empire, and the environment. First, the positioning of the natural world as a thorn in the side of empire rather than as a space purely on which empire acted draws from recent work by Antoinette <indexterm class="singular" xml:id="b-9781474207300-IDX-281">
            <primary>Burton, Antoinette</primary>
          </indexterm>Burton, who positions ever-present sites of “dissent and disruption” within British imperial spaces as catalyzing forces in the historical development of empire. For Burton, dissenting and disrupting were the logics that undergirded the work of the British Empire around the globe. In this model, British imperialism was never natural or stable, but an assemblage of multiple and locally driven projects constantly in flux, ones in constant negotiation between the metanarratives of the global with the vicissitudes of the local. Burton offers this argument as a corrective to the pervasive “rise and fall” narratives, which take imperialism as a given and a constant, moving across time and space with unifying moral and political agendas articulated by its administrative and political elites. “What’s needed, in short,” Burton argues, are “wide-ranging accounts of the limits and possibilities of empire’s method on the ground, whenever and wherever it met local responses and was compelled to deal with them” (<link linkend="b-9781474207300-ref94" role="bib">Burton 2015</link>: 8). An initial reading of source material that illuminates these imperial “methods” of dominance in relation to the natural world would suggest that colonial states were interested in the “improvement” of the environment, the stewardship of indigenous peoples that inhabited it, and that technological <indexterm class="singular" xml:id="b-9781474207300-IDX-1806">
            <primary>technology</primary>
            <secondary>power</secondary>
          </indexterm>power was a tool to accomplish these projects. But often these sources mask a different reality: that questions of natural improvement and technological power were often reactionary efforts that sought to cement political power or settle capital in the face of threat, and that European powers often did so by relying on assumptions of cultural difference <emphasis role="italic">vis-à-vis</emphasis> the natural world, assumptions that would appear to vitiate the violence inherent in those processes.</para>
<para xml:id="b-9781474207300-463">And just as empire has proven to be a category often naturalized in scholarly literature, so has technology and technological change. Beginning in the late 1980s, scholars began applying a similar analytical approach to technology that Burton has done in the 2000s. George <indexterm class="singular" xml:id="b-9781474207300-IDX-196">
            <primary>Basalla, George</primary>
          </indexterm>Basalla’s <link linkend="b-9781474207300-ref51" role="bib">
            <emphasis role="italic">The Evolution of Technology</emphasis>
          </link> (1989) initially broke conceptual ground, for example, by arguing that cultural, social, and political forces drive the evolution of technology. This argument flew against the “hard-determinist” paradigm, which offered a vision of technological change as an internally evolving field, one driven by its own periodization and methodological parameters. Emphasizing externality and contextually offered a new model for understanding technological change, one defined by the tensions between interior logics of technological refinement and the external forces that gave those refinements meaning. In an imperial framework, Basalla’s work has been debated and refined. In particular, his characterization of “colonial science” has been subject to critique because of its insistence on <indexterm class="endofrange" startref="b-9781474207300-IDX-538" xml:id="b-9781474207300-IDX-end46"/>“dependency” <?page value="72"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-5012">
            <primary>World War II</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-642">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1250">
            <primary>Mayhunga, Clapperton</primary>
          </indexterm>of expertise between colonial and metropolitan scientists (<link linkend="b-9781474207300-ref3" role="bib">Adas 1989</link>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-5">
            <primary>Adas, Michael</primary>
          </indexterm>, <link linkend="b-9781474207300-ref7" role="bib">2009</link>; <link linkend="b-9781474207300-ref27" role="bib">Arnold 2000</link>). The more recent work of Clapperton Mavhunga, moreover, has shown that the notion of technology was not the sole prerogative of colonial powers, but also that of colonial populations by exploring the “technologies of everyday innovation” that subject populations wielded (<link linkend="b-9781474207300-ref398" role="bib">Mavhunga 2014</link>). For Mahvunga, the question of emphasizing everyday African innovations offers a corrective to Eurocentric assumptions of Africa, and in particular the rural borderlands of <indexterm class="singular" xml:id="b-9781474207300-IDX-2092">
            <primary>Zimbabwe</primary>
          </indexterm>Zimbabwe, as sites of technological stasis.</para>
<para xml:id="b-9781474207300-464">This chapter is comprised of three sections. The first two on settler colonies and the rise of “<indexterm class="singular" xml:id="b-9781474207300-IDX-483">
            <primary>development colonialism</primary>
          </indexterm>development” colonialism, respectively, foreground the two arguments outlined earlier: that twentieth-century technologies of state control were sites for the production of difference, and that these technologies were often wielded defensively to affirm <indexterm class="singular" xml:id="b-9781474207300-IDX-22">
            <primary>Africa</primary>
            <secondary>European assumptions</secondary>
          </indexterm>European cultural and political power in the face of significant threats to that power. This generally follows a categorization first advanced by Michael Adas, who identifies two schools of imperial thought that shaped how European powers deployed technological knowledge in the colonial world: a “racist” school, which affirmed a fundamental inability of non-Europeans to be able either to use technology or conceptualize its achievements in any form and “the improvers,” referring to a cadre of colonial officials who saw the ever-widening technological gap between Europeans and non-Europeans as the result of environmental conditions, a lack of education, and despotic governance. This school saw its ideological adherents push for greater investment in colonial development projects and a more specific focus on the education of colonial subjects in scientific disciplines. This “developmentalist” ideal most firmly took hold after the Second World War, when British and French imperial planners sought to turn African subjects into economically and socially disciplined and urban-dwelling wage workers through the development of industry and the building of European-modeled urban centers.</para>
<para xml:id="b-9781474207300-465">The final section, which looks at the lives of two postcolonial environmental activists, Wangari <indexterm class="singular" xml:id="b-9781474207300-IDX-1186">
            <primary>Maathai, Wangari</primary>
          </indexterm>Maathai and Ken <indexterm class="singular" xml:id="b-9781474207300-IDX-1622">
            <primary>Saro-Wiwa, Ken</primary>
          </indexterm>Saro-Wiwa, evaluates their political activism in light of the institutional echoes of colonialism that they addressed, specifically the production of “native” forms of knowing the natural world and how environmental catastrophe sheds light on global and local political economies. Both Maathai and Saro-Wiwa are exemplary of a contemporary concern over environmental justice and environmental racism, and in particular how the natural world, resources, and ecological epistemologies of the “Global South” become folded into neoliberal networks of capital and political power.</para>
</section>
<section xml:id="b-9781474207300-466">
<info xml:id="b-9781474207300-467">
<title xml:id="b-9781474207300-468">Settling Land, Making Difference</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-469">Histories of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1645">
            <primary>settler colonialism</primary>
          </indexterm>settler colonialism show just how central cultural constructions of foreign landscapes have been to articulations of European power and of <indexterm class="endofrange" startref="b-9781474207300-IDX-795" xml:id="b-9781474207300-IDX-end82"/>settler <?page value="73"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1308">
            <primary>Morocco</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1990">
            <primary>violence</primary>
            <secondary>genocide</secondary>
          </indexterm>belonging. For the purposes of this chapter, the interstices of technology, landscape, and settler culture in Algeria and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1079">
            <primary>Kenya</primary>
          </indexterm>Kenya, the sites of perhaps the two most dramatic anticolonial uprisings of the twentieth century, offer productive conceptual spaces to examine the extent to which methods of producing difference relied on tying cultural difference to the “natural world.”</para>
<para xml:id="b-9781474207300-470">Within the field of settler colonial studies, the question of human relationships with nature has been foundational in articulating political community, material power, and cultural belonging in settler societies. Alfred <indexterm class="singular" xml:id="b-9781474207300-IDX-434">
            <primary>Crosby, Alfred</primary>
          </indexterm>Crosby’s argument for the production of “neo-Europes” in the Americas suggested that European settlers did not arrive only with an ideological commitment to property rights and value, produced via labor in nature, but also with a “grunting, lowing, neighing, crowing, chirping, snarling, buzzing, self-replicating and world-altering avalanche” (<link linkend="b-9781474207300-ref152" role="bib">Crosby 1986</link>: 194). In other words, contemporary settler colonialism was a process catalyzed by multiple invasions: of people, of biomaterial, and of ideas. The most foundational of these ideas was to denude the landscape of its original people and of meaning. In earlier settler colonies like the <indexterm class="singular" xml:id="b-9781474207300-IDX-1911">
            <primary>United States</primary>
          </indexterm>United States, <indexterm class="singular" xml:id="b-9781474207300-IDX-301">
            <primary>Canada</primary>
          </indexterm>Canada, and <indexterm class="singular" xml:id="b-9781474207300-IDX-159">
            <primary>Australia</primary>
          </indexterm>Australia, the discursive emptying of the landscape was matched by a physical, genocidal violence. This destruction or replacement of indigenous bodies with European ones would ultimately render the landscape devoid of indigenous meaning, allowing for European peoples and ideas to flood in and claim mastery over it (<link linkend="b-9781474207300-ref246" role="bib">Griffiths and Robin 1997</link>). And more specifically, beyond the political violence that has become well documented in Kenya and Algeria, both colonies saw settlers rely on technologies of mobility as particularly potent tools that affirmed the idiom of cultural difference in relation to nature in an effort to make claims to landscapes.</para>
<para xml:id="b-9781474207300-471">On February 12, 1923, <indexterm class="singular" xml:id="b-9781474207300-IDX-62">
            <primary>Algeria</primary>
            <secondary>French settlers</secondary>
          </indexterm>French aviator and businessman Georges <indexterm class="startofrange" xml:id="b-9781474207300-IDX-544">
            <primary>Estienne, Georges</primary>
          </indexterm>Estienne—the founder of the <indexterm class="singular" xml:id="b-9781474207300-IDX-409">
            <primary>
              <emphasis role="italic">Companie General de Transport Transsaharienne</emphasis>
            </primary>
          </indexterm>Companie General de Transport Transsaharienne, the first private company to peruse a trans-Saharan road and air route—and a group of French travelers arrived at <indexterm class="singular" xml:id="b-9781474207300-IDX-600">
            <primary>Fort Kidal</primary>
          </indexterm>Fort Kidal, a French colonial outpost in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-55">
            <primary>Algeria</primary>
            <secondary>Adrar region</secondary>
          </indexterm>Adrar region, now part of modern-day Algeria, on specially rigged jeeps that could cross sand dunes. He was there to meet with a man named Baba Oueld <indexterm class="startofrange" xml:id="b-9781474207300-IDX-3">
            <primary>Abidine, Baba Oueld</primary>
          </indexterm>Abidine, the son of a family of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1825">
            <primary>Touareg</primary>
          </indexterm>Touareg nobility who was imprisoned at the fort and who would, an acquaintance assured Estienne, provide critical information needed for Estienne and his team to fulfill their plan of establishing an official overland route from the Algerian coastline to the <indexterm class="singular" xml:id="b-9781474207300-IDX-1612">
            <primary>Sahel</primary>
          </indexterm>Sahel.</para>
<para xml:id="b-9781474207300-472">Crossing the <indexterm class="singular" xml:id="b-9781474207300-IDX-1608">
            <primary>Sahara Desert</primary>
          </indexterm>Sahara by car or plane was no simple task. Twentieth-century French Africa was an amalgamation of multiple political entities and ecological zones, from the Moroccan protectorate ruled nominally by a representative indigenous monarchy, to the settler state of Algeria, to the geographically massive administrative units of <indexterm class="singular" xml:id="b-9781474207300-IDX-679">
            <primary>French West Africa</primary>
          </indexterm>French West Africa and <indexterm class="singular" xml:id="b-9781474207300-IDX-675">
            <primary>French Equatorial Africa</primary>
          </indexterm>French Equatorial Africa. The landscapes ranged from <indexterm class="singular" xml:id="b-9781474207300-IDX-1259">
            <primary>Mediterranean Sea</primary>
          </indexterm>Mediterranean maritime spaces on the northern rim, to the high peaks of the <indexterm class="singular" xml:id="b-9781474207300-IDX-155">
            <primary>Atlas Mountains</primary>
          </indexterm>Atlas, to the steppes and dunes of <indexterm class="endofrange" startref="b-9781474207300-IDX-1645" xml:id="b-9781474207300-IDX-end174"/>the <?page value="74"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1440">
            <primary>orientalism</primary>
          </indexterm>Sahara. For Estienne, however, the lure of the Sahara was too <indexterm class="singular" xml:id="b-9781474207300-IDX-777">
            <primary>Great Britain</primary>
          </indexterm>great not to try to cross it. The romance for the desert, a deeply Orientalist trope inherited from generations of French travelers and writers in Algeria, was a source of inspiration.</para>
<para xml:id="b-9781474207300-473">Thankfully for Estienne, Abidine did not disappoint him. Piece by piece, Abidine sketched a route from Adrar to the <indexterm class="singular" xml:id="b-9781474207300-IDX-1385">
            <primary>Niger River</primary>
          </indexterm>Niger River, informing him of the safest routes used by camel caravans, where the indigenous Touareg knew of fresh water sources, and where Estienne’s tires would not sink in the sand. Estienne waxed poetic over the knowledge he had received: he was learning the roots of the “old caravan drivers, whose routes were not known by anyone outside of the Sahara” (<link linkend="b-9781474207300-ref195" role="bib">Estienne-Mondet 2005</link>: 21). But he also noted that although he believed to be following in the footsteps of the indigenous interlocutors he enlisted to aid his plans, his methods were decidedly different and would yield different results. “New and modern forms of locomotion,” he observed, “would make new routes,” inspired as they were by the “spirit” that guided earlier attempts to cross the Sahara. As the meeting progressed, Estienne posed a few solitary questions as Abidine “divulged his memories … of the infinite plains that only he knew,” a land marked by fine, hard sand and the occasional puddle of muddy water (<link linkend="b-9781474207300-ref195" role="bib">Estienne-Mondet 2005</link>: 21).</para>
<para xml:id="b-9781474207300-474">At around the same time as French adventurists and Algerian <emphasis role="italic">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-67">
              <primary>Algeria</primary>
              <secondary>
                <emphasis role="italic">pieds-noirs</emphasis>
              </secondary>
            </indexterm>pieds-noirs</emphasis> had taken up the Saharan challenge with enthusiasm, white settlers in Kenya were also taking to the skies. On June 27, 1927, <emphasis role="italic">Flight</emphasis> magazine, an <indexterm class="singular" xml:id="b-9781474207300-IDX-170">
            <primary>aviation</primary>
          </indexterm>aviation-focused periodical published in the United Kingdom, ran a short piece on the growing enthusiasm for flying among white settlers in <indexterm class="singular" xml:id="b-9781474207300-IDX-507">
            <primary>East Africa</primary>
          </indexterm>East Africa. The article, entitled “Private Flying in Africa,” celebrated the arrival of the airplane in East Africa and noted the strong enthusiasm that this form of technology engendered among settlers in the region. The author observed, “The country [Kenya], too, is more enthusiastic by far about aviation matters than the mother country. I know of no other country in the world where the goings of the Air Line [<emphasis role="italic">sic</emphasis>] are given leaders on the front page of the local papers … every word … said about aviation was printed, quoted and reprinted dozens of times” (<link linkend="b-9781474207300-ref187" role="bib">Elliot-Lynn 1927</link>: 354). That same year, Kenyan newspapers covered the gradual growth of aviation in the colony, with a particular focus on the evolution of <indexterm class="singular" xml:id="b-9781474207300-IDX-911">
            <primary>Imperial Airway</primary>
          </indexterm>Imperial Airway’s route that would connect Cairo to Cape Town through Kenya at Kisumu, a port city on <indexterm class="singular" xml:id="b-9781474207300-IDX-1134">
            <primary>Lake Victoria</primary>
          </indexterm>Lake Victoria. The <emphasis role="italic">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-510">
              <primary>East African Standard</primary>
            </indexterm>East African Standard</emphasis> kept its readership updated on the details of the construction of runways and hangers at Kisumu, and reported that when the imperial government finished the planning of an air-mail route to Kenya, the Nairobi post office became overrun with enthusiastic patrons hoping to get their first letters out by plane. Excitement over this new form of technology had gripped Kenya’s white settler population.</para>
<para xml:id="b-9781474207300-475">Flying emerged as a technology of Kenyan settler mobility through what was perceived to be a once impenetrable natural world. A series of letters <indexterm class="endofrange" startref="b-9781474207300-IDX-3" xml:id="b-9781474207300-IDX-end1"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-55" xml:id="b-9781474207300-IDX-end6"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-544" xml:id="b-9781474207300-IDX-end47"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1079" xml:id="b-9781474207300-IDX-end122"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1825" xml:id="b-9781474207300-IDX-end188"/>between <?page value="75"?>Margery <indexterm class="singular" xml:id="b-9781474207300-IDX-1493">
            <primary>Perham, Margery</primary>
          </indexterm>Perham and Elspeth <indexterm class="singular" xml:id="b-9781474207300-IDX-906">
            <primary>Huxley, Elspeth</primary>
          </indexterm>Huxley, two European writers intimately familiar with Kenya, engaged the politically fraught topic of land settlement, usage, and civilizational difference in colonial Kenya by alluding to the ways in which European mastery over technology and nature produced a specific cultural register unique to white Europeans in Kenya. Perham suggested:</para>
<blockquote xml:id="b-9781474207300-476">
<para xml:id="b-9781474207300-477">Imagine that you are in an airplane over Kenya accompanied by a stranger of common sense and a feeling for justice who is completely ignorant of the Kenya situation … Your stranger, leaning over, observes the crowded little farmsteads of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1107">
              <primary>Kikuyu</primary>
            </indexterm>Kikuyu and remarks [on] the dense population … [next] your plane sails over the boundary of the European highlands. The stranger makes an exclamation of astonishment … At last he says ‘who lives in these large farmhouses and wide estates?’ [You answer] ‘They are Europeans, a different sort of people, and—if you don’t understand its rather difficult to explain’ (<link linkend="b-9781474207300-ref453" role="bib">Perham 1944</link>: 43).</para>
</blockquote>
<para xml:id="b-9781474207300-478">Literary scholars have been at the forefront of interrogating this relationship. In the Kenyan case, for example, Tirop <indexterm class="singular" xml:id="b-9781474207300-IDX-1661">
            <primary>Simatei, Tirop</primary>
          </indexterm>Simatei observes that, “What a colonizing topography … maps out as untamed, depopulated, [and] wilderness is acknowledged by the indigenous perspective as a scenic landscape of valleys, ridges, and hills that constitute ‘the heart and soul’ of [indigenous] land” (<link linkend="b-9781474207300-ref494" role="bib">Simatei 2005</link>: 89). Simatei has also argued, “colonial representation of land and its inhabitants becomes a form of epistemic violence to the extent that it involves immeasurable disruption and erasure of local cultural systems … [a] colonial representation aimed at the suppressions of the difference of the ‘other’” (<link linkend="b-9781474207300-ref494" role="bib">Simatei 2005</link>: 85).</para>
<para xml:id="b-9781474207300-479">As scholars of French imperialism in <indexterm class="singular" xml:id="b-9781474207300-IDX-1407">
            <primary>North Africa</primary>
          </indexterm>North Africa have shown, <indexterm class="singular" xml:id="b-9781474207300-IDX-63">
            <primary>Algeria</primary>
            <secondary>French settlers</secondary>
          </indexterm>French settlers also filled the Algerian landscape with historical and cultural meaning (<link linkend="b-9781474207300-ref268" role="bib">Heffernan 1991</link>; <link linkend="b-9781474207300-ref365" role="bib">Lorcin 1995</link>; <link linkend="b-9781474207300-ref210" role="bib">Ford 2008</link>; <link linkend="b-9781474207300-ref600" role="bib">Zarobell 2010</link>). From the beginnings of the occupation of the country after the Ottomans, the French constructed the northern rim of the territory as a decidedly Roman one (<link linkend="b-9781474207300-ref366" role="bib">Lorcin 2002</link>). The landscape ceased to be a patchwork of <indexterm class="singular" xml:id="b-9781474207300-IDX-1454">
            <primary>Ottoman Empire</primary>
          </indexterm>Ottoman-administered units of Arab or <indexterm class="singular" xml:id="b-9781474207300-IDX-218">
            <primary>Berber peoples</primary>
          </indexterm>Berber political identities but one with a direct link to a classical past. Even more specifically, it was referred to as the granary of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1583">
            <primary>Roman Empire</primary>
          </indexterm>Roman <indexterm class="singular" xml:id="b-9781474207300-IDX-643">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>empire, linking it inextricably in the French cultural imaginary to European landscapes (<link linkend="b-9781474207300-ref160" role="bib">Davis 2007</link>). The <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1609">
            <primary>Sahara Desert</primary>
          </indexterm>Sahara was different, unsurprisingly. Describing the artistic work of painters such as Gustave <indexterm class="singular" xml:id="b-9781474207300-IDX-839">
            <primary>Guillame, Gustave</primary>
          </indexterm>Guillame and Eugene <indexterm class="singular" xml:id="b-9781474207300-IDX-691">
            <primary>Fromentin, Eugene</primary>
          </indexterm>Fromentin, Michael <indexterm class="singular" xml:id="b-9781474207300-IDX-860">
            <primary>Heffernnan, Michael</primary>
          </indexterm>Heffernnan, for example, suggests the desert emerges as a place not just of adventure but also of expiration. This notion of expiration, of uncertain European death, while first articulated in the nineteenth century, is central to understanding how twentieth-century explorers, moving through the desert in cars and planes, imbued their relationship to the landscape with meaning. And, <?page value="76"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1826">
            <primary>Touareg</primary>
          </indexterm>as Benjamin Claude <indexterm class="singular" xml:id="b-9781474207300-IDX-271">
            <primary>Brower, Benjamin</primary>
          </indexterm>Brower (<link linkend="b-9781474207300-ref86" role="bib">2011</link>) has shown, efforts at expanding imperial statecraft to the reaches of the Sahara most distant from Algiers were ultimately piecemeal, as the material power of the colonial state being was unevenly distributed in regions distant from the loci of the French colonial state in the more populous northern reaches of the colony. Growing frustrations with the inability to manage the peoples and ecologies of the desert saw the French embrace systematic violence as the predominant register of a perpetually enervated colonial state. Ultimately it was the indigenous people of the desert—the “noble” Tuareg of the French imaginary—who truly understood the desert (<link linkend="b-9781474207300-fig3_1" role="figure">Figure 3.1</link>).</para>
<para xml:id="b-9781474207300-480">It was for this reason that the Sahara endured in the French imagination as a place only understood by indigenous peoples, making <indexterm class="singular" xml:id="b-9781474207300-IDX-545">
            <primary>Estienne, Georges</primary>
          </indexterm>Estienne’s meeting with <indexterm class="singular" xml:id="b-9781474207300-IDX-4">
            <primary>Abidine, Baba Oueld</primary>
          </indexterm>Abidine significant at the time. It also demonstrated the limits of the French colonial state. Close to eighty years after taking control of the North African territory, the Sahara was still a massive natural obstacle to contiguous unchallenged French rule. Estienne’s appropriation of Tuareg ecological and commercial knowledge of the desert landscape—where the safest and most efficient routes lay—speaks to the cultural cleavages the French imagined that the Sahara produced. In lieu of becoming peoples of the desert, however, technological power would ultimately grant them access to that knowledge; <indexterm class="endofrange" startref="b-9781474207300-IDX-1609" xml:id="b-9781474207300-IDX-end167"/>the <anchor role="objectPointer" xml:id="b-9781474207300-figure3_1"/>
          <?page value="77"?>wing and the tire would eventually eliminate whatever knowledge gap there was between European and African.</para>
<figure label="3.1" xlink:href="b-9781474207300-figure3_1" xlink:role="objectPointer" xml:id="b-9781474207300-fig3_1">
<info xml:id="b-9781474207300-481">
<title xml:id="b-9781474207300-482">French Foreign Legion postcard, 1952. Credit: Art Media/Print Collector/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-483">
<imageobject xml:id="b-9781474207300-484">
<imagedata align="center" fileref="images/fig3_1.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-486">In <indexterm class="singular" xml:id="b-9781474207300-IDX-508">
            <primary>East Africa</primary>
          </indexterm>East Africa, the question of European belonging in the central highland landscape was a defensive strategy aimed at two distinct communities: displaced <indexterm class="singular" xml:id="b-9781474207300-IDX-744">
            <primary>Gikuyu</primary>
          </indexterm>Gikuyu peoples whose homesteads had been wrestled away by newly arrived Europeans, and an immigrant South Asian community that sought land holdings in the highlands after the establishment of a politically powerful settler community. The supplanting of European farms in place of Gikuyu ones and the turning of the Gikuyu into agricultural “squatters” on their own land was a critical component of turning the highlands into a European landscape, a history that would rear its head most saliently in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1241">
            <primary>Mau Mau</primary>
          </indexterm>Mau Mau uprising of the mid-twentieth century. But in the aftermath of the First <indexterm class="singular" xml:id="b-9781474207300-IDX-2060">
            <primary>World War I</primary>
          </indexterm>World War, the question of Indian political integration into the East African polities of <indexterm class="singular" xml:id="b-9781474207300-IDX-1080">
            <primary>Kenya</primary>
          </indexterm>Kenya and <indexterm class="singular" xml:id="b-9781474207300-IDX-1779">
            <primary>Tanganyika</primary>
          </indexterm>Tanganyika emerged as an explosive political question, and one in which the white <indexterm class="singular" xml:id="b-9781474207300-IDX-730">
            <primary>Germany</primary>
            <secondary>settlers</secondary>
          </indexterm>settlers in Kenya sought to intervene to preserve the racial order of the colony.</para>
<para xml:id="b-9781474207300-487">The white settler response to the perceived threat of Indian settlement in the highlands was articulated through ecological idiom. They drew on a growing body of pseudo-science throughout Africa and <indexterm class="singular" xml:id="b-9781474207300-IDX-135">
            <primary>Asia</primary>
          </indexterm>Asia that linked <indexterm class="singular" xml:id="b-9781474207300-IDX-30">
            <primary>Africa</primary>
            <secondary>race</secondary>
          </indexterm>race to environment (<link linkend="b-9781474207300-ref328" role="bib">Kennedy 1987</link>). Throughout the continent, opinions varied as to what was the most hygienic distance above sea level that would sustain European life. Original estimates ranged from a mere ten to fifteen feet of elevation to as high as many thousands of feet. Perhaps the most extreme example was in central Africa. Explorer MacGregor <indexterm class="singular" xml:id="b-9781474207300-IDX-1133">
            <primary>Laird, MacGregor</primary>
          </indexterm>Laird believed that safety from malarial mosquitoes could only be found above five thousand feet, a conclusion that would influence the Germans to build their colonial capital, Buea, on the slopes of <indexterm class="singular" xml:id="b-9781474207300-IDX-1312">
            <primary>Mount Cameroon</primary>
          </indexterm>Mount Cameroon. Prominent Kenyan pro-settler paper, <emphasis role="italic">The East African Standard</emphasis>, frequently ran advertisements for “The Equatorial Hotel” in Entebbe, <indexterm class="singular" xml:id="b-9781474207300-IDX-1862">
            <primary>Uganda</primary>
          </indexterm>Uganda that boasted a property that stood “on high ground with two views of the lake” and that it was “high and airy” throughout the 1920s and 1930s. But ultimately this separation was not only a putative question of racial biology, as the multiracial cities of Nairobi and Entebbe are many thousands of feet above sea level. Rather, as Phillip <indexterm class="singular" xml:id="b-9781474207300-IDX-443">
            <primary>Curtin, Phillip</primary>
          </indexterm>Curtin noted, the “avoidance of disease was not the only motive for moving administrators to higher places. It also satisfied the need to segregate the governors from the governed …” (<link linkend="b-9781474207300-ref156" role="bib">Curtin 1992</link>: 236). The central highlands of Kenya fit this bill, then: the landscape was cool and breezy, reminiscent of England, in stark opposition to the hot and humid coast, and wildlife filled the savannas that dotted East Africa. Its temperate climate mirrored what white settlers saw as temperate cultural and political predilections of Europeans. What technological mastery of the natural world would offer, then, was a strategy to empty that landscape of the native peoples therein, and any others who sought to gain access to it.</para>
<?page value="78"?>
<para xml:id="b-9781474207300-488">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-619">
            <primary>France</primary>
          </indexterm>In the eyes of European <indexterm class="singular" xml:id="b-9781474207300-IDX-948">
            <primary>India</primary>
            <secondary>settlers</secondary>
          </indexterm>settlers, this temperance of climate and of culture was threatened by the specter of Indian landownership. Not only was it a threat to white political hegemony, but it was also a natural transgression. Indians, as the ghettos of Nairobi and Mombasa had shown in their opinion, lived in perpetual states of squalor and disease, a condition they naturally embraced. The breezy green spaces of the highlands would either ultimately not suit Indian cultural norms it was thought, or the space would be corrupted; it would be better for the Indians to stay in the prophylactic urban spaces of Nairobi or in the tropical lowlands of the coast. And it was from the airplane ultimately that these differences could be properly understood, as Perham suggested in her letter.</para>
<para xml:id="b-9781474207300-489">What both the Kenyan “Indian Question” and the perpetual inability of the French to establish political control in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1610">
            <primary>Sahara Desert</primary>
          </indexterm>Sahara reveal is that the natural world was a site of political and cultural contestation, not merely a grid across which European power naturally unfolded. It was for the multiple reasons outlined earlier that these spaces disrupted European aspirations, and that technological feats of mobility exemplified in the <indexterm class="singular" xml:id="b-9781474207300-IDX-169">
            <primary>automobile industry</primary>
          </indexterm>automobile and airplane fit into a broader strategy of the political displacement of indigenous peoples and the marginalization of upwardly mobile Indian communities. Separate from the multiple land acts and racialized urban planning schemes that sought to physically separate by <indexterm class="singular" xml:id="b-9781474207300-IDX-1548">
            <primary>race</primary>
          </indexterm>race, the enthusiasm for flying added cultural grist to this political machine by defining how Europeans saw themselves in relation to the natural world. Arjun <indexterm class="singular" xml:id="b-9781474207300-IDX-118">
            <primary>Appadurai, Arjun</primary>
          </indexterm>Appadurai’s work has, for example, attempted to theorize questions of race, indigeneity, mobility, and ecological space by suggesting that the European efforts to systemize the social life of indigenous people created the category of the “native” as persons “who are from certain places … belong to those [and] are <emphasis role="italic">incarcerated</emphasis>, or confined, in those places …” (<link linkend="b-9781474207300-ref25" role="bib">Appadurai 1988</link>: 37). This corresponds with an assumption of physical immobility as well as intellectual immobility. Natives are confined, in Europeans’ minds, to the “ecological niches” they occupy and “modes of thought” that inform their relationships to those niches. The native thus emerges not only as animalistic—confined to its ecological niche—but also cognitively incapable of intellectualizing this predicament; modern technology is rendered superfluous to the immediate needs of the native. The intellectual consequences of this mode of thought are made clear in how Europeans represent Africans through the framework of <indexterm class="singular" xml:id="b-9781474207300-IDX-171">
            <primary>aviation</primary>
          </indexterm>aviation.</para>
<para xml:id="b-9781474207300-490">But ultimately, the argot of ecological difference that technology like the automobile and airplane allowed in colonial spaces offered a teleology of European mastery over both time and space, a methodological critique first identified in George <indexterm class="singular" xml:id="b-9781474207300-IDX-197">
            <primary>Basalla, George</primary>
          </indexterm>Basalla’s work. This sentiment of historical change was perhaps most succinctly articulated in writer Léon <indexterm class="singular" xml:id="b-9781474207300-IDX-1680">
            <primary>Sougnenet, Léon</primary>
          </indexterm>Sougnenet’s observations on his travels through the Algerian <indexterm class="singular" xml:id="b-9781474207300-IDX-1185">
            <primary>M’zab</primary>
          </indexterm>M’zab, entitled “The Last Camel, the First Tire, <?page value="79"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-53">
            <primary>Algeria</primary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-644">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-796">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1081">
            <primary>Kenya</primary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1524">
            <primary>Portugal</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2065">
            <primary>World War II</primary>
          </indexterm>the First Wing” (1918), which evinced the naturalness of both technological development and imperial power suggesting that European technology of mobility had replaced “traditional” ones, a replacement that harkened a new cultural and political rule by <indexterm class="singular" xml:id="b-9781474207300-IDX-555">
            <primary>Europe</primary>
          </indexterm>Europe. A closer look at the Kenyan and Algerian moments shows that the nearly contemporaneous examples of Algerian adventurers and Kenyan settlers embracing new forms of technology and mobility and wielding those developments in relation to the natural world do not only speak to a methodical and inevitable movement of European mastery of the environment. Rather, they show just how contested a cultural terrain these respective landscapes—the <indexterm class="singular" xml:id="b-9781474207300-IDX-2018">
            <primary>White Highlands</primary>
          </indexterm>White Highlands and the Sahara—had become to affirming European imperial power.</para>
</section>
<section xml:id="b-9781474207300-491">
<info xml:id="b-9781474207300-492">
<title xml:id="b-9781474207300-493">Environmental Technocracy and Cultures of Development</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-494">Of course, white settlers did not constitute a significant proportion of the population in most spaces under imperial colonial rule in the twentieth century. And while this demographic difference meant substantive alterations in the cultural history of these colonial spaces, the foundational twentieth-century assumption that linked European power to technological mastery over the natural world endured. This belief took new and significant meaning in the post-Second World War era of British, French, and Portuguese colonial rule, where older models of resource-extractive industries and “<indexterm class="singular" xml:id="b-9781474207300-IDX-959">
            <primary>indirect rule</primary>
          </indexterm>indirect rule” political structures were supplanted by a discursively more genteel form of colonial rule, which emphasized the building of European-style governmental institutions and the explicit construction of an urban, wage-earning proletariat.</para>
<para xml:id="b-9781474207300-495">In the years following the end of the Second World War, imperial powers embraced an agenda broadly considered as “<indexterm class="singular" xml:id="b-9781474207300-IDX-484">
            <primary>development colonialism</primary>
          </indexterm>development colonialism” that sought to “stabilize” what were perceived as unruly and culturally incompatible colonial subjects. The shift in governing philosophy to “development” by colonial states, produced efforts to rationalize both indigenous populations and landscapes to make them legible to colonial states. This legibility, as James <indexterm class="singular" xml:id="b-9781474207300-IDX-1631">
            <primary>Scott, James</primary>
          </indexterm>Scott first argued, sought to simplify state efforts at collecting taxes, at conscription, and at suppressing rebellion (<link linkend="b-9781474207300-ref485" role="bib">Scott 1998</link>: 2). In the African context, Frederick <indexterm class="singular" xml:id="b-9781474207300-IDX-423">
            <primary>Cooper, Frederick</primary>
          </indexterm>Cooper has shown the extent to which development colonialism shaped the historical development of the continent, most notably around questions of <indexterm class="singular" xml:id="b-9781474207300-IDX-359">
            <primary>citizenship</primary>
          </indexterm>citizenship and civic participation in ascendant forms of colonial statecraft. Africans became colonial citizens, labor organizers, schoolteachers, and civil servants, positions that integrated indigenous peoples into the structures of state government in then unprecedented ways (<link linkend="b-9781474207300-ref146" role="bib">Cooper 2002</link>: 38–132).</para>
<para xml:id="b-9781474207300-496">An important corollary to the production of new colonial bureaucracies and subject populations was the wielding of new technologies against the <indexterm class="endofrange" startref="b-9781474207300-IDX-1610" xml:id="b-9781474207300-IDX-end168"/>natural <?page value="80"?>world. These efforts took place most spectacularly around the building of massive <indexterm class="singular" xml:id="b-9781474207300-IDX-992">
            <primary>infrastructure projects</primary>
          </indexterm>infrastructure projects as well as efforts to build governmental institutions that would ostensibly protect colonial subjects and the state more broadly against threats that the natural world would play, from disease to natural disaster. Throughout Africa and <indexterm class="singular" xml:id="b-9781474207300-IDX-136">
            <primary>Asia</primary>
          </indexterm>Asia, colonial states of the British, French, and Portuguese built dams, canalized rivers, spread pesticides, constructed new homes, and sought to eradicate endemic diseases. This happened, of course, at the same time as these technologies also devastated the natural world in places such as French <indexterm class="singular" xml:id="b-9781474207300-IDX-965">
            <primary>Indochina</primary>
          </indexterm>Indochina and British <indexterm class="singular" xml:id="b-9781474207300-IDX-1206">
            <primary>Malaya</primary>
          </indexterm>Malaya through the extraction of <indexterm class="singular" xml:id="b-9781474207300-IDX-1588">
            <primary>rubber</primary>
          </indexterm>rubber, among other things.</para>
<para xml:id="b-9781474207300-497">Collectively, efforts at intervening in the natural world through new methods of technological expertise both relied upon and produced new cultural logics that reflected, in part, a significant departure from settler societies. The moral prerogatives of <indexterm class="singular" xml:id="b-9781474207300-IDX-21">
            <primary>Africa</primary>
            <secondary>development</secondary>
          </indexterm>development that sparked state technological intervention in the natural world required a cultural construction of indigenous peoples as incapable of fully understanding the ecological spaces they occupied. On one hand, this affirmed earlier assumptions of indigenous entrapment in ecological niches, while it also suggested that this positionality was ultimately transgressive, a drag on the teleology of state development, the refinement of technologies of natural management, and the unifying of that ability with new technologies of governance. This shift resulted in an uneven folding of native peoples into new systems of “rational” environmental stewardship in the service of state-building.</para>
<para xml:id="b-9781474207300-498">The (un)production for indigenous “rationality” was, and indeed continues to be, most often argued in the realm of human–environment relations. As African economic historians have shown, for example, early European explorers assumed that African land usage patterns belied certain cultural assumptions that “embedded” decision-making in social relations, not rational, profit-seeking decision-making abilities. Africa was, after all, relatively land rich and under-populated in the eyes of Europeans, rendering most of its territory vacant and underexploited in their estimation. This was, of course, both a willing misrepresentation by some and misunderstanding by others on the part of newly arrived colonial agents. The power of this supposed epistemological (and indeed civilizational) cleavage was subsequently folded into questions of economic development through the work of Karl <indexterm class="singular" xml:id="b-9781474207300-IDX-1511">
            <primary>Polanyi, Karl</primary>
          </indexterm>Polanyi. Polanyi’s hugely influential 1944 study, <emphasis role="italic">The Great Transformation</emphasis>, argued that the production of markets in <indexterm class="singular" xml:id="b-9781474207300-IDX-778">
            <primary>Great Britain</primary>
          </indexterm>Great Britain allowed it to develop at an exponential rate compared with the rest of the world (<link linkend="b-9781474207300-ref281" role="bib">Hopkins 1973</link>; <link linkend="b-9781474207300-ref31" role="bib">Austin 2005</link>). These markets presupposed that actors within them adopted a logic of maximum efficiency and profit-seeking in an environment of scarcity. It was thus argued that native peoples throughout the colonial world made decisions not through rational, profit-maximizing choice but rather by cultural compulsion, for reasons that responded to their societal and cultural commitments. This argument <indexterm class="endofrange" startref="b-9781474207300-IDX-644" xml:id="b-9781474207300-IDX-end61"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-796" xml:id="b-9781474207300-IDX-end83"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1524" xml:id="b-9781474207300-IDX-end163"/>drew <?page value="81"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2066">
            <primary>World War II</primary>
          </indexterm>from and affirmed colonial-era ethnographic descriptions of African societies operating outside of the parameters of rational choice.</para>
<para xml:id="b-9781474207300-499">The idea that the natural world could be rationally improved upon was, of course, not a new belief solely possessed by mid-twentieth-century imperial powers. As many scholars have shown, the notion of the “<indexterm class="singular" xml:id="b-9781474207300-IDX-106">
            <primary>anthropocene</primary>
          </indexterm>Anthropocene” extends back centuries (<link linkend="b-9781474207300-ref405" role="bib">McNeill and Engelke 2016</link>; <link linkend="b-9781474207300-ref406" role="bib">Mikhail 2016</link>). But in imperial spaces in the twentieth century, the acceleration of human intervention brought by technology allowed for colonial planners to articulate notions of state-centered developmentalist paternalism while also emphasizing the cultural cleavages between Europeans and non-Europeans. The postwar construction of massive infrastructure projects and the initiation of disease eradication efforts exemplified, in the eyes of colonial planners, an indelible marker of difference between European, African, and Asian forms of collective governance and the cultural priorities therein against the foil of the natural world. But like the settler cultures of before, these projects should also be viewed as broader state strategies of self-preservation and protection.</para>
<para xml:id="b-9781474207300-500">The Second World War and immediate postwar environmental history of <indexterm class="singular" xml:id="b-9781474207300-IDX-1247">
            <primary>Mauritius</primary>
          </indexterm>Mauritius, for example, shows just that. The 1943 Japanese occupation of <indexterm class="singular" xml:id="b-9781474207300-IDX-278">
            <primary>Burma</primary>
          </indexterm>Burma and the <indexterm class="singular" xml:id="b-9781474207300-IDX-216">
            <primary>Bengal Cyclone (1943)</primary>
          </indexterm>Bengal cyclone of the same year shattered the food economy of the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-958">
            <primary>Indian Ocean</primary>
          </indexterm>Indian Ocean World.<footnote label="1" role="end-bk-note" xml:id="b-9781474207300-fn3_1">
            <para xml:id="b-9781474207300-501">The cyclone flooded the rice fields with salt water from the Bay of Bengal, ruining the crop. It was also responsible for the deaths of nearly 15,000 in Bengal alone. See, for example, Sen (<link linkend="b-9781474207300-ref486" role="bib">1977</link>).</para>
          </footnote> The dramatic collapse of the oceanic rice markets, for example, led to a profound reorientation in the comestible regimes of the island, spearheaded by hand-wringing colonial officials who, remembering riots in 1937 that were sparked, in part, by a chronic lack of food, saw the reconstruction of domestic nutrition systems as critical not only to the economic longevity of the island but also to its political stability. These new efforts saw women become the objects of state plans to build families around sustainably produced and highly nutritious food. This shift was informed by detailed studies of the anatomical and molecular structures of poor Mauritians, whose skin, spleens, and blood served as the raw data around which resources to build a sustainable society were mobilized. In one example, the colonial state argued for a move away from the south Asian staple of <emphasis role="italic">daal</emphasis> to meat, in order to increase protein in the poor’s diet: a shift that pleased some Indo-Mauritian leaders, horrified others, and thus emerged as a focal point for mid-century articulations of belonging for <indexterm class="startofrange" xml:id="b-9781474207300-IDX-972">
            <primary>Indo-Mauritians</primary>
          </indexterm>Indo-Mauritians.</para>
<para xml:id="b-9781474207300-502">Two assumptions were at the heart of the actions of these colonial officials: the first being that the politics of cultivating local food production was a prudent defensive strategy against potential political unrest, the kind which had gripped the colony less than a decade earlier when peasants effectively temporarily upended the colonial <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1753">
            <primary>sugar</primary>
          </indexterm>sugar economy. The second was the contention that development in Mauritius had to be centered around a set of cultural prerequisites that Indo-Mauritians possessed. The Labor Department, which oversaw the massive development schemes of the mid-century, was under <?page value="82"?>the direction of a handful of colonial officials who believed deeply in the cultural incommensurability between African and Indian peoples and Europeans that revolved around distinct relationships to the natural world. So, while much of continental African economic development was directed toward the construction of an urban proletariat, “development” in Mauritius was conducted under the auspices of an imperial commitment to inculcate a south Asian work-ethic, one leaning more heavily toward agricultural work than wage earning. “The Indo-Mauritian Laborer”, the commissioner of labor in the colony observed, “did not want to be industrialized” (<link linkend="b-9781474207300-ref586" role="bib">Wilkinson 1939</link>).</para>
<para xml:id="b-9781474207300-503">This assumption, that Indo-Mauritians were fundamentally <indexterm class="singular" xml:id="b-9781474207300-IDX-114">
            <primary>anti-industrialization</primary>
          </indexterm>anti-industrialization, is revelatory of the broader political and social questions that informed how colonial states exerted material power over their subjects and over the natural world more broadly. Throughout the colony, efforts at improving the landscape—making it more amenable for the production of the island’s monocrop, sugar—reproduced assumptions of cultural difference. Anxious about allowing Indians to migrate to the steadily expanding urban centers of the islands, colonial officials within the labor and public welfare departments of the colony, the two state institutions tasked with managing the social and political development of the colony, drafted their development plans along two critical and closely linked beliefs about Mauritius. The first was that Mauritius was a “hyperendemic” space, one where disease, and in particular <indexterm class="singular" xml:id="b-9781474207300-IDX-1199">
            <primary>malaria</primary>
          </indexterm>malaria, was indigenous and perpetually a threat. This was, it should be said, a stark departure from centuries of colonial thought regarding the environment of the island, which was long thought to be a tropical paradise. The second was the cultural incommensurability of Indian <indexterm class="singular" xml:id="b-9781474207300-IDX-944">
            <primary>India</primary>
            <secondary>laborers</secondary>
          </indexterm>laborers with urban life. Indians, one public welfare official observed, reproduced “like flies” when housed in the burgeoning peri-urban centers around Port Louis and throughout Plaines Wilhems, the most populous of the island’s districts (<link linkend="b-9781474207300-ref586" role="bib">Wilkinson 1939</link>: 2–3). At the same time, however, the erstwhile governor of the island in the postwar era, Sir Bede <indexterm class="singular" xml:id="b-9781474207300-IDX-364">
            <primary>Clifford, Sir Bede</primary>
          </indexterm>Clifford, embarked on a mission to produce massive <indexterm class="singular" xml:id="b-9781474207300-IDX-1024">
            <primary>irrigation</primary>
          </indexterm>irrigation works that would source fresh water from the island’s reservoirs to the estates and small Indo-Mauritian landowners. These irrigation works would also seek to eliminate pools of stagnated water throughout the island, a breeding ground for <emphasis role="italic">Anopheles</emphasis> mosquitoes, the vectors of malaria (<link linkend="b-9781474207300-fig3_2" role="figure">Figure 3.2</link>).</para>
<para xml:id="b-9781474207300-504">Taken together, then, efforts to make the colony food-independent and disease-free were informed by broader cultural assumptions that envisioned an island worked by agriculturally oriented peasants while overseen by a techno-state responsible for irrigation, disease eradication, and the management of a nutritionally healthy population. As the history of this corner of the Indian Ocean shows, the middle of the twentieth century was also a moment of the harmonizing of state strategies of management in regards to both natural and social threat. Indeed, the concurrent ascendance of the figure of the <indexterm class="endofrange" startref="b-9781474207300-IDX-958" xml:id="b-9781474207300-IDX-end99"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-972" xml:id="b-9781474207300-IDX-end102"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1753" xml:id="b-9781474207300-IDX-end185"/>social <?page value="83"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure3_2"/>scientist, natural scientist, and bureaucrat at mid-century points to what Timothy <indexterm class="singular" xml:id="b-9781474207300-IDX-1290">
            <primary>Mitchell, Timothy</primary>
          </indexterm>Mitchell has called the “rule of experts” (2002), when technocratic expertise harmonized with state technologies of control over its subjects and its landscapes.</para>
<figure label="3.2" xlink:href="b-9781474207300-figure3_2" xlink:role="objectPointer" xml:id="b-9781474207300-fig3_2">
<info xml:id="b-9781474207300-505">
<title xml:id="b-9781474207300-506">Irrigation channels for sugar cane crops, Mauritius. Credit: Kate Hopper.</title>
</info>
<mediaobject xml:id="b-9781474207300-507">
<imageobject xml:id="b-9781474207300-508">
<imagedata align="center" fileref="images/fig3_2.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
</section>
<section xml:id="b-9781474207300-510">
<info xml:id="b-9781474207300-511">
<title xml:id="b-9781474207300-512">Reckoning with Postcolonial Ecological Legacies</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-513">Postcolonial theorists have sought to understand how colonial forms of knowledge and state governance that produced gender, racial, and class subjectivities in the colonial era, have endured beyond the formal end of empire. With regards to the environmental history of the twentieth century, scholars of environment and technology initially folded questions of the exercise of state power in nature into already established paradigms of economic asymmetry such as <indexterm class="singular" xml:id="b-9781474207300-IDX-480">
            <primary>dependency theory</primary>
          </indexterm>dependency theory (<link linkend="b-9781474207300-ref458" role="bib">Portuondo 2009</link>). More recently, however, scholars working across geographies and temporalities have asserted that while the history of violent <indexterm class="singular" xml:id="b-9781474207300-IDX-32">
            <primary>Africa</primary>
            <secondary>resources</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1991">
            <primary>violence</primary>
            <secondary>resources</secondary>
          </indexterm>resource extraction from naturally rich Africa and <indexterm class="singular" xml:id="b-9781474207300-IDX-137">
            <primary>Asia</primary>
          </indexterm>Asia is critical to understanding the ways in which late colonial and postcolonial nations were folded into neoliberal global commodity and financial markets, environmental historians writing on the cultural history of empires and the natural world have embraced the interventions first made by postcolonial <?page value="84"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2031">
            <primary>women</primary>
            <secondary>ecology</secondary>
          </indexterm>theorists by focusing on how questions of racial and gendered difference first articulated around moments of colonial intervention in the natural world have endured (<link linkend="b-9781474207300-ref428" role="bib">Nixon 2013</link>).</para>
<para xml:id="b-9781474207300-514">Pursuant of these critiques of culture and empire, the examples of two world-renown African environmental activists in the postcolonial era—Kenyan Wangari <indexterm class="singular" xml:id="b-9781474207300-IDX-1187">
            <primary>Maathai, Wangari</primary>
          </indexterm>Maathai and Nigerian Ken <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1623">
            <primary>Saro-Wiwa, Ken</primary>
          </indexterm>Saro-Wiwa—shed light on the ways in which the echoes of colonial statecraft and subject-making have shaped the post-independence history of their respective nations. Maathai’s work to re-center indigenous forms of <indexterm class="singular" xml:id="b-9781474207300-IDX-1136">
            <primary>land</primary>
          </indexterm>land management and <indexterm class="singular" xml:id="b-9781474207300-IDX-1092">
            <primary>Kenya</primary>
            <secondary>women</secondary>
          </indexterm>women’s relationship to the ecological spaces they inhabit was in direct response to colonial era institutional norms that emphasized the cordoned-off political and cultural space of British expertise. Saro-Wiwa’s work, similarly centered on the question of ethnic belonging in a multi-ethnic petrol-state, where the narrow channels of political power and international capital first cemented in the waning days of empire systematically damaged the ecological spaces that <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1384">
            <primary>Niger Delta</primary>
          </indexterm>Niger Delta communities called home.</para>
<para xml:id="b-9781474207300-515">In 1972, faced with a growing scientific consensus on climate change and the need to build systems of ecological, social, and political resilience to respond to this crisis, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1880">
            <primary>United Nations</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1889">
            <primary>United Nations Environmental Program, UNEP</primary>
          </indexterm>United Nations Environmental Program (UNEP) was founded, establishing its first office in Nairobi, <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1082">
            <primary>Kenya</primary>
          </indexterm>Kenya. One of the first members of the Nairobi office was the late Wangari Maathai, the renowned Kenyan biologist, veterinarian, and environmental activist. Born in 1940, Maathai was educated in both <indexterm class="singular" xml:id="b-9781474207300-IDX-509">
            <primary>East Africa</primary>
          </indexterm>East Africa and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1912">
            <primary>United States</primary>
          </indexterm>United States, as a member of the Kennedy airlift program, where she studied biology at the University of Pittsburgh. Her work for the United Nations was a logical outcome of her previous work and life experience. She observed that, “[m]y background as a biological scientist and daughter of a peasant farmer provided the seed for growth and long-term commitment to the environment” (<link linkend="b-9781474207300-ref376" role="bib">Maathai 2004</link>: 9). In the decades following this introduction into environmental activism, Maathai would go on to found the world-renowned <indexterm class="startofrange" xml:id="b-9781474207300-IDX-829">
            <primary>Greenbelt Movement, GBM</primary>
          </indexterm>Greenbelt Movement (GBM) in Kenya, an initiative to combat growing concerns over <indexterm class="singular" xml:id="b-9781474207300-IDX-474">
            <primary>deforestation</primary>
          </indexterm>deforestation throughout that country.</para>
<para xml:id="b-9781474207300-516">Greenbelt was a revolutionary movement, and one for which Maathai would ultimately win the Nobel <indexterm class="singular" xml:id="b-9781474207300-IDX-1401">
            <primary>Noble Peace Prize</primary>
          </indexterm>Peace Prize. Its mission was to replace deforested areas throughout Kenya with new trees, an effort that was spearheaded by Kenyan women, a decision which Maathai noted had allowed many Kenyan women to become amateur forestry experts in their own right (2004: 26). Greenbelt democratized professional forestry knowledge by bringing non-experts into countrywide efforts to halt deforestation. This was not without its challenges. Maathai noted that the expansion of forestry as an amateur art irritated professionals. Claims that forestry had become “adulterated” was a common complaint she noted, but one ultimately that did little to stymie the movement. “After all,” Maathai noted, “they had for a long time successfully cultivated <?page value="85"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1388">
            <primary>Nigeria</primary>
          </indexterm>various crops on their own farms. What was so difficult to applying this knowledge to tree planning?” (2004: 27). The observation that technical know-how was not solely proprietary to the realm of the expert was a theme she observed in her own autobiographical sketches. Maathai saw herself as an inheritor, as were many Kenyan women, of an intellectual and social tradition of ecological stewardship. Equally important, Maathai situated her work within a deeper historical context that extended beyond her personal life, one that accounted for Kenya’s fraught colonial history. As she notes in her recounting of the Greenbelt Movement, the political will to organize women in Kenya was not merely a fashionable accouterment of development language, but rather a corrective to a long history of gendered violence and political exclusion in colonial Kenya. She traced the genesis of the Greenbelt Movement to the national <indexterm class="singular" xml:id="b-9781474207300-IDX-432">
            <primary>Council of Women in Kenya, NCWK</primary>
          </indexterm>Council of Women in Kenya (NCWK), an organization founded in 1964, the year after Kenya’s <indexterm class="singular" xml:id="b-9781474207300-IDX-1090">
            <primary>Kenya</primary>
            <secondary>independence</secondary>
          </indexterm>independence. The NCWK itself, she noted, was an outgrowth of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1198">
            <primary>Maendeleo ya Wanawake Organization, MYWO</primary>
          </indexterm>Maendeleo ya Wanawake Organization (MYWO), an organization “established, packaged, and managed by wives of British administrators during the <indexterm class="singular" xml:id="b-9781474207300-IDX-1242">
            <primary>Mau Mau</primary>
          </indexterm>Mau Mau struggle” (2004: 31). That the genesis of a major women’s organization in Kenya was to be found in the governmental struggle against Mau Mau is significant, as it was structured around institutional powers and the political prerogatives of the state; the group was seen as a palliative for women eager to participate or at least support Mau Mau in the central highlands.</para>
<para xml:id="b-9781474207300-517">Greenbelt, however, was not only a women’s organization that sought to heal political and ethnic fault lines opened during colonial rule, but also one invested in environmental stewardship and building regional and national identity around the question of environmental care. The initial goal was, Maathai noted, “to raise the consciousness of community members to a level that would drive them to what was right for the environment because their hearts had been touch and their minds convinced.” This took place most saliently around the tree-planting campaign initiated by the GBM. The goals were multiple: to help community members establish a sustainable source of wood fuel, to generate income for rural women, to promote environmental consciousness among the youth, to empower people at the grass roots, to demonstrate the capacity of women in development, to curb soil erosion, and to disseminate information on environmental conservation (<link linkend="b-9781474207300-ref376" role="bib">Maathai 2004</link>: 33–40).</para>
<para xml:id="b-9781474207300-518">On the other side of the continent, and about three decades after Maathai had begun her work, Ken Saro-Wiwa was organizing a disruptive political machine against a postcolonial Nigerian state increasingly reliant on a political and economic structure that privileged the extraction and marketing of crude oil in the Niger Delta. An ethnic Ogoni intellectual and environmental activist, Saro-Wiwa hailed from the Ogoni region of what is now known as the Rivers State, in the country’s south-east. The <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1426">
            <primary>Ogoni people</primary>
          </indexterm>Ogoni people, together with the other ethnic groups of Rivers State, have been at the epicenter of the <indexterm class="endofrange" startref="b-9781474207300-IDX-829" xml:id="b-9781474207300-IDX-end89"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1082" xml:id="b-9781474207300-IDX-end123"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1384" xml:id="b-9781474207300-IDX-end142"/>ecological <?page value="86"?>degeneration of their lands, lands on which in the late 1950s <indexterm class="singular" xml:id="b-9781474207300-IDX-1656">
            <primary>Shell Oil</primary>
          </indexterm>Shell Oil discovered massive amounts of subterranean crude oil. Crude extraction in Rivers State began in earnest in 1958 and almost immediately thereafter the colonial government granted concessions to Shell Oil to commence drilling, who argued that only they could provide the technical know-how to extract, refine, and bring to market the newly discovered crude. And although there were efforts to “indigenize” the oil economy in the early postcolonial decade, particularly through the establishment of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1394">
            <primary>Nigerian National Petroleum Organization</primary>
          </indexterm>Nigerian National Petroleum Organization, the industry remained a “enclave industry,” one where “technology, management, and profits are mostly controlled by transnational corporations” (Adamson <emphasis role="italic">et al.</emphasis> 2012: 233).</para>
<para xml:id="b-9781474207300-519">For the Ogoni people in particular, the discovery of oil was catastrophic (<link linkend="b-9781474207300-fig3_3" role="figure">Figure 3.3</link>). One of many ethnic groups in a plural colonial and postcolonial Nigerian state, they were particularly vulnerable to Shell malpractice: spills, leaks, and political corruption saw their lands both violently expropriated and heavily polluted. It was out of these conditions that Ogoni political action against Shell and the complicit Nigerian state emerged in the 1980s and 1990s. Officially, the movement is believed to have begun with the drafting of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1425">
            <primary>Ogoni Bill of Rights</primary>
          </indexterm>Ogoni Bill of Rights in 1990, a document that Saro-Wiwa himself is believed to have authored. The document outlined not only the grievances of the Ogoni related to the injustices of Shell’s work in the region, but also emphasized the <?page value="87"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure3_3"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1804">
            <primary>technology</primary>
            <secondary>knowledge</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1815">
            <primary>The Movement of the Survival of the Ogoni People, MOSOP</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2067">
            <primary>World War II</primary>
          </indexterm>historical and cultural specificity of the Ogoni. This document laid the intellectual groundwork for what would become the Movement for the Survival of the Ogoni People (MOSOP), a political action group of which Saro-Wiwa was the head.</para>
<figure label="3.3" xlink:href="b-9781474207300-figure3_3" xlink:role="objectPointer" xml:id="b-9781474207300-fig3_3">
<info xml:id="b-9781474207300-520">
<title xml:id="b-9781474207300-521">Nigeria. Bomu, Kpor, Ogoni Area—ecological destruction due to petroleum. Credit: Markus Matzel/ullstein bild via Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-522">
<imageobject xml:id="b-9781474207300-523">
<imagedata align="center" fileref="images/fig3_3.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-525">The question of Ogoni history and cultural specificity was a critical component to articulating their ecological grievances. In a 1993 speech before three thousand Ogoni at the city of Bori, Saro-Wiwa made sure to couch his critiques of the petro-capitalism of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1389">
            <primary>Nigeria</primary>
          </indexterm>Nigeria in the language of indigeneity and the significance of the landscape. While celebrating the achievements of indigenous peoples of Asia, Australia, and the Americas in raising their political profile, African indigenous peoples received only “scant attention” from international organizations (<link linkend="b-9781474207300-ref526" role="bib">Tal 2006</link>: 186). The Ogoni were no different he argued than the <indexterm class="singular" xml:id="b-9781474207300-IDX-1226">
            <primary>Maori</primary>
          </indexterm>Maori of New Zealand and the <indexterm class="singular" xml:id="b-9781474207300-IDX-92">
            <primary>American Indians</primary>
          </indexterm>Indians of the Americas. But what bound them together more tightly within the category of indigeneity was “their common history … of the usurpation of their land and their resources, the destruction of their culture, and the eventual decimation of their people” (<link linkend="b-9781474207300-ref526" role="bib">Tal 2006</link>: 186). He went on: “For a multinational oil company, Shell, to take over thirty billion dollars from the small, defenseless Ogoni people and putting back nothing but degradation and death is a betrayal of all humanity” (<link linkend="b-9781474207300-ref526" role="bib">Tal 2006</link>: 187). Saro-Wiwa thus saw his activism as situated within a global conversation on belonging and environmental justice. And by linking the struggle of the Ogoni to broader political questions of nation, ethnicity, and ecology, he sought to internationalize the questions of ecological justice as a counterpart to the global movement of capital that enabled the destruction of <indexterm class="singular" xml:id="b-9781474207300-IDX-1427">
            <primary>Ogoniland</primary>
          </indexterm>Ogoniland. Ultimately, the state sought to silence Saro-Wiwa’s activism, after being arrested on trumped-up charges pursued by the <indexterm class="singular" xml:id="b-9781474207300-IDX-1">
            <primary>Abacha, Sani</primary>
          </indexterm>Abacha regime that accused him of participating, along with eight other activists, in the execution of four Ogoni chiefs. He was hanged in 1995 in the Rivers District capital city of Port Harcourt.<footnote label="2" role="end-bk-note" xml:id="b-9781474207300-fn3_2">
            <para xml:id="b-9781474207300-526">Saro-Wiwa’s assassination by the legal apparatus of the Nigerian states speaks to the ways in which environmentalists have emerged as targets for their work. Currently, South America has had one of the highest, if not the highest, number of environmental activists killed (see <link linkend="b-9781474207300-ref209" role="bib">Fonseca Q 2016</link>). While Latin America was not ostensibly an imperial space in the twentieth century, its relationship to networks of global capital and political power reflect similar positions in more recently decolonized spaces in Asia and Africa</para>
          </footnote>
        </para>
<para xml:id="b-9781474207300-527">The histories of environmental activists like Wangari <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1188">
            <primary>Maathai, Wangari</primary>
          </indexterm>Maathai and Ken Saro-Wiwa offer two distinct perspectives on the nature of postcolonial ecological politics and culture. The first, exemplified through the sketch of Maathai, was the reappropriation of technological and environmental know-how previously coopted by the techno-state of late colonial rule that affirmed presuppositions of backward colonial subjects. Secondly, Ken Saro-Wiwa’s life shows, among other things, that the echoes of what Frederick <indexterm class="startofrange" xml:id="b-9781474207300-IDX-424">
            <primary>Cooper, Frederick</primary>
          </indexterm>Cooper has identified as the “the gatekeeper state” model of <indexterm class="singular" xml:id="b-9781474207300-IDX-28">
            <primary>Africa</primary>
            <secondary>political economy</secondary>
          </indexterm>political economy in continental Africa had profound cultural resonances in the second half of the twentieth century.</para>
<para xml:id="b-9781474207300-528">As the previous section outlined, the rise of the techno-state was a process initiated by colonial powers in the aftermath of the Second World War as part of a shift toward “<indexterm class="singular" xml:id="b-9781474207300-IDX-485">
            <primary>development colonialism</primary>
          </indexterm>development colonialism.” With political independence, however, a cadre of urban, educated elites took control of the state bureaucracies that had once been occupied by Europeans. The image of the backward <indexterm class="endofrange" startref="b-9781474207300-IDX-1426" xml:id="b-9781474207300-IDX-end148"/>“native” <?page value="88"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-29">
            <primary>Africa</primary>
            <secondary>post-colonial</secondary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-797">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1083">
            <primary>Kenya</primary>
          </indexterm>would, in many cases, endures as a caricature of the rural citizen of the postcolonial state. Peasants from <indexterm class="singular" xml:id="b-9781474207300-IDX-522">
            <primary>Egypt</primary>
          </indexterm>Egypt, <indexterm class="singular" xml:id="b-9781474207300-IDX-1782">
            <primary>Tanzania</primary>
          </indexterm>Tanzania, <indexterm class="singular" xml:id="b-9781474207300-IDX-924">
            <primary>India</primary>
          </indexterm>India, and <indexterm class="singular" xml:id="b-9781474207300-IDX-966">
            <primary>Indochina</primary>
          </indexterm>Indochina emerged as both the symbolic cultural heart of the postcolonial state, while also as potential threats to its economic and cultural advancement. As such, the political inheritors of the colonial state directed their reformist efforts at these rural subjects. As Dipesh <indexterm class="singular" xml:id="b-9781474207300-IDX-336">
            <primary>Chakrabarty, Dipesh</primary>
          </indexterm>Chakrabarty has noted, there existed a “pedagogical style of developmental politics” in the “<indexterm class="singular" xml:id="b-9781474207300-IDX-1818">
            <primary>Third World</primary>
          </indexterm>Third World:” anticolonial and postcolonial leaders emphasized the need to “catch up with” western powers by devoting resources to scientific knowledge production and cultural modernization (<link linkend="b-9781474207300-ref110" role="bib">Chakrabarty 2010</link>: 54).</para>
<para xml:id="b-9781474207300-529">In Egypt, for example, Timothy <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1291">
            <primary>Mitchell, Timothy</primary>
          </indexterm>Mitchell points out that one of the clearest examples of this kind of postcolonial developmentalist ideology was made manifest in the construction of the <indexterm class="singular" xml:id="b-9781474207300-IDX-145">
            <primary>Aswan High Dam</primary>
          </indexterm>Aswan high dam in the south of Egypt. The high dam was spearheaded by the revolutionary nationalist government of Gamal Abdel <indexterm class="singular" xml:id="b-9781474207300-IDX-1331">
            <primary>Nasser, Gamal Abdel</primary>
          </indexterm>Nasser, but was ultimately an extension of the broader project of <indexterm class="singular" xml:id="b-9781474207300-IDX-146">
            <primary>Aswan Low Dam</primary>
          </indexterm>Aswan low dam, a British colonial endeavor meant to facilitate agricultural development through the management of flooding and irrigation techniques on the <indexterm class="singular" xml:id="b-9781474207300-IDX-1396">
            <primary>Nile River</primary>
          </indexterm>Nile. Nasser’s high dam wielded the political and ecological power that came with the dam’s construction for the political advancement of the postcolonial Egyptian regime, arguing that its construction in the 1960s was necessary to develop a postcolonial Egyptian state. In Nasser’s estimation, it would both allow the country to produce its own energy independence, and demonstrate its technical acumen. The state would “bring the expertise of modern engineering, technology, and social science to improve the defects of nature, to transform peasant agriculture, to repair the ills of society, and to fix the economy” (<link linkend="b-9781474207300-ref409" role="bib">Mitchell 2002</link>: 15).<footnote label="3" role="end-bk-note" xml:id="b-9781474207300-fn3_3">
            <para xml:id="b-9781474207300-530">See also the history of the Cahora-Bassa Dam in Mozambique. Like the Egyptian example, Cahora-Bassa was initially a Portuguese colonial-era project of environmental “improvement” that not only displaced native peoples but also provided electricity to apartheid South Africa. It was later celebrated by FRELIMO as necessary for the development of postcolonial Mozambique. See Isaacman and Isaacman (<link linkend="b-9781474207300-ref304" role="bib">2013</link>).</para>
          </footnote>
        </para>
<para xml:id="b-9781474207300-531">Wangari Maathai’s insistence on equipping rural women with <indexterm class="singular" xml:id="b-9781474207300-IDX-599">
            <primary>forestry</primary>
          </indexterm>forestry skills, though, was never in the service of the political prerogatives of the Kenyan state.<footnote label="4" role="end-bk-note" xml:id="b-9781474207300-fn3_4">
            <para xml:id="b-9781474207300-532">Kenya’s southern neighbor, Tanzania, saw state interventionism in the natural world as a critical component of advancing Julius Nyerere’s “African Socialism” agenda. See, for example, Schneider (<link linkend="b-9781474207300-ref483" role="bib">2014</link>).</para>
          </footnote> Maathai saw her work as enacting democratic change by pulling ecological expertise out of the realm of the institutionally sanctioned expert, and by foregrounding previously ignored methods of understanding, rationalizing, and existing with nature. Similarly, Saro-Wiwa’s struggle against the environmental damage and economic plundering of Nigeria affirms Frederick Cooper’s contention that postcolonial African nations were “successor” states in that they operated as an assemblage of inherited institutions and that they unflinchingly embraced the state project of development from their colonial pasts (<link linkend="b-9781474207300-ref146" role="bib">Cooper 2002</link>: 155–6). Development, of course, in south-eastern Nigeria meant the wholesale exploitation of crude <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1430">
            <primary>oil</primary>
          </indexterm>oil. Nigeria emerged in the postcolonial world, and in particular in relation to the production of crude oil, as exemplary of the “gatekeeper state,” where national governments acted as overseers and collectors of profit that these states could bring from the export of raw materials. In large part, then, questions of environmental stewardship were thus sidelined <indexterm class="endofrange" startref="b-9781474207300-IDX-424" xml:id="b-9781474207300-IDX-end34"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1188" xml:id="b-9781474207300-IDX-end128"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1389" xml:id="b-9781474207300-IDX-end143"/>under <?page value="89"?>this model of postcolonial statecraft to the prerogatives of globalizing capital through the facilitation and development of export-oriented markets.</para>
<para xml:id="b-9781474207300-533">Indeed, Saro-Wiwa’s political organizing illuminates the ways in which local political economies of oil exploitation not only lay the foundations for domestic political repression, but also how they undergird networks of production and exchange that supply the world with oil. This critique speaks poignantly to the contemporary political and ecological moment, as the relationship between oil production and postcolonial statecraft is front and center of American political and economic interests in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1497">
            <primary>Persian Gulf</primary>
          </indexterm>Persian Gulf and in growing concerns over the sustainability of carbon-driven economies. As Timothy Mitchell has shown, however, methods of crude oil extraction, refinement, and movement across space also shape the very political, social, and economic structures of the sites of production and consumption, as well as at intermediary sites. More specifically, oil defines debates over governance, citizenship, and belonging, a power that Mitchell (2001) calls “carbon democracy.” The reliance on carbon-based fuels in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1913">
            <primary>United States</primary>
          </indexterm>United States, moreover, is not merely a material reality but also a cultural one: the cultural significance of, say, the gas-powered automobile lays front and center of American cultural touchstones of expansion, mobility, and domesticity. So just as oil defines systems of governance and modes of articulating citizenship in places like <indexterm class="singular" xml:id="b-9781474207300-IDX-1121">
            <primary>Kuwait</primary>
          </indexterm>Kuwait and <indexterm class="singular" xml:id="b-9781474207300-IDX-1016">
            <primary>Iraq</primary>
          </indexterm>Iraq, so does it in the United States.</para>
<para xml:id="b-9781474207300-534">That these connections between carbon and governance in the United States render it a “petro-state” like those in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1272">
            <primary>Middle East</primary>
          </indexterm>Middle East for whom the title is usually reserved, speaks to intimate and enduring ties between ecological exploitation and global imperial power. Indeed, while the legacies of French, Portuguese, and British imperial power shaped the political and cultural histories of postcolonial nations, the ascendancy in the twentieth century of the United States as a global imperial force also contributed to the environmental histories of once colonized places. Indeed, as the <indexterm class="singular" xml:id="b-9781474207300-IDX-378">
            <primary>Cold War</primary>
          </indexterm>Cold War ran hot throughout much of <indexterm class="singular" xml:id="b-9781474207300-IDX-1142">
            <primary>Latin America</primary>
          </indexterm>Latin America, <indexterm class="singular" xml:id="b-9781474207300-IDX-17">
            <primary>Africa</primary>
          </indexterm>Africa, and <indexterm class="singular" xml:id="b-9781474207300-IDX-138">
            <primary>Asia</primary>
          </indexterm>Asia, the United States became the inheritor of a global political and economic order defined by European control over peoples, places, and resources. And while the United States, itself a settler state, had extended its formal political control over territories in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1460">
            <primary>Pacific Ocean</primary>
          </indexterm>Pacific and <indexterm class="singular" xml:id="b-9781474207300-IDX-323">
            <primary>Caribbean Sea</primary>
          </indexterm>Caribbean in the nineteenth and early twentieth centuries, American global expansion also shaped “natural worlds” of former European colonies in later years, including ones that do not produce crude oil.</para>
<para xml:id="b-9781474207300-535">South-east Asia is a particularly illustrative example where American power was articulated, in part, in relation to the natural world in the decades following the end of <indexterm class="singular" xml:id="b-9781474207300-IDX-645">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1525">
            <primary>Portugal</primary>
            <secondary>empire</secondary>
          </indexterm>empire. The <indexterm class="singular" xml:id="b-9781474207300-IDX-1985">
            <primary>Vietnam War</primary>
          </indexterm>Vietnam War, for example, proved to be an intractable conflict for the Americans not only because of the military strategy pursued by <indexterm class="singular" xml:id="b-9781474207300-IDX-1419">
            <primary>North Vietnam</primary>
          </indexterm>North Vietnamese forces, but also because of the difficulty of fighting a war in tropical rainforests. Throughout the 1960s, American forces initiated <indexterm class="endofrange" startref="b-9781474207300-IDX-797" xml:id="b-9781474207300-IDX-end84"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1291" xml:id="b-9781474207300-IDX-end137"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1430" xml:id="b-9781474207300-IDX-end150"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1623" xml:id="b-9781474207300-IDX-end169"/>operation <?page value="90"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure3_4"/>“<indexterm class="singular" xml:id="b-9781474207300-IDX-1563">
            <primary>Ranch Hand</primary>
          </indexterm>Ranch Hand,” which was the spraying of twenty million gallons of herbicide that defoliated millions of trees, allowing for American pilots more easily to identify targets that had once been obscured. <indexterm class="singular" xml:id="b-9781474207300-IDX-45">
            <primary>Agent Orange</primary>
          </indexterm>Agent Orange, as the herbicide is now widely known, would scar not only the landscape of Vietnam, but also the Vietnamese and Americans fighting in the war (<link linkend="b-9781474207300-fig3_4" role="figure">Figure 3.4</link>). Agent Orange was later identified as a cause of multiple forms of cancer and bodily disfigurement (<link linkend="b-9781474207300-ref252" role="bib">Haberman 2014</link>). The embedding of toxicity into the Vietnamese landscape, a task also advanced by the wanton use of <indexterm class="singular" xml:id="b-9781474207300-IDX-1329">
            <primary>Napalm</primary>
          </indexterm>napalm against Vietnamese civilians by the Americans, was mirrored in the bodies of those who fought there. As Leslie <indexterm class="singular" xml:id="b-9781474207300-IDX-1569">
            <primary>Regan, Leslie</primary>
          </indexterm>Regan as showed, not only had physical disfigurements emerged among those initially exposed to the herbicide, but also in the children of American soldiers, effectively inscribing the violence against the natural world into the genetic material of those who first inhabited it (<link linkend="b-9781474207300-ref469" role="bib">Reagan 2016</link>).</para>
<figure label="3.4" xlink:href="b-9781474207300-figure3_4" xlink:role="objectPointer" xml:id="b-9781474207300-fig3_4">
<info xml:id="b-9781474207300-536">
<title xml:id="b-9781474207300-537">A Fairchild C-123 Provider cargo plane sprays Agent Orange over a forest in North Vietnam. Credit: Bettmann/Contributor.</title>
</info>
<mediaobject xml:id="b-9781474207300-538">
<imageobject xml:id="b-9781474207300-539">
<imagedata align="center" fileref="images/fig3_4.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
</section>
<section xml:id="b-9781474207300-541">
<info xml:id="b-9781474207300-542">
<title xml:id="b-9781474207300-543">Conclusion</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-544">If the global environmental history of the twentieth century is, in part, a story of how technological change expanded the temporal and spatial scales of <?page value="91"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-620">
            <primary>France</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1084">
            <primary>Kenya</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1624">
            <primary>Saro-Wiwa, Ken</primary>
          </indexterm>human intervention in the natural world, a culturally focused history of how Western empires wielded that change reveals multiple stories on how colonial states and their postcolonial progeny produced difference through the register of human–environment relations. Synchronizing argumentative frameworks that emphasize the contingency of categories like empire and technology shows that imperial myth-making relied heavily on the assumed inability of non-European peoples to escape the ecological prisons Europeans presumed they inhabited. Technological <indexterm class="singular" xml:id="b-9781474207300-IDX-1798">
            <primary>technology</primary>
            <secondary>advancements</secondary>
          </indexterm>advancements in the twentieth century not only appeared to affirm this assumption, but also stood as evidence of an ever-evolving European cultural inheritance.</para>
<para xml:id="b-9781474207300-545">But these technological feats—the crossing of the desert by car or surveying the landscape by plane—often belied political instability. Technological change was not merely a tale of raw innovation, but rather a reaction to threat. The inability of the French to “pacify” the <indexterm class="singular" xml:id="b-9781474207300-IDX-1611">
            <primary>Sahara Desert</primary>
          </indexterm>Sahara and the fears of racial invasion in the Kenyan highlands pushed both settler communities to invest technological change with moral and cultural values that would mark them as different from the colonial subjects they shared space with. The legacies of these colonial cultures were ultimately inherited by postcolonial states. To this end, the lives of activists like Wangari <indexterm class="singular" xml:id="b-9781474207300-IDX-1189">
            <primary>Maathai, Wangari</primary>
          </indexterm>Maathai and Ken Saro Wiwa show just how colonial-era projects aimed at managing and exploiting the natural world ultimately molded questions of <indexterm class="singular" xml:id="b-9781474207300-IDX-360">
            <primary>citizenship</primary>
          </indexterm>citizenship, gender, and ethnicity in the postcolonial world.</para>
</section>
<?page value="92"?>
</chapter>
<chapter label="4" xml:id="b-9781474207300-chapter4">
<info xml:id="b-9781474207300-546">
<title xml:id="b-9781474207300-547">
          <?page value="93"?>Labor</title>
<author xlink:href="C0001" xlink:role="biblioAuID">
<personname role="first-last">
<firstname>Daniel</firstname> <surname>Bender</surname>
          </personname>
        </author>
<pagenums>93–114</pagenums>
<biblioid class="doi">10.5040/9781474207300.ch-004</biblioid>
<mediaobject xml:id="b-9781474207300-548">
<imageobject xml:id="b-9781474207300-549">
<imagedata fileref="pdfs/9781474207300.ch-004.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
<itermset xml:id="b-9781474207300-IDX-see8">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1122">
            <primary>Labor</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-264">
            <primary>British Honduras</primary>
            <see>Belize</see>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1420">
            <primary>Northern Rhodesia</primary>
            <see>Zambia</see>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-813">
            <primary>Great Britain</primary>
            <secondary>settlers</secondary>
          </indexterm>
        </itermset>
<copyright>
          <year>2019</year>
          <holder>Bloomsbury Publishing</holder>
        </copyright>
      </info>
<para role="fullOut" xml:id="b-9781474207300-550">In 1934, George <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1446">
          <primary>Orwell, George</primary>
        </indexterm>Orwell published <emphasis role="italic">Burmese Days</emphasis>, an alcohol-soaked depiction of life in an outpost of the teak-producing colony in the waning days of British rule in <indexterm class="singular" xml:id="b-9781474207300-IDX-279">
          <primary>Burma</primary>
        </indexterm>Burma. Orwell, most obviously, focused on the degradation of British colonists, trapped by their longing for a metropolitan home they had barely seen and by the grim reality of life in the humid colony. The novel is also a startling labor history. Its plot revolves around the evil plan of an indigenous government official to destroy his enemies, in particular a well-meaning native doctor seeking entry into the colonial club. The few white colonists nearby gather at the club for desultory conversation and many drinks. A refuge for white men and women surrounded by natives they hire, fear, and despise, the club is emblematic of a weary, bankrupt empire. Even ice has become a rare treat in the threadbare club, built, like the empire itself, on a foundation of racial <indexterm class="singular" xml:id="b-9781474207300-IDX-1549">
          <primary>race</primary>
          <secondary>exclusion</secondary>
        </indexterm>exclusion and <indexterm class="singular" xml:id="b-9781474207300-IDX-2019">
          <primary>white supremacy</primary>
        </indexterm>white supremacy. At the story’s climax, an angry native mob surrounds the club, a microcosm—again—of an empire besieged by colonial peoples increasingly reluctant to accede to an imperial racial division of labor.</para>
<para xml:id="b-9781474207300-551">In Orwell’s interpretation (so well versed in the experience of the European labor and <indexterm class="singular" xml:id="b-9781474207300-IDX-1672">
          <primary>socialist movements</primary>
        </indexterm>socialist movements), the uprising is not a radical rebellion or a labor struggle. Instead, he describes it as a spontaneous, if easily dispersed, mob intent on venting their rage on an obvious symbol of colonial rule. Looking out from the windows of the club, Orwell scorned the justification of empire as civilizing and modernizing. His native characters are a sad bunch: a devious low-level official who has (literally) fattened himself through his corruption; a doctor pathetically supportive of an empire that insulted him; a woman cynically selling sex to a white man; a disapproving, if loyal, servant; and a faceless crowd of workers hired to cut teak in Burma’s jungles. The white men <?page value="94"?>
        <indexterm class="singular" xml:id="b-9781474207300-IDX-1349">
          <primary>Nazis</primary>
          <secondary>ideology</secondary>
        </indexterm>and women, meanwhile, are middling sorts forced by the pressures of inheritance to seek their fortunes in the colonies.</para>
<para xml:id="b-9781474207300-552">From teak cutters to sex workers to servants, each of his characters reveals the vast mobilizations of labor of the British <indexterm class="startofrange" xml:id="b-9781474207300-IDX-798">
          <primary>Great Britain</primary>
          <secondary>empire</secondary>
        </indexterm>
        <indexterm class="singular" xml:id="b-9781474207300-IDX-807">
          <primary>Great Britain</primary>
          <secondary>empire exhibition (1924)</secondary>
        </indexterm>empire. The bitterness they all express provides an important insight into the labor and cultural history of the twilight years of imperialism. It highlights how notions of racial <indexterm class="singular" xml:id="b-9781474207300-IDX-1555">
          <primary>race</primary>
          <secondary>superiority</secondary>
        </indexterm>superiority had hardened over the nineteenth century and into the post-First <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2061">
          <primary>World War I</primary>
        </indexterm>World War years. Management regimes based on notions of race <indexterm class="singular" xml:id="b-9781474207300-IDX-1550">
          <primary>race</primary>
          <secondary>hierarchy</secondary>
        </indexterm>hierarchy struggled to contain the liberationist impulses of the millions mobilized to meet the labor needs of empire. Yet, like so many other European critics of empire, Orwell had little faith in the ability of Burmese teak workers to transform the empire. They were rioters, not revolutionaries.</para>
<para xml:id="b-9781474207300-553">Notions of racial difference profoundly shaped the multifarious experiences of those workers who made empires work. Yet that same racial logic that underpinned colonial <indexterm class="singular" xml:id="b-9781474207300-IDX-311">
          <primary>capitalism</primary>
        </indexterm>capitalism faltered under the stresses of economic collapse, <indexterm class="singular" xml:id="b-9781474207300-IDX-588">
          <primary>fascism</primary>
        </indexterm>Fascism and Nazism, and <indexterm class="singular" xml:id="b-9781474207300-IDX-379">
          <primary>Cold War</primary>
        </indexterm>Cold War. Organized workers also collectively challenged empire and the capitalism it forged. Yet Orwell’s dismissal of the resistance of ordinary people is telling. Both leaders of independence movements and imperial officials (and, too often, latter-day historians) treated “<indexterm class="singular" xml:id="b-9781474207300-IDX-1131">
          <primary>Labor</primary>
          <secondary>solidarity</secondary>
        </indexterm>solidarity” as little more than a slogan. It deserves closer analysis, set against the long and comparative histories of empire. At the end of the imperial age and into the era of <indexterm class="singular" xml:id="b-9781474207300-IDX-468">
          <primary>decolonization</primary>
        </indexterm>decolonization, how did shared cultures enable workers to stand together? What impact did solidarity have upon independence movements? How did working-class solidarities challenge the racialized systems of labor mobilization that shaped modern, global capitalism?</para>
<section xml:id="b-9781474207300-554">
<info xml:id="b-9781474207300-555">
<title xml:id="b-9781474207300-556">Representing the Colonized Working Class Between the Wars</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-557">In March 1924, the journalist Donald <indexterm class="singular" xml:id="b-9781474207300-IDX-1248">
            <primary>Maxwell, Donald</primary>
          </indexterm>Maxwell enjoyed a pre-opening tour of the British Empire exhibition in the London suburb of Wembley. The buildings and grounds were finished, but awaited their crowds. With the British Empire still reeling from the staggering costs—both human and financial—of the First World War, the British Empire Exhibition highlighted the commercial possibilities of empire. If Orwell’s <emphasis role="italic">Burmese Days</emphasis> presented a bleak picture of the whole empire embodied in the drama of a small colonial outpost, this world’s fair optimistically showcased progress and industry. First, Maxwell marveled at the soaring arches of the great halls advertising the mechanical genius of British industry and the many products exported to the metropole from the colonies.</para>
<para xml:id="b-9781474207300-558">Then, he found what he was truly looking for: the <indexterm class="singular" xml:id="b-9781474207300-IDX-42">
            <primary>African Village</primary>
          </indexterm>African Village. He boasted about the creativity of British carpenters, trade unionists who had <indexterm class="endofrange" startref="b-9781474207300-IDX-1446" xml:id="b-9781474207300-IDX-end152"/>so <?page value="95"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1345">
            <primary>Nazis</primary>
            <secondary>architecture</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1712">
            <primary>Soviet Union</primary>
            <secondary>construction</secondary>
          </indexterm>mastered their scientific skill that they could faithfully reproduce humble African houses with all their cracked, uneven corners. This was the Africa he—and visitors after him—longed to see: a preserve of the primitive, not an industrialized outpost of global capitalism (<link linkend="b-9781474207300-ref85" role="bib">Britton 2010</link>). Here in the African Village, the exhibition contrasted African picturesque savagery with British <indexterm class="singular" xml:id="b-9781474207300-IDX-808">
            <primary>Great Britain</primary>
            <secondary>industry</secondary>
          </indexterm>industry, a passage from savagery to civilization.</para>
<para xml:id="b-9781474207300-559">This was a common cultural trope, born in prewar <indexterm class="singular" xml:id="b-9781474207300-IDX-2076">
            <primary>world’s fairs</primary>
          </indexterm>world’s fairs and continued apace after the Armistice. In 1937, the <indexterm class="singular" xml:id="b-9781474207300-IDX-571">
            <primary>
              <emphasis role="italic">Exposition Internationale des Arts et Techniques dans la Vie Moderne</emphasis>
            </primary>
          </indexterm>Exposition Internationale des Arts et Techniques dans la Vie Moderne opened in Paris. The long shadow of the <indexterm class="singular" xml:id="b-9781474207300-IDX-528">
            <primary>Eiffel Tower</primary>
          </indexterm>Eiffel Tour tied the fair to prewar expositions that also showcased the many industrial triumphs of <indexterm class="singular" xml:id="b-9781474207300-IDX-23">
            <primary>Africa</primary>
            <secondary>European assumptions</secondary>
          </indexterm>European empires. Yet the imposing Soviet and Nazi buildings faced each other in a somber warning of future conflict and of the ideological currents of the new era. World’s fairs on both sides of the <indexterm class="singular" xml:id="b-9781474207300-IDX-151">
            <primary>Atlantic Ocean</primary>
          </indexterm>Atlantic persisted in their representation of colonial subjects, less as workers intensely engaged in the wage labor world of colonial capitalism, than as primitive curiosities (<link linkend="b-9781474207300-ref244" role="bib">Greenhalgh 1988</link>; <link linkend="b-9781474207300-ref50" role="bib">Barton 1994</link>). World’s fairs, of course, were not alone in picturing Africa and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-139">
            <primary>Asia</primary>
          </indexterm>Asia as remaining pockets of savagery in a modern world. Growing cinematic cultures, for example, including blockbuster films like “<indexterm class="singular" xml:id="b-9781474207300-IDX-1111">
            <primary>King Kong</primary>
          </indexterm>King Kong” or “<indexterm class="singular" xml:id="b-9781474207300-IDX-1792">
            <primary>Tarzan</primary>
          </indexterm>Tarzan,” still caste Africans as tribal peoples caught in savage jungles, not proletarians coerced into wage labor by the structures of imperial rule.</para>
<para xml:id="b-9781474207300-560">Yet world’s fairs were not free from working-class and union protest. Fairs were, as historians have only recently recognized, big workplaces and just as world’s fair were meant to represent the colonized world both in miniature and in ideal, so, too, did they represent a microcosm of a global working class fractured and divided along racial lines. At Wembley, for example, workers protested the “sweated” conditions of exposition workers and again in New York in 1939, <indexterm class="singular" xml:id="b-9781474207300-IDX-1869">
            <primary>unions</primary>
          </indexterm>unions actively organized those workers who built the buildings or performed music—except those imported from the tropics as evidence of savagery. Workers’ union wage, hours, and conditions demands extended only to white workers. Promoters were granted dispensations from “closed shop” enforcement only when they employed dancing girls from Bali or Malayan hunters (<link linkend="b-9781474207300-ref57" role="bib">Bender 2016</link>).</para>
<para xml:id="b-9781474207300-561">Interwar world’s fairs in London, Paris, Chicago, and New York deliberately enforced the gap between the imperial representation of colonized peoples as primitives and their proletarian lived experiences in places like <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2088">
            <primary>Zambia</primary>
          </indexterm>Zambia (formerly the colony of Northern Rhodesia), at the heart of the British southern African <indexterm class="singular" xml:id="b-9781474207300-IDX-1526">
            <primary>Portugal</primary>
            <secondary>empire</secondary>
          </indexterm>empire, or in rural <indexterm class="startofrange" xml:id="b-9781474207300-IDX-101">
            <primary>Angola</primary>
          </indexterm>Angola, one of the last vestiges of the Portuguese empire. In both cases, wage labor, instead of subsistence farming, was the norm rather than exception. Especially during and after the First World War, British <indexterm class="singular" xml:id="b-9781474207300-IDX-790">
            <primary>Great Britain</primary>
            <secondary>colonial officials</secondary>
          </indexterm>colonial officials sought to develop Zambia, the colony they once regarded as a labor reserve for <indexterm class="singular" xml:id="b-9781474207300-IDX-1684">
            <primary>South Africa</primary>
          </indexterm>South African mines. Even before the war, residents north of <indexterm class="endofrange" startref="b-9781474207300-IDX-798" xml:id="b-9781474207300-IDX-end85"/>the <?page value="96"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-33">
            <primary>Africa</primary>
            <secondary>resources</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1424">
            <primary>O’Keefe, Georgia</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1914">
            <primary>United States</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2087">
            <primary>Zambezi River</primary>
          </indexterm>Zambezi River had migrated in large numbers to mine mineral deposits in <indexterm class="singular" xml:id="b-9781474207300-IDX-2093">
            <primary>Zimbabwe</primary>
          </indexterm>Zimbabwe (formerly the colony of Southern Rhodesia). Postwar, with the construction of new railroads and the development of Zambian <indexterm class="singular" xml:id="b-9781474207300-IDX-427">
            <primary>copper</primary>
          </indexterm>copper mines, most native Zambian men had experienced <indexterm class="singular" xml:id="b-9781474207300-IDX-1132">
            <primary>Labor</primary>
            <secondary>wage</secondary>
          </indexterm>wage labor of some kind and duration. Coercive labor recruitment drew native men into wage economies. Local recruiters often threatened native men with jail for their inability to pay taxes in cash-poor economies unless they signed labor contracts (<link linkend="b-9781474207300-ref270" role="bib">Henderson 1974</link>).</para>
<para xml:id="b-9781474207300-562">If in Zambia the exploitation of cash-poor farmers induced wage labor, <indexterm class="singular" xml:id="b-9781474207300-IDX-1125">
            <primary>Labor</primary>
            <secondary>forced</secondary>
          </indexterm>forced labor was the official policy of the Portuguese in nearby Angola. Local officials collaborated with local police and native guards to enforce the labor tax (<emphasis role="italic">taxa braçal</emphasis>) (<link linkend="b-9781474207300-ref326" role="bib">Keese 2013</link>). Some worked in <indexterm class="singular" xml:id="b-9781474207300-IDX-369">
            <primary>coffee</primary>
          </indexterm>coffee and <indexterm class="singular" xml:id="b-9781474207300-IDX-431">
            <primary>cotton</primary>
          </indexterm>cotton plantations; others who remained small-scale farmers were forced to plant products (especially cotton) critical for the colony’s export and extractive economy. The recruitment, transport, and disciplining of workers in the abusive conditions of European-owned plantation or state projects, became the leading priority of the Portuguese <indexterm class="singular" xml:id="b-9781474207300-IDX-1123">
            <primary>Labor</primary>
            <secondary>colonial</secondary>
          </indexterm>colonial state even into the post-Second World War era (<link linkend="b-9781474207300-ref394" role="bib">Martin 2012</link>).</para>
<para xml:id="b-9781474207300-563">The lean times of the interwar years had both economic and cultural effects. The First World War had generated vast new demands for colonial labor (a pattern that would be repeated in the next war), and its effects on Euro-American empires were profound. In the face of new strains placed on Western empires, the era of <indexterm class="singular" xml:id="b-9781474207300-IDX-1635">
            <primary>self-determination</primary>
          </indexterm>self-determination in Europe was accompanied by a hardening of the racial logic of colonial <indexterm class="singular" xml:id="b-9781474207300-IDX-312">
            <primary>capitalism</primary>
          </indexterm>capitalism throughout the tropics. Imperial advocates employed a racial logic to defend the insatiable demands of Europe and America for <indexterm class="singular" xml:id="b-9781474207300-IDX-1795">
            <primary>teak</primary>
          </indexterm>teak, <indexterm class="singular" xml:id="b-9781474207300-IDX-1589">
            <primary>rubber</primary>
          </indexterm>rubber, tropical fruit, cotton, coffee, <indexterm class="singular" xml:id="b-9781474207300-IDX-1794">
            <primary>tea</primary>
          </indexterm>tea, <indexterm class="singular" xml:id="b-9781474207300-IDX-1485">
            <primary>peanuts</primary>
          </indexterm>peanuts, and oils. As the German <indexterm class="singular" xml:id="b-9781474207300-IDX-728">
            <primary>Germany</primary>
            <secondary>empire</secondary>
          </indexterm>empire lost its colonies in the postwar treaties, the realization that “self-determination” was an ideal for Europeans alone was not lost on colonial workers in Asia and Africa and the <indexterm class="singular" xml:id="b-9781474207300-IDX-318">
            <primary>Caribbean</primary>
          </indexterm>Caribbean.</para>
<para xml:id="b-9781474207300-564">In the era of high imperialism before the war, colonial boosters had defended empire against critics like John <indexterm class="singular" xml:id="b-9781474207300-IDX-874">
            <primary>Hobson, John</primary>
          </indexterm>Hobson by arguing that empire was actually a selfless project that led colonized peoples from savagery to civilization. Yet set against the backdrop of the Western Front, claims to civilizing were hard to defend. Instead, increasingly, colonial governments advanced models of empire as partnership, modernizing more than civilizing (<link linkend="b-9781474207300-ref5" role="bib">Adas 2004</link>). Vast amounts of labor had been mobilized before the war for the grand projects of high imperialism like the <indexterm class="singular" xml:id="b-9781474207300-IDX-1477">
            <primary>Panama Canal</primary>
          </indexterm>Panama Canal (<link linkend="b-9781474207300-ref243" role="bib">Greene 2009</link>). Such projects, like plantations, docks, and mines, still needed managing.</para>
<para xml:id="b-9781474207300-565">Thus in 1939, when the artist Georgia O’Keeffe arrived in Hawai’i at the invitation of the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-494">
            <primary>Dole Pineapple Company</primary>
          </indexterm>Dole Pineapple Company, she encountered both tropical lushness and roiling labor ferment. Just the year before, police had attacked an unarmed and multiethnic union demonstration. A 1922 strike that had engaged thousands of Chinese, Philippine, and Japanese sugar workers was also still fresh in the memory of islanders (<link linkend="b-9781474207300-ref321" role="bib">Jung 2006</link>). As O’Keeffe visited <indexterm class="endofrange" startref="b-9781474207300-IDX-101" xml:id="b-9781474207300-IDX-end8"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-139" xml:id="b-9781474207300-IDX-end12"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2061" xml:id="b-9781474207300-IDX-end224"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2088" xml:id="b-9781474207300-IDX-end229"/>Hawai’i’s <?page value="97"?>sprawling pineapple plantations, she witnessed the human side of a vast Pacific mobilization of <indexterm class="singular" xml:id="b-9781474207300-IDX-1501">
            <primary>Philippines</primary>
          </indexterm>Philippine, Japanese, Chinese, and Portuguese workers to cut cane and pineapples (<link linkend="b-9781474207300-ref432" role="bib">Okihiro 2009</link>: 148–9; <link linkend="b-9781474207300-ref335" role="bib">Khor 2014</link>: 102–27). O’Keeffe, though, had been brought to the island to produce advertising copy and, soon, her colorful picture of a pineapple bud graced Dole ads.</para>
<para xml:id="b-9781474207300-566">When they diverted attention to lushness and away from the reality of the industrialized work of colonial economies, O’Keeffe’s illustrations met metropolitan consumers’ expectations of tropical abundance. The gap between the actuality of imperial economies and representations of the colonized tropics produced its own forms of cultural labor. Even alongside the labor conflict that gripped <indexterm class="singular" xml:id="b-9781474207300-IDX-859">
            <primary>Hawai’i</primary>
          </indexterm>Hawai’i, the islands were experiencing a boom in tourists arriving by ship and, soon, plane. Upon arrival, lei sellers greeted them. For tourists, it was ample proof that they had stepped into a friendly paradise; for sellers, lei-making was hard work. The leis’ flowers “went a long way towards recasting imperialism into a fragile relationship characterized by a longed-for welcome and benevolent friendship,” notes Vernadette Vicuña <indexterm class="singular" xml:id="b-9781474207300-IDX-758">
            <primary>Gonzalez, Vernadette Vicuña</primary>
          </indexterm>Gonzalez (<link linkend="b-9781474207300-ref238" role="bib">2015</link>: 161–84). New <indexterm class="singular" xml:id="b-9781474207300-IDX-1828">
            <primary>tourism</primary>
          </indexterm>tourism industry helped Americans make peace with the reality of an empire characterized by economic power, military presence, and geographic expansion.</para>
<para xml:id="b-9781474207300-567">Lei makers, like those working hard in world’s fair villages, were <indexterm class="singular" xml:id="b-9781474207300-IDX-346">
            <primary>China</primary>
            <secondary>laborers</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1057">
            <primary>Japan</primary>
            <secondary>laborers</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1529">
            <primary>Portugal</primary>
            <secondary>laborers</secondary>
          </indexterm>laborers whose very livelihood depended on performing the roles demanded by Euro-American visitors. Yet they were also defending longstanding cultural practices, like the giving of leis, against the intrusion of outsiders. Their labor, rather than complicit or collaborationist, was part of the way the mobilization of labor needed by empire depended on notions of racial <indexterm class="singular" xml:id="b-9781474207300-IDX-1551">
            <primary>race</primary>
            <secondary>hierarchy</secondary>
          </indexterm>hierarchy that were at once firmly defended and filled with contradictions.</para>
</section>
<section xml:id="b-9781474207300-568">
<info xml:id="b-9781474207300-569">
<title xml:id="b-9781474207300-570">Race, Rule, and Cultures of Racial Management Between the Wars</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-571">In 1921, the South African mining industry was suffering in a postwar slump. As <indexterm class="singular" xml:id="b-9781474207300-IDX-754">
            <primary>gold</primary>
          </indexterm>gold prices fell, mining companies sought to save money by opening a few slight doors for the promotion of black miners, a cost-cutting move, not a baby-step toward racial equality. In an industry defined by the color line, black workers still did the most perilous work at the worst pay. Yet in a troubled postwar world, as the imperatives of capital sometimes conflicted with the cultural demands of <indexterm class="singular" xml:id="b-9781474207300-IDX-2020">
            <primary>white supremacy</primary>
          </indexterm>white supremacy, white mineworkers went on a <indexterm class="singular" xml:id="b-9781474207300-IDX-1742">
            <primary>strikes</primary>
          </indexterm>strike.</para>
<para xml:id="b-9781474207300-572">Strike became rebellion. In the <indexterm class="singular" xml:id="b-9781474207300-IDX-1564">
            <primary>Rand Revolt</primary>
          </indexterm>Rand Revolt, armed white mineworkers and their supporters—including the new <indexterm class="singular" xml:id="b-9781474207300-IDX-406">
            <primary>Communist Party of South Africa</primary>
          </indexterm>Communist Party of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1685">
            <primary>South Africa</primary>
          </indexterm>South Africa—occupied a handful of cities and Johannesburg suburbs. “Workers of the world unite and fight for a white South Africa,” read the slogan. South African Prime Minister Jan <indexterm class="singular" xml:id="b-9781474207300-IDX-1671">
            <primary>Smuts, Jan</primary>
          </indexterm>Smuts called upon 20,000 troops to quell the <indexterm class="endofrange" startref="b-9781474207300-IDX-494" xml:id="b-9781474207300-IDX-end42"/>insurrection <?page value="98"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure4_1"/>(<link linkend="b-9781474207300-fig4_1" role="figure">Figure 4.1</link>). The strike suppressed, the revolt still drew the battle lines for almost a century’s fight against white minority rule in South Africa as it passed from imperial dominion status to independent republic. By 1924, the National Party came to power and introduced a swathe of legislation enshrining the principle of racial segregation and laying the groundwork for <indexterm class="singular" xml:id="b-9781474207300-IDX-116">
            <primary>apartheid</primary>
          </indexterm>Apartheid. The updated <indexterm class="singular" xml:id="b-9781474207300-IDX-1281">
            <primary>Mines and Work Act (1924)</primary>
          </indexterm>Mines and Work Act (1924) updated for a new era the racialized systems of mobilizing workers for the empire (<link linkend="b-9781474207300-ref342" role="bib">Krikler 2005</link>; <link linkend="b-9781474207300-ref55" role="bib">Béliard 2016</link>).</para>
<figure label="4.1" xlink:href="b-9781474207300-figure4_1" xlink:role="objectPointer" xml:id="b-9781474207300-fig4_1">
<info xml:id="b-9781474207300-573">
<title xml:id="b-9781474207300-574">Mounted Police patrol the South African mine region during the Rand Revolt. Credit: Bettmann/Contributor.</title>
<itermset xml:id="b-9781474207300-IDX-see9">
              <indexterm class="singular" xml:id="b-9781474207300-IDX-1695">
                <primary>South African National Party</primary>
              </indexterm>
              <indexterm class="singular" xml:id="b-9781474207300-IDX-1207">
                <primary>Malaya</primary>
              </indexterm>
              <indexterm class="singular" xml:id="b-9781474207300-IDX-1128">
                <primary>Labor</primary>
                <secondary>race</secondary>
              </indexterm>
              <indexterm class="singular" xml:id="b-9781474207300-IDX-89">
                <primary>Amazon River</primary>
              </indexterm>
            </itermset>
</info>
<mediaobject xml:id="b-9781474207300-575">
<imageobject xml:id="b-9781474207300-576">
<imagedata align="center" fileref="images/fig4_1.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-578">Rather than an aberration of history, South Africa’s Apartheid should be recognized as part of the long legacy of racial logic in the managing of colonial capitalism—a culture of racial management. In <indexterm class="singular" xml:id="b-9781474207300-IDX-246">
            <primary>Brazil</primary>
          </indexterm>Brazil, Henry <indexterm class="singular" xml:id="b-9781474207300-IDX-597">
            <primary>Ford, Henry</primary>
          </indexterm>Ford (who also brought production to South Africa) also connected fantasies of modernization to a racial logic (<link linkend="b-9781474207300-ref6" role="bib">Adas 2006</link>). In 1928, Ford turned to the Amazonian rainforest to produce the <indexterm class="singular" xml:id="b-9781474207300-IDX-1590">
            <primary>rubber</primary>
          </indexterm>rubber he needed to outfit his new Model A car. Like a world’s fair visitor, he contrasted the vigor and vision of American colonies with the timeless savagery of the rainforest. He believed that he—and his managers—could tame the jungle with American know-how and, in the process, free his company from a dependence on British companies and their Malayan rubber plantations. As large as many colonies, <indexterm class="startofrange" xml:id="b-9781474207300-IDX-598">
            <primary>Fordlandia</primary>
          </indexterm>Fordlandia, as Ford boldly named <indexterm class="endofrange" startref="b-9781474207300-IDX-1685" xml:id="b-9781474207300-IDX-end176"/>his <?page value="99"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1390">
            <primary>Nigeria</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2068">
            <primary>World War II</primary>
          </indexterm>vast plantation, perfectly embodied the merging of extractive capitalism and the vision of post-First World War imperialism as a strategy for <indexterm class="singular" xml:id="b-9781474207300-IDX-1296">
            <primary>modernization</primary>
          </indexterm>modernization (<link linkend="b-9781474207300-ref241" role="bib">Grandin 2009</link>; <link linkend="b-9781474207300-ref474" role="bib">Roediger and Esch 2012</link>: 122). Fordlandia with its model towns complete with city squares, golf courses, and flush toilets, was bound for failure. Managers knew little about how to grow rubber and the saplings died of leaf blight. Local <indexterm class="singular" xml:id="b-9781474207300-IDX-1653">
            <primary>sex</primary>
            <secondary>workers</secondary>
          </indexterm>workers rejected coercive labor rules. Even canned goods and American burgers led to open revolt in 1930 when raging workers (real-life versions of those besieging <indexterm class="singular" xml:id="b-9781474207300-IDX-1447">
            <primary>Orwell, George</primary>
          </indexterm>Orwell’s Burmese club) destroyed trucks, tractors, and time clocks. By 1945, Henry <indexterm class="singular" xml:id="b-9781474207300-IDX-596">
            <primary>Ford II, Henry</primary>
          </indexterm>Ford II quietly sold the area back to the Brazilian government at a significant loss.</para>
<para xml:id="b-9781474207300-579">Why did Fordlandia fail so miserably? Its ruins, today partly reclaimed by the rainforest, have different stories to tell. On one hand, they reveal the insistence that American <indexterm class="singular" xml:id="b-9781474207300-IDX-1958">
            <primary>United States</primary>
            <secondary>technology</secondary>
          </indexterm>technology and industrial knowledge were the only roads to modernization. Deaf to local knowledge and understandings of climate, health, and environment, Ford’s engineers planted rubber trees that would inevitably shrivel and die. Ford sought to mobilize workers upon the same cultural terms trading social control for higher wages that he used in his Detroit factories. Ultimately, Ford turned to the same methods of coercion and military power used in other imperial circumstances.</para>
<para xml:id="b-9781474207300-580">Ford planned Fordlandia based on his own moral strictures, banning prostitution, alcohol, and even tobacco. Yet the new labor colony actually became a ribald city. Recent scholarship in the history of <indexterm class="singular" xml:id="b-9781474207300-IDX-799">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>empire has focused on the intimate encounters that it created. Only rarely, though, have historians recognized that the intimacies of colonial encounters were also laboring encounters of cooking, cleaning, nursing, and raising children (<link linkend="b-9781474207300-ref121" role="bib">Choy 2003</link>; <link linkend="b-9781474207300-ref512" role="bib">Stoler 2006</link>; <link linkend="b-9781474207300-ref43" role="bib">Ballantyne and Burton 2009</link>). Like so many colonial capitalists before him, Ford longed to regulate the intimate and sexual encounters between colonizers and colonized, but the formal demand for primarily male workers in Fordlandia or other mining camps, plantations, docks, railroads, and military bases also mobilized sexual labor in more informal ways. Stretching back to the nineteenth century, the British Empire regulated and licensed <indexterm class="singular" xml:id="b-9781474207300-IDX-1647">
            <primary>sex</primary>
            <secondary>brothels</secondary>
          </indexterm>brothels through the medical examination of <indexterm class="singular" xml:id="b-9781474207300-IDX-2034">
            <primary>women</primary>
            <secondary>sex workers</secondary>
          </indexterm>sex workers. If the <indexterm class="singular" xml:id="b-9781474207300-IDX-1003">
            <primary>interwar period</primary>
          </indexterm>interwar years witnessed such a renewed concern about “white slavery” that the <indexterm class="singular" xml:id="b-9781474207300-IDX-1154">
            <primary>League of Nations</primary>
          </indexterm>League of Nations released a report in 1927, its worries were restricted only to white female sex workers (<link linkend="b-9781474207300-ref582" role="bib">White 1980</link>; <link linkend="b-9781474207300-ref279" role="bib">Höhn and Moon 2010</link>).</para>
<para xml:id="b-9781474207300-581">During the Second World War and the postcolonial wars that followed, displaced, mobile male sailors and soldiers had ready cash to pay sexual laborers. The experiences of female workers in colonial Lagos are illustrative of the sexual, intimate, and laboring encounters catalyzed by military mobilization. A port city with a large migrant population, Lagos was a strategic British outpost, visited by both sailors patrolling the equatorial <indexterm class="singular" xml:id="b-9781474207300-IDX-152">
            <primary>Atlantic Ocean</primary>
          </indexterm>Atlantic and by soldiers protecting British African possessions. If wartime British authorities tacitly <?page value="100"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1129">
            <primary>Labor</primary>
            <secondary>recruitment</secondary>
          </indexterm>acknowledged the sex trade by introducing the familiar practice of medical examination, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1127">
            <primary>Labor</primary>
            <secondary>mobilization</secondary>
          </indexterm>mobilization of sex workers was informal, depending on acquaintances or even family friends (<link linkend="b-9781474207300-ref227" role="bib">George 2014</link>).</para>
<para xml:id="b-9781474207300-582">Military bases, as Cynthia <indexterm class="singular" xml:id="b-9781474207300-IDX-537">
            <primary>Enloe, Cynthia</primary>
          </indexterm>Enloe has importantly written, represented critical outposts of empire, especially with the increasing power of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1915">
            <primary>United States</primary>
          </indexterm>United States (2014). By the end of the Second World War and into the <indexterm class="singular" xml:id="b-9781474207300-IDX-380">
            <primary>Cold War</primary>
          </indexterm>Cold War, the United States maintained military bases stretching across the <indexterm class="singular" xml:id="b-9781474207300-IDX-1461">
            <primary>Pacific Ocean</primary>
          </indexterm>Pacific and into the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-319">
            <primary>Caribbean</primary>
          </indexterm>Caribbean, as well as in Europe. American forces occupied vast military bases in <indexterm class="singular" xml:id="b-9781474207300-IDX-1113">
            <primary>Korea</primary>
          </indexterm>Korea after the Second World War and during the <indexterm class="singular" xml:id="b-9781474207300-IDX-1116">
            <primary>Korean War</primary>
          </indexterm>Korean War, as well as in the former colonies of <indexterm class="singular" xml:id="b-9781474207300-IDX-1978">
            <primary>Vietnam</primary>
          </indexterm>Vietnam and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1502">
            <primary>Philippines</primary>
          </indexterm>Philippines. If, as Seungsook <indexterm class="singular" xml:id="b-9781474207300-IDX-1303">
            <primary>Moon, Seungsook</primary>
          </indexterm>Moon notes, postwar Koreans regarded Americans as liberators, soldiers understood their occupation in different and imperial ways. They expected sexual rewards for their fighting and like the British colonial officials before them, American administrators began regular examination of Korean prostitutes. As postwar became Cold War and Vietnam War, <indexterm class="singular" xml:id="b-9781474207300-IDX-1433">
            <primary>Okinawa</primary>
          </indexterm>Okinawa and Korea even created special zones on the edges of sprawling American bases where prostitution was regulated and permitted.</para>
</section>
<section xml:id="b-9781474207300-583">
<info xml:id="b-9781474207300-584">
<title xml:id="b-9781474207300-585">Solidarity and Cultures of Resistance</title>
<itermset xml:id="b-9781474207300-IDX-see10">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-1574">
              <primary>resistance, laborers</primary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-586">Lagos, Okinawa, and Fordlandia all represent different efforts at imperial labor mobilization. Lagos was a colonial city. Okinawa was, first, an occupied territory and later the site for a massive American military base. Fordlandia was a vast plantation and company town (<link linkend="b-9781474207300-ref169" role="bib">Dinius and Vergara 2011</link>). In such divergent forms of imperial labor mobilization, could workers succeed in blunting the power of colonialism and <indexterm class="singular" xml:id="b-9781474207300-IDX-313">
            <primary>capitalism</primary>
          </indexterm>capitalism, especially at a time when colonial officials were seeking greater output and accelerated extraction of resources all the while decreasing expenditures (<link linkend="b-9781474207300-ref560" role="bib">van der Linden 2008</link>: 173–286)?</para>
<para xml:id="b-9781474207300-587">A return to <indexterm class="startofrange" xml:id="b-9781474207300-IDX-102">
            <primary>Angola</primary>
          </indexterm>Angola provides some insights. Local peoples challenged in subtle ways the labor mobilizations upon which the colony depended. In what should be interpreted as an astute understanding of intercolonial politics, residents took advantage of the under-policed borders between empires and colonies by hiding out on the other side of the border when labor recruiters neared. Similarly, their patterns of migration, sometimes from rural areas to cities and even their insistence upon day labor as opposed to long-term labor contracts, represent examples of working people subtly challenging the terms of colonial capitalism (<link linkend="b-9781474207300-ref484" role="bib">Scott 1990</link>).</para>
<para xml:id="b-9781474207300-588">This focus on the informal and cultural roots of resistance against colonial capitalism itself raises several questions about solidarity as a cultural practice of resistance. First, was the resistance of colonized workers grounded in a preindustrial culture and community or was it the collective and individual resistance of a proletarianized working class? Second, when and how did their resistance against the conditions and terms of their lives in employment <indexterm class="endofrange" startref="b-9781474207300-IDX-598" xml:id="b-9781474207300-IDX-end50"/>merge <?page value="101"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1948">
            <primary>United States</primary>
            <secondary>military</secondary>
          </indexterm>with opposition to <indexterm class="singular" xml:id="b-9781474207300-IDX-646">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>empire itself? Dipesh <indexterm class="singular" xml:id="b-9781474207300-IDX-337">
            <primary>Chakrabarty, Dipesh</primary>
          </indexterm>Chakrabarty has argued for the persistence of “illiberal” and “pre-bourgeois” traditions at the heart of colonial capitalism. In his study of Calcutta’s jute mills, Chakrabarty identified forms of managerial control, methods of labor mobilization, and worker solidarity within the “undemocratic cultural codes of Indian society” (<link linkend="b-9781474207300-ref109" role="bib">1989</link>: 229). Rather than assuming that colonial workers were inevitably incorporated into a “third world” proletariat, Chakrabarty urged historians to examine the cultural roots of both colonial resistance and capitalism.</para>
<para xml:id="b-9781474207300-589">Still, the kinds of resistance historians have typically associated with metropolitan workers, notably unions and strikes, were hardly exotic organizations for colonial laborers. Rather, whether in <indexterm class="singular" xml:id="b-9781474207300-IDX-925">
            <primary>India</primary>
          </indexterm>India or Angola, local collective movements—including <indexterm class="singular" xml:id="b-9781474207300-IDX-1834">
            <primary>trade unions</primary>
          </indexterm>trade unions—were firmly rooted in indigenous forms of group affiliation and communities (<link linkend="b-9781474207300-ref52" role="bib">Basu 2004</link>). Cultural practices and traditions, far from immutable, could and did change as workers formed new collective identities alongside those of caste and religion. <indexterm class="singular" xml:id="b-9781474207300-IDX-2038">
            <primary>working class</primary>
          </indexterm>Working-class movements throughout the colonized world emerged and constructed forms of solidarity in the interwar years, not because of metropolitan models, but often in the face of real resistance from established metropolitan unions (<link linkend="b-9781474207300-ref111" role="bib">Chandavarkar 1994</link>; <link linkend="b-9781474207300-ref495" role="bib">Simeon 1995</link>; <link linkend="b-9781474207300-ref319" role="bib">Joshi 2003</link>; <link linkend="b-9781474207300-ref154" role="bib">Curless 2016</link>: 1–19). Indeed, as the experience of Ho Chi <indexterm class="singular" xml:id="b-9781474207300-IDX-1283">
            <primary>Minh, Ho Chi</primary>
          </indexterm>Minh, the Vietnamese anticolonial leader suggests, forms of anticolonial and anticapitalist politics, such as <indexterm class="singular" xml:id="b-9781474207300-IDX-403">
            <primary>communism</primary>
          </indexterm>Communism, could merge organically with locally cultivated forms of resistance.</para>
</section>
<section xml:id="b-9781474207300-590">
<info xml:id="b-9781474207300-591">
<title xml:id="b-9781474207300-592">Colonial Solidarity in the Great Depression</title>
<itermset xml:id="b-9781474207300-IDX-see11">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-818">
              <primary>Great Depression</primary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-593">Ho Chi-Minh, before he challenged French colonialism and American militarism, was one of the millions mobilized for work in the colonial capitalist global economy. Ho was drawn to the imperial metropole where he labored, ironically enough, making <emphasis role="italic">faux</emphasis> Chinese “antiques” in Paris. After the <indexterm class="singular" xml:id="b-9781474207300-IDX-233">
            <primary>Bolshevik Revolution</primary>
          </indexterm>Bolshevik revolution, he was drawn, instinctively, to <indexterm class="singular" xml:id="b-9781474207300-IDX-1163">
            <primary>Lenin, Vladimir</primary>
          </indexterm>Lenin, not because he had yet studied <indexterm class="singular" xml:id="b-9781474207300-IDX-1231">
            <primary>Marx, Karl</primary>
          </indexterm>Marx or his Russian followers, but because he regarded Lenin as a patriotic liberator. Ho, like many working-class leaders across the colonies, combined nationalism and patriotism with a growing belief in <indexterm class="singular" xml:id="b-9781474207300-IDX-1233">
            <primary>Marxism-Leninism</primary>
          </indexterm>Marxism-Leninism as responses to imperialism. While late imperial policy tended to fear, imprison, and ultimately negotiate with comparatively well-off and educated anticolonial figures, working-class collective movements played a critical role in destabilizing colonial regimes as early as the Great Depression (<link linkend="b-9781474207300-ref118" role="bib">Chi-Minh 1970</link>: 156–8).</para>
<para xml:id="b-9781474207300-594">Working-class resistance challenged colonial regimes from <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1040">
            <primary>Jamaica</primary>
          </indexterm>Jamaica to <indexterm class="singular" xml:id="b-9781474207300-IDX-680">
            <primary>French West Africa</primary>
          </indexterm>French West Africa to India, not necessarily because they were deliberately anticolonial in focus, but because they defied the racial underpinnings of the colonial system. In 1938, for example, strikes in Jamaica were the climax of a general labor uprising throughout the Caribbean (<link linkend="b-9781474207300-fig4_2" role="figure">Figure 4.2</link>). The export of <indexterm class="singular" xml:id="b-9781474207300-IDX-1754">
            <primary>sugar</primary>
          </indexterm>sugar, <indexterm class="endofrange" startref="b-9781474207300-IDX-102" xml:id="b-9781474207300-IDX-end9"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-185">
            <primary>bananas</primary>
          </indexterm>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-319" xml:id="b-9781474207300-IDX-end26"/>bananas, <?page value="102"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure4_2"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-213">
            <primary>Belize</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1431">
            <primary>oil</primary>
          </indexterm>oil, and <indexterm class="singular" xml:id="b-9781474207300-IDX-201">
            <primary>bauxite</primary>
          </indexterm>bauxite remained the cornerstone of local economies, but prices and demand had dropped in the lean Depression years, impoverishing already precarious populations. As Jamaican labor leader, Alexander <indexterm class="startofrange" xml:id="b-9781474207300-IDX-285">
            <primary>Bustamante, Alexander</primary>
          </indexterm>Bustamante reported in a letter to the <emphasis role="italic">Manchester Guardian</emphasis>: “hundreds of ragged men, women, and children marched to the doors of the prison in Kingston pleading for admittance so that they might get food” (<link linkend="b-9781474207300-ref440" role="bib">Palmer 2014</link>: 31).</para>
<figure label="4.2" xlink:href="b-9781474207300-figure4_2" xlink:role="objectPointer" xml:id="b-9781474207300-fig4_2">
<info xml:id="b-9781474207300-595">
<title xml:id="b-9781474207300-596">Alexander Bustamante leads a march of striking dock workers and other laborers in Kingston, Jamaica, 1938. Credit: Bettmann/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-597">
<imageobject xml:id="b-9781474207300-598">
<imagedata align="center" fileref="images/fig4_2.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-600">Meanwhile, for the island’s few white residents, a life of racialized privilege combined intimacy with female black servants with strict racial segregation. As Jamaica approached the centenary of the abolition of slavery, white planters still owned the most fertile land and the colonial labor system depended on the representation of a sunny island of happy, picturesque natives, eager to serve. As one white resident boasted: “women bow when white people pass; greet you as ‘master’ or ‘mistress’” (<link linkend="b-9781474207300-ref440" role="bib">Palmer 2014</link>: 72–3). The <indexterm class="singular" xml:id="b-9781474207300-IDX-322">
            <primary>Caribbean Labor Revolt</primary>
          </indexterm>Caribbean labor revolt challenged this poisonous image of Jamaican workers as loyal subjects. The strike wave began in 1934, hitting sugar fields, banana plantations, docks, and oilfields in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1848">
            <primary>Trinidad</primary>
          </indexterm>Trinidad, Saint <indexterm class="singular" xml:id="b-9781474207300-IDX-1729">
            <primary>St. Kitts</primary>
          </indexterm>Kitts, Saint <indexterm class="singular" xml:id="b-9781474207300-IDX-1731">
            <primary>St. Vincent</primary>
          </indexterm>Vincent, Saint <indexterm class="singular" xml:id="b-9781474207300-IDX-1730">
            <primary>St. Lucia</primary>
          </indexterm>Lucia, <indexterm class="singular" xml:id="b-9781474207300-IDX-195">
            <primary>Barbados</primary>
          </indexterm>Barbados, the <indexterm class="singular" xml:id="b-9781474207300-IDX-175">
            <primary>Bahamas, the</primary>
          </indexterm>Bahamas, British Honduras, <indexterm class="singular" xml:id="b-9781474207300-IDX-838">
            <primary>Guiana</primary>
          </indexterm>Guiana, and <indexterm class="singular" xml:id="b-9781474207300-IDX-111">
            <primary>Antigua</primary>
          </indexterm>Antigua. In Jamaica, the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1743">
            <primary>strikes</primary>
          </indexterm>strikes started on Kingston’s docks before spreading to the sugar plantations.</para>
<para xml:id="b-9781474207300-601">The legacy of the strikes can be read in several ways. First, they contested the racial <indexterm class="singular" xml:id="b-9781474207300-IDX-1552">
            <primary>race</primary>
            <secondary>hierarchy</secondary>
          </indexterm>hierarchy of a colonial society that was the legacy of unfree labor. Strikers <?page value="103"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1636">
            <primary>Senegal</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1783">
            <primary>Tanzania</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2069">
            <primary>World War II</primary>
          </indexterm>advanced immediate economic demands for increased wages, for example on the docks, as well as for upward mobility into the kinds of jobs long reserved for white residents. Second, the strikes as a cultural challenge laid bare the notion of the happy colonial workers of color. Appointed in the immediate aftermath of the strikes, a commission led by Lord <indexterm class="singular" xml:id="b-9781474207300-IDX-1313">
            <primary>Moyne, Lord</primary>
          </indexterm>Moyne described an economic crisis rooted in a plantation system that monopolized power, choice jobs, and land for a white elite (<link linkend="b-9781474207300-ref308" role="bib">James and Whittall 2016</link>: 166–84). The report was significant enough and so damning that the <indexterm class="singular" xml:id="b-9781474207300-IDX-258">
            <primary>British Colonial Office</primary>
          </indexterm>British Colonial Office decided to release only its recommendations, not its detailed findings. Moreover, the report rejected one of the basic tenants of the imperial system: the notion that colonies must pay for themselves. Now Lord Moyne recommended sending monetary and social aid to the <indexterm class="singular" xml:id="b-9781474207300-IDX-2015">
            <primary>West Indies</primary>
          </indexterm>West Indies, if only nominal amounts.</para>
<para xml:id="b-9781474207300-602">The Moyne Report contained a tacit recognition that the strikes in Jamaica (and elsewhere) were grounded in local conditions, but revealed larger fault-lines in the British imperial system. Catalyzed by the penury of life in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-819">
            <primary>Great Depression</primary>
          </indexterm>Great Depression, the strikes opened up for Jamaicans new potentials for mobility, threatened the racial order, and bequeathed a party system that after the Second World War would lead Jamaica toward independence. Bustamonte founded the <indexterm class="singular" xml:id="b-9781474207300-IDX-1042">
            <primary>Jamaica Labour Party</primary>
          </indexterm>Jamaica Labour Party in 1943, after breaking with his cousin Norman <indexterm class="singular" xml:id="b-9781474207300-IDX-1225">
            <primary>Manley, Norman</primary>
          </indexterm>Manley, the elite lawyer who had helped mediate the strike, and his <indexterm class="singular" xml:id="b-9781474207300-IDX-1492">
            <primary>People’s National Party</primary>
          </indexterm>People’s National Party.</para>
<para xml:id="b-9781474207300-603">General strikes in Jamaica and Trinidad like those in Dakar (1946), <indexterm class="singular" xml:id="b-9781474207300-IDX-1391">
            <primary>Nigeria</primary>
          </indexterm>Nigeria (1945), Mombasa (1939 and 1947), and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1208">
            <primary>Malaya</primary>
          </indexterm>Malaya (1948) were flashpoints in a period when the contradictions within cultures of racial management revealed the hollowness of justifications for imperial rule as modernization and development. In Mombasa, strikes that (like those in Jamaica) began on the docks, forced colonial officials to reorder the way they recruited, paid, and managed African labor. Once such officials had encouraged casual employment as a cheap way of mobilizing African workers. After the strikes, these same officials worried openly that mobile, migrant workers had become a dangerous class that challenged the very stability of the colonial regime. They were concerned that the daily hiring of workers handed far too much power to work gangs and their leaders. The very ways that workers adapted to the labor demands of the colonial state had become the focus of suspicion on the part of employers and colonial officials. In his landmark study of Mombasa workers (1987), Frederick <indexterm class="singular" xml:id="b-9781474207300-IDX-425">
            <primary>Cooper, Frederick</primary>
          </indexterm>Cooper encouraged greater attention to the cultural accommodations of workers to colonial <indexterm class="singular" xml:id="b-9781474207300-IDX-314">
            <primary>capitalism</primary>
          </indexterm>capitalism. <indexterm class="singular" xml:id="b-9781474207300-IDX-1870">
            <primary>unions</primary>
          </indexterm>Unions and collective action were not the obvious and universal response of proletarianized colonial subjects, he argues, but specific cultural responses that drew upon a range of community and group affinities, including local Beni dance societies.</para>
<para xml:id="b-9781474207300-604">If, as Cooper demonstrates, the origins of <indexterm class="singular" xml:id="b-9781474207300-IDX-2039">
            <primary>working class</primary>
          </indexterm>working-class collective movements could be found in localized cultural responses, so, too, could and did <indexterm class="endofrange" startref="b-9781474207300-IDX-285" xml:id="b-9781474207300-IDX-end24"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1040" xml:id="b-9781474207300-IDX-end115"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1848" xml:id="b-9781474207300-IDX-end191"/>working <?page value="104"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-800">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1052">
            <primary>Japan</primary>
          </indexterm>colonial subjects engage with larger transnational political forms, in particular <indexterm class="singular" xml:id="b-9781474207300-IDX-404">
            <primary>communism</primary>
          </indexterm>Communism and <indexterm class="singular" xml:id="b-9781474207300-IDX-1232">
            <primary>Marxism</primary>
          </indexterm>Marxism, that challenged both capital and colonialism. That was certainly the case in Malaya where a racial logic guided the mobilization and then management of the vast amounts of labor needed for its commodity export industries. Like employers in Mombasa, Malayan planters and mine-owners turned to indigenous labor recruiters (in the Malayan case, in <indexterm class="singular" xml:id="b-9781474207300-IDX-926">
            <primary>India</primary>
          </indexterm>India and China) who capitalized on local affinities of caste, religion, and family to find the laborers needed in <indexterm class="singular" xml:id="b-9781474207300-IDX-1823">
            <primary>tin</primary>
          </indexterm>tin mines and <indexterm class="singular" xml:id="b-9781474207300-IDX-1591">
            <primary>rubber</primary>
          </indexterm>rubber estates. Cultural ties did not disappear in colonial Malaya even as migration dramatically reshaped the Malay Peninsula into a multi-ethnic society embedded in imperial production and trade. Chinese <indexterm class="singular" xml:id="b-9781474207300-IDX-353">
            <primary>China</primary>
            <secondary>workers</secondary>
          </indexterm>workers, by 1920, were virtually all members of ethnic societies and Chinese trade guilds.</para>
<para xml:id="b-9781474207300-605">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1835">
            <primary>trade unions</primary>
          </indexterm>Trade unions emerged in Malaya after the 1911 Chinese <indexterm class="singular" xml:id="b-9781474207300-IDX-350">
            <primary>China</primary>
            <secondary>revolution (1911)</secondary>
          </indexterm>revolution. Bolshevik influence arrived soon after and, by 1927, the <indexterm class="singular" xml:id="b-9781474207300-IDX-711">
            <primary>General Labour Union</primary>
          </indexterm>General Labour Union confederation, affiliated with the <indexterm class="singular" xml:id="b-9781474207300-IDX-1537">
            <primary>Profintern</primary>
          </indexterm>Profintern (the communist international union organization) included 42 unions with 5,000 members. The Great Depression hit Malayan industry hard, as global rubber prices plummeted. By 1936, Malaya was paralyzed by strikes in the <indexterm class="singular" xml:id="b-9781474207300-IDX-366">
            <primary>coal</primary>
          </indexterm>coal and tin mines and in pineapple plantations. The British colonial regime led by the few white planters and overseers who governed Malaya’s vast industries were worried. Some quickly blamed communist influence. It was, according to the Inspector General of Police, “the trial of strength between the Communist Party and the Government” (<link linkend="b-9781474207300-ref507" role="bib">Stenson 1970</link>: 15; <link linkend="b-9781474207300-ref364" role="bib">Loh Kok Wah 1988</link>: 57–101).</para>
<para xml:id="b-9781474207300-606">That announcement spoke especially to colonial administrators’ sense of vulnerability. A deeper analysis points to the kinds of cultural ties that Malayan workers relied upon to organize in the face of vast ethnic and linguistic divides and the deliberate effort of the colonial regime to maintain a division of labor and hierarchy of pay based on ethnicity. Communism, international in its organization and, even, leadership, still gained local meanings, grafted onto other kinds of affinities. In Malaya, communist organizing drew from the strength of Chinese secret societies and schools. Later, it flourished among Chinese <indexterm class="singular" xml:id="b-9781474207300-IDX-348">
            <primary>China</primary>
            <secondary>migrant labor</secondary>
          </indexterm>migrant workers as a form of anti-Japanese nationalism. Resistance to Japanese aggression in China influenced radical labor organizing among Chinese labor migrants in British colonial Malaya. There were, nonetheless, a few notable examples of cross-ethnic strikes that engaged Malay, Chinese, and Tamil workers. In particular, the multi-racial <indexterm class="singular" xml:id="b-9781474207300-IDX-1833">
            <primary>Traction Company Employees’ Association</primary>
          </indexterm>Traction Company Employees’ Association led a 1927 strike of transport workers in <indexterm class="singular" xml:id="b-9781474207300-IDX-1664">
            <primary>Singapore</primary>
          </indexterm>Singapore.</para>
<para xml:id="b-9781474207300-607">The strikes that roiled interwar Malaya suggests that the growing organizing of working people and their labor movements stressed and weakened colonial regimes, not necessarily because they were vocally anticolonial, but because they took the developmentalist rhetoric of interwar colonialism at face value and demanded the benefit of legal labor <indexterm class="singular" xml:id="b-9781474207300-IDX-1130">
            <primary>Labor</primary>
            <secondary>rights</secondary>
          </indexterm>rights. They sought to win for their <indexterm class="startofrange" xml:id="b-9781474207300-IDX-437">
            <primary>Cuba</primary>
          </indexterm>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-819" xml:id="b-9781474207300-IDX-end87"/>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-834">
            <primary>Guantanamo</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1034">
            <primary>Italy</primary>
          </indexterm>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1208" xml:id="b-9781474207300-IDX-end130"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1350">
            <primary>Nazis</primary>
            <secondary>ideology</secondary>
          </indexterm>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1743" xml:id="b-9781474207300-IDX-end183"/>rank-<?page value="105"?>and-file the promises already made to metropolitan workers, but did this make growing labor movements complicit? Rather, colonial workers’ demands for the benefits accorded metropolitan workers complicate historians’ understandings of the anticolonial movement, less as the actions of heroic individuals who led their nations, against all odds, to independence, than as broad-based social movements that undermined the colonial system—just as it was badly needed to win another world war.</para>
</section>
<section xml:id="b-9781474207300-608">
<info xml:id="b-9781474207300-609">
<title xml:id="b-9781474207300-610">Military Labors in World War and Cold War</title>
<itermset xml:id="b-9781474207300-see12">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-1721">
              <primary>Spain</primary>
              <secondary>military</secondary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-612">
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1949">
            <primary>United States</primary>
            <secondary>military</secondary>
          </indexterm>As Allied troops neared Paris in 1944, the leader of the Free <indexterm class="singular" xml:id="b-9781474207300-IDX-681">
            <primary>French West Africa</primary>
          </indexterm>French forces, General Charles <indexterm class="singular" xml:id="b-9781474207300-IDX-454">
            <primary>de Gaulle, Charles</primary>
          </indexterm>De Gaulle hastily reshuffled his order of battle. For the triumphal march into the capital, he replaced black African soldiers with white resistance fighters, a <emphasis role="italic">blanchissement</emphasis> (as it was termed) that tacitly recognized that the war had irrevocably transformed the viability of <indexterm class="singular" xml:id="b-9781474207300-IDX-1943">
            <primary>United States</primary>
            <secondary>empire</secondary>
          </indexterm>empire. The removal of African soldiers from the parading French ranks, much like the segregation of the American military, raised uncomfortable comparisons between Nazi racial theories and colonial practice (<link linkend="b-9781474207300-ref448" role="bib">Parsons 2015</link>: 3–23).</para>
<para xml:id="b-9781474207300-613">If Nazism tarnished imperial racial hierarchies, De Gaulle’s <emphasis role="italic">blanchissement</emphasis> rewrote a history of the war effort to insist that the fight against Nazism and to <indexterm class="singular" xml:id="b-9781474207300-IDX-666">
            <primary>Free France</primary>
          </indexterm>free France had nothing to do with empire. He sought to obscure the reality that Africans had worked hard and fought bitterly for war efforts (<link linkend="b-9781474207300-fig4_3" role="figure">Figure 4.3</link>). The stripped bare metropole could offer nothing in return. African (and Asian) workers were essential to the Allied war effort. From the <indexterm class="singular" xml:id="b-9781474207300-IDX-368">
            <primary>cocoa</primary>
          </indexterm>cocoa grown in West Africa and consumed by sailors scanning for submarines in the North Atlantic to <indexterm class="singular" xml:id="b-9781474207300-IDX-1961">
            <primary>uranium</primary>
          </indexterm>uranium mined in the <indexterm class="singular" xml:id="b-9781474207300-IDX-414">
            <primary>Congo</primary>
          </indexterm>Congo and used to build the atomic bombs, African production increased dramatically during the war years. British and Free French governments all mobilized workers to produce vital war materials and to replace supplies no longer available from Japanese-occupied Asia. As well, African and Asian men served in enormous numbers in British, Free French and even <indexterm class="singular" xml:id="b-9781474207300-IDX-1969">
            <primary>Vichy France</primary>
          </indexterm>Vichy French, Italian, and Nationalist Spanish forces. As many as 350,000 African soldiers served for both Vichy and Free France (<link linkend="b-9781474207300-ref87" role="bib">Brown 2015</link>: 43–70).</para>
<para xml:id="b-9781474207300-614">That military mobilization of colonial workers did not end in 1945. Rather, the ascendant American empire in the postwar world was characterized not only by corporate expansion but also by the far reach of its military. Military bases and navel fleets were (and remain) vast workplaces, dependent on military and civilian as well as formal and informal labor. Yet bases, governed by military law, remained apart from the social promises of development that sought to justify imperial rule. Nowhere was (and is) this more obvious and more ominous than in the Cuban city Guantánamo and the nearby American naval base.</para>
<para xml:id="b-9781474207300-615">The <indexterm class="singular" xml:id="b-9781474207300-IDX-1916">
            <primary>United States</primary>
          </indexterm>United States retained its Guantánamo base after 1898 as the linchpin of American Caribbean naval power. Bases require military labor to man <indexterm class="endofrange" startref="b-9781474207300-IDX-1052" xml:id="b-9781474207300-IDX-end118"/>the <?page value="106"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure4_3"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1041">
            <primary>Jamaica</primary>
          </indexterm>guns as well as civilian labor to clean, cook, and construct. Others worked, notably as sex <indexterm class="singular" xml:id="b-9781474207300-IDX-1654">
            <primary>sex</primary>
            <secondary>workers</secondary>
          </indexterm>workers, to meet the leisure demands of American soldiers and sailors. Thousands of Cubans worked at the Guantánamo base; others came from around the Caribbean, including Jamaicans and <indexterm class="singular" xml:id="b-9781474207300-IDX-1544">
            <primary>Puerto Rico</primary>
          </indexterm>Puerto Ricans. During the Cuban revolution, base workers were caught between the laboring demands of the US military and the liberationist dreams of revolution. Many used their liminal position to support the revolution, smuggling arms and material off the base to rebels of the M-26-7 movement, camped in the hills around Guantánamo (<link linkend="b-9781474207300-ref360" role="bib">Lipman 2009</link>). Yet soon the new Cuban government, aware of American subversion campaigns, doubted the loyalty of base workers. Ironically, the American military also treated with suspicion Cuban workers, who now crossed a highly militarized border every day as they commuted to work. Soon, military managers replaced Cubans with Jamaicans and other contract workers from across the empire.</para>
<figure label="4.3" xlink:href="b-9781474207300-figure4_3" xlink:role="objectPointer" xml:id="b-9781474207300-fig4_3">
<info xml:id="b-9781474207300-616">
<title xml:id="b-9781474207300-617">African soldiers take part in the Battle of France, 1940. Credit: Galerie Bilderwelt/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-618">
<imageobject xml:id="b-9781474207300-619">
<imagedata align="center" fileref="images/fig4_3.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-621">The history of Guantánamo and its workers is emblematic of the larger experience of workers—from soldiers and sailors to migrant workers to sex workers—mobilized to meet the labor demands of a military empire. From the domestic draft to labor contracts, the American “military-industrial complex” displaced and managed millions of workers in <indexterm class="singular" xml:id="b-9781474207300-IDX-1114">
            <primary>Korea</primary>
          </indexterm>Korea, <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1979">
            <primary>Vietnam</primary>
          </indexterm>Vietnam, the <indexterm class="endofrange" startref="b-9781474207300-IDX-437" xml:id="b-9781474207300-IDX-end35"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-834" xml:id="b-9781474207300-IDX-end90"/>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1503">
            <primary>Philippines</primary>
          </indexterm>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1949" xml:id="b-9781474207300-IDX-end206"/>Philippines, <?page value="107"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-673">
            <primary>French Communist Party, PCF</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2070">
            <primary>World War II</primary>
          </indexterm>western Europe, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1273">
            <primary>Middle East</primary>
          </indexterm>Middle East, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1462">
            <primary>Pacific Ocean</primary>
          </indexterm>Pacific (<link linkend="b-9781474207300-ref207" role="bib">Flores 2015</link>: 813–35). A conscripted American soldier serving in Vietnam and seeking the comfort of a sex worker while on leave in <indexterm class="singular" xml:id="b-9781474207300-IDX-1434">
            <primary>Okinawa</primary>
          </indexterm>Okinawa might have felt little solidarity with former French colonized subjects. Still in the midst of war and revolution in the Post-World War II era, <indexterm class="singular" xml:id="b-9781474207300-IDX-112">
            <primary>anti-imperialism</primary>
          </indexterm>anti-imperialism could forge global solidarities. Black revolutionaries in Oakland, California, for example, could find common cause with Vietnamese soldiers (<link linkend="b-9781474207300-ref69" role="bib">Bloom and Martin 2012</link>).</para>
</section>
<section xml:id="b-9781474207300-622">
<info xml:id="b-9781474207300-623">
<title xml:id="b-9781474207300-624">Labor Solidarity and Liberation</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-625">Revolutionary movements might forge solidarity across differences of race and region, but it was often harder for <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2040">
            <primary>working class</primary>
          </indexterm>working-class labor movements who struggled to build alliances with nationalist and anticolonial leaders. At the end of the Second World War, the Martinique activist Aimé <indexterm class="startofrange" xml:id="b-9781474207300-IDX-329">
            <primary>Césaire, Aimé</primary>
          </indexterm>Césaire was living in Paris and serving as a legislator. Césaire was a Communist Party member and an anticolonial politician who reached out hopefully toward colonial workers. His <emphasis role="italic">Discourse on Colonialism</emphasis> (1950) was part of a flurry of postwar writing on imperialism in English and French by activists like W.E.B <indexterm class="singular" xml:id="b-9781474207300-IDX-499">
            <primary>Dubois, W.E.B.</primary>
          </indexterm>Dubois, C.L.R. <indexterm class="singular" xml:id="b-9781474207300-IDX-1043">
            <primary>James, C.L.R.</primary>
          </indexterm>James, and Frantz <indexterm class="singular" xml:id="b-9781474207300-IDX-579">
            <primary>Fanon, Frantz</primary>
          </indexterm>Fanon (<link linkend="b-9781474207300-ref108" role="bib">Césaire [1950] 2000</link>).</para>
<para xml:id="b-9781474207300-626">Their writing was set against the backdrop of war, revolution, and organizing. Dubois, in particular, was a towering figure of authority at the Fifth <indexterm class="singular" xml:id="b-9781474207300-IDX-1474">
            <primary>Pan-African Congress</primary>
          </indexterm>Pan-African Congress convened in Manchester in 1945. This postwar Pan-African Congress differed markedly from its predecessor meetings in its support of <indexterm class="singular" xml:id="b-9781474207300-IDX-1836">
            <primary>trade unions</primary>
          </indexterm>trade unions and calls for <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1744">
            <primary>strikes</primary>
          </indexterm>strikes. As the Congress saluted the independence of the Philippines and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-927">
            <primary>India</primary>
          </indexterm>India as well as recognized uprisings in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1085">
            <primary>Kenya</primary>
          </indexterm>Kenya, Vietnam, and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-54">
            <primary>Algeria</primary>
          </indexterm>Algeria, the Congress’ new engagement with workers and student movements acknowledged that working people and their collective organizations represented powerful forces for independence. Working-class movements and their leaders did not always overtly call for the end of colonial rule but they threatened the justifications for and feasibility of the racialized system of imperial capitalism.</para>
<para xml:id="b-9781474207300-627">Césaire reflected this engagement with working-class movements. In his writing, Césaire flipped colonial discourse on its head. Rather than Europe civilizing the savages, empire had brutalized Europe, he argued. <indexterm class="singular" xml:id="b-9781474207300-IDX-589">
            <primary>fascism</primary>
          </indexterm>Fascism wasn’t an aberration but the natural outgrowth of colonialism. He acknowledged the long history of ruptured solidarity that divided metropolitan and colonial workers, but showed little faith in European trade unions, even if he concluded his essay with call for socialist revolution. In an essay inflected with excitement about <indexterm class="singular" xml:id="b-9781474207300-IDX-1354">
            <primary>negritude</primary>
          </indexterm>Negritude movements and surrealism, the gestures toward the <indexterm class="singular" xml:id="b-9781474207300-IDX-1710">
            <primary>Soviet Union</primary>
          </indexterm>Soviet Union at first appeared formulaic, an expectation for someone still a member of the Communist Party (he later would publicly resign). More deeply, though, it also reflected an understanding of the double burden of imperialism and <indexterm class="endofrange" startref="b-9781474207300-IDX-1503" xml:id="b-9781474207300-IDX-end160"/>capitalism.</para>
<?page value="108"?>
<para xml:id="b-9781474207300-628">
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-889">
            <primary>Houphouet-Boigny, Felix</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1366">
            <primary>Netherlands</primary>
          </indexterm>Nationalist politicians and historians still often describe the slow road to colonial independence as about open rebellion (such as the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1243">
            <primary>Mau Mau</primary>
          </indexterm>Mau Mau revolt in Kenya); fraught negotiation led by charismatic independence leaders (such as Kwame <indexterm class="singular" xml:id="b-9781474207300-IDX-1398">
            <primary>Nkrumah, Kwame</primary>
          </indexterm>Nkrumah in <indexterm class="singular" xml:id="b-9781474207300-IDX-738">
            <primary>Ghana</primary>
          </indexterm>Ghana; <indexterm class="singular" xml:id="b-9781474207300-IDX-1756">
            <primary>Sukarno</primary>
          </indexterm>Sukarno in <indexterm class="singular" xml:id="b-9781474207300-IDX-979">
            <primary>Indonesia</primary>
          </indexterm>Indonesia; and Jawaharlal <indexterm class="singular" xml:id="b-9781474207300-IDX-1355">
            <primary>Nehru, Jawaharlal</primary>
          </indexterm>Nehru in India); or anticolonial wars (such as those in Vietnam, <indexterm class="singular" xml:id="b-9781474207300-IDX-1209">
            <primary>Malaya</primary>
          </indexterm>Malaya, or Algeria). The impacts of labor movements and strikes on the re-imposition of colonialism after the war are only beginning to be measured. The history of postwar African strikes, for example, re-centers the role of working-class movements in helping blow the winds of change, all the while revealing the tensions between anticolonial leaders and wage workers. <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1561">
            <primary>railroads</primary>
          </indexterm>Railroads, of course, were one of the grand projects of the British and French colonial states in Africa. They linked local economies into a larger colonial capitalism by allowing for easier extraction and export of agricultural and mineral products (<link linkend="b-9781474207300-ref317" role="bib">Jones 2002</link>). From 1947 to 1948 in <indexterm class="singular" xml:id="b-9781474207300-IDX-682">
            <primary>French West Africa</primary>
          </indexterm>French West Africa, crippling strikes engaged 20,000 workers. About a decade later, railroad workers led strikes in Kenya and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1780">
            <primary>Tanganyika</primary>
          </indexterm>Tanganyika in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-260">
            <primary>British East Africa</primary>
          </indexterm>British East Africa.</para>
<para xml:id="b-9781474207300-629">Such strikes challenged the very economic foundations of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-647">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-801">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>empire itself, but how did striking workers—whether in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1637">
            <primary>Senegal</primary>
          </indexterm>Senegal, the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1036">
            <primary>Ivory Coast</primary>
          </indexterm>Ivory Coast, Kenya or Tanganyika—link anticolonial politics to workplace demands? In West Africa, railway strikes began as the French (as in Vietnam, the Dutch in Indonesia, or the British in Malaya) sought to reestablish metropolitan rule. In French West Africa, the loss of colonial legitimacy was particularly acute especially because of the wartime legacy of <indexterm class="singular" xml:id="b-9781474207300-IDX-1126">
            <primary>Labor</primary>
            <secondary>forced</secondary>
          </indexterm>forced labor by the collaborationist <indexterm class="singular" xml:id="b-9781474207300-IDX-1970">
            <primary>Vichy France</primary>
          </indexterm>Vichy government, which coerced tens of thousands of workers from the Ivory Coast to <indexterm class="singular" xml:id="b-9781474207300-IDX-840">
            <primary>Guinea</primary>
          </indexterm>Guinea into war work (<link linkend="b-9781474207300-ref149" role="bib">Cooper <emphasis role="italic">et al.</emphasis> 2000</link>: 135–6). African politicians and wage workers pressed both the <indexterm class="singular" xml:id="b-9781474207300-IDX-667">
            <primary>Free France</primary>
          </indexterm>Free French and then the post-liberation government in France to renounce forced labor systems. This was a cultural and political as well as economic demand for recognition as citizens entitled to the protections of metropolitan industrial labor relations.</para>
<para xml:id="b-9781474207300-630">The spark was a strike in Dakar in December 1945 led by market hawkers and indigenous civil servants. This diverse alliance called for wage increases and the legal recognition of unions. Their demands complicated distinctions between metropolitan wage workers (protected by systems of collective bargaining) and colonial workers (long the subjects of forced labor). As Césaire joined the Côte d’Ivoirian Félix Houphouët-Boigny in introducing a law forbidding forced labor in “overseas territories,” politics from below continued to roil. By 1947, foment for strikes spread from Dakar to the racially segregated railways. A small number of white Europeans were at the top of the wage hierarchy. Below them were thousands of Africans. The <indexterm class="singular" xml:id="b-9781474207300-IDX-591">
            <primary>
              <emphasis role="italic">Fédération des Travailleurs Africains</emphasis>
            </primary>
          </indexterm>Fédération des Travailleurs Africains demanded the elimination of the racial wage system. Condemning the “colonist sprit of the Europeans,” union officials organized for a strike up and down the railway lines. By October 1947, the walkout began with the almost unanimous support of African <indexterm class="endofrange" startref="b-9781474207300-IDX-54" xml:id="b-9781474207300-IDX-end5"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-329" xml:id="b-9781474207300-IDX-end28"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-927" xml:id="b-9781474207300-IDX-end96"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1979" xml:id="b-9781474207300-IDX-end210"/>workers.</para>
<?page value="109"?>
<para xml:id="b-9781474207300-631">The railways workers’ solidarity shocked colonial and railway officials who had expected only a short strike. The strike proved far more enduring than railway and colonial officials alike predicted. <indexterm class="singular" xml:id="b-9781474207300-IDX-426">
            <primary>Cooper, Frederick</primary>
          </indexterm>Cooper describes a “complex web of affiliation within the communities in which they lived” (1996a: 94). The union, with few funds, depended not only on the solidarity of railway workers but also on money, food, and transportation from local merchants and communities. Local women supported the strike through market-selling that helped augment the meager strike support the union could offer. Solidarity crossed the boundaries of colony as well as ethnicity and religion, engaging black and Islamic Africans in common cause.</para>
<para xml:id="b-9781474207300-632">Yet if the strike was a popular movement, did politicians recognize it as a blow against empire? Railway solidarity expanded from railway yards into the community, but anticolonial politicians like Houphouët-Boigny and Leopold <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1639">
            <primary>Senghor, Léopold Sédar</primary>
          </indexterm>Senghor responded with ambivalence. Beyond the scenes, Houphouët-Boigny worked quietly to resolve the strike in the Côte d’Ivoire and in Senegal, Senghor was only marginally more supportive. <indexterm class="singular" xml:id="b-9781474207300-IDX-1837">
            <primary>trade unions</primary>
          </indexterm>Trade unions with their claims to labor rights as citizens challenged the racial systems of colonial <indexterm class="singular" xml:id="b-9781474207300-IDX-315">
            <primary>capitalism</primary>
          </indexterm>capitalism, but the political parties of anticolonial leaders remained largely distant. The cause of labor was not necessarily the cause of anticolonialism.</para>
<para xml:id="b-9781474207300-633">French African railway strikes came at a time when workers were still incorporated within the evolving French imperial state. Railway strikes in British East Africa, by contrast, occurred during the transition to independence in 1960, after the British brutally quelled the Mau Mau “emergency.” Railroads were of particular importance, especially in protecting the fragile position of white ranchers in the interior who needed to transport their products to the coast for export. The strikes on the railroads came at a time when not only was the government seeking to protect the position of white ranchers but also recognizing the effect of a racially stratified official wage system that placed African workers at the very bottom below European and Asian workers. African wages, calculated as “bachelor” wages, aimed to encourage the migration of single, African men from rural hinterlands to urban centers. By early 1960, strikes were spreading across Kenya, <indexterm class="singular" xml:id="b-9781474207300-IDX-1863">
            <primary>Uganda</primary>
          </indexterm>Uganda, and Tanganyika. During the following year, a million working days were lost to strikes in Kenya alone as tribal and community affinities bolstered workers’ solidarity across national lines.</para>
<para xml:id="b-9781474207300-634">Yet even as politicized workers came to see their strikes as a transnational campaign, the emerging labor departments of newly independent states confined their unions. Independence movements were also wary, emphasizing moderation among trade unions. Independence, for moderate trade unionists like Tom <indexterm class="singular" xml:id="b-9781474207300-IDX-1255">
            <primary>Mboye, Tom</primary>
          </indexterm>Mboye, was a political problem; trade unions, he argued, should represent working-class needs in new nations, not subvert colonial cultures (<link linkend="b-9781474207300-ref291" role="bib">Hyde 2015</link>: 147–69; <link linkend="b-9781474207300-ref292" role="bib">Hyde 2016</link>: 71–91). Such <indexterm class="singular" xml:id="b-9781474207300-IDX-1337">
            <primary>nationalism</primary>
          </indexterm>nationalism, divorced from working-class movements, promised a change of government, but not <indexterm class="endofrange" startref="b-9781474207300-IDX-260" xml:id="b-9781474207300-IDX-end20"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-647" xml:id="b-9781474207300-IDX-end62"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-889" xml:id="b-9781474207300-IDX-end93"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1036" xml:id="b-9781474207300-IDX-end113"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1085" xml:id="b-9781474207300-IDX-end124"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1243" xml:id="b-9781474207300-IDX-end133"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1561" xml:id="b-9781474207300-IDX-end165"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1744" xml:id="b-9781474207300-IDX-end184"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1780" xml:id="b-9781474207300-IDX-end187"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2040" xml:id="b-9781474207300-IDX-end218"/>necessarily <?page value="110"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2071">
            <primary>World War II</primary>
          </indexterm>an economic change. As independence activists became postcolonial leaders, they rapidly distanced themselves from indigenous labor leaders and the impetus for development was shorn of demands for fair and equitable working conditions. In Senegal, Senghor was forced to acknowledge the bitter irony when, as president, he ordered the imprisonment of the very labor leaders he had once defended against the French regime. Senghor’s orders highlighted the ruptures that too often separated postcolonial leaders from indigenous labor movements, thus leaving the descendants of colonial workers still prey to the exploitation of growing international corporations and distanced from metropolitan workers.</para>
</section>
<section xml:id="b-9781474207300-635">
<info xml:id="b-9781474207300-636">
<title xml:id="b-9781474207300-637">Working People in Neoliberalism</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-638">Near the end of the Second World War, Americans began singing about <indexterm class="singular" xml:id="b-9781474207300-IDX-186">
            <primary>bananas</primary>
          </indexterm>bananas. The <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1875">
            <primary>United Fruit Company</primary>
          </indexterm>United Fruit Company created a new advertising campaign featuring the cartoon character <indexterm class="startofrange" xml:id="b-9781474207300-IDX-354">
            <primary>Chiquita Banana</primary>
          </indexterm>Chiquita Banana. Singing her catchy jingle hundreds of times daily on radio stations, she eased the transition of United Fruit, that most imperial of companies, into the postcolonial era of globalized capital. Most immediately, Chiquita Banana protected the company’s domination of the American consumer market and insulated it from a domestic critique of its brutal management practices and exploitation of low-paid women workers.</para>
<para xml:id="b-9781474207300-639">Chiquita Banana represented both continuity and rupture with older imperial representations of imperial labor and economy. On one hand, it retained the popular representation of tropical places as idylls ripe for development and of its peoples as eager to serve. But if <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2077">
            <primary>world’s fairs</primary>
          </indexterm>world’s fairs put real peoples on display, Chiquita Banana was a cartoon character (half woman, half banana) and even if she was meant to recall the popular star Carmen <indexterm class="singular" xml:id="b-9781474207300-IDX-1286">
            <primary>Miranda, Carmen</primary>
          </indexterm>Miranda, she helped remove tropical workers from the view of temperate consumers. In this way, she helped inaugurate the model of the postcolonial, but still imperial extractive economy. Goods, whether agricultural, mineral, or (as the new century approached) increasingly manufactured, arrived in (former) colonial metropoles. Yet labor conditions and conflict were carefully obscured.</para>
<para xml:id="b-9781474207300-640">United Fruit Company had well deserved its sobriquet “el polpo,” a sprawling octopus of a company whose tentacles squeezed Latin American countries. Coined in 1935, the term “banana republic” highlighted the practice of United Fruit that demanded the subservience—and, if needed, military force—of notionally independent governments. Chiquita Banana put a softer face to naked power and, not surprisingly, the much-maligned United Fruit has since changed its name to Chiquita Brands. Largely out of the view of domestic consumers, postwar labor relations in the banana industry have remained tense, challenging not only dire working conditions but also political repression (<link linkend="b-9781474207300-ref135" role="bib">Colby 2011</link>; <link linkend="b-9781474207300-ref193" role="bib">Enloe 2014</link>: 211–49; <link linkend="b-9781474207300-ref136" role="bib">Coleman 2016</link>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1639" xml:id="b-9781474207300-IDX-end173"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1637" xml:id="b-9781474207300-IDX-end172"/>).</para>
<?page value="111"?>
<para xml:id="b-9781474207300-641">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1415">
            <primary>North American Free Trade Agreement, NAFTA</primary>
          </indexterm>If, by the 1950s, banana workers’ <indexterm class="singular" xml:id="b-9781474207300-IDX-1871">
            <primary>unions</primary>
          </indexterm>unions had won some victories, solidarity was hard to build. This was especially the case when metropolitan unions were often complicit with <indexterm class="singular" xml:id="b-9781474207300-IDX-381">
            <primary>Cold War</primary>
          </indexterm>Cold War efforts to undermine left politics. Too often hostile to local issues or the cultural contexts of organizing, union federations like the American <indexterm class="singular" xml:id="b-9781474207300-IDX-14">
            <primary>AFL-CIO</primary>
          </indexterm>AFL-CIO joined campaigns to subvert left leadership, for example, in <indexterm class="singular" xml:id="b-9781474207300-IDX-389">
            <primary>Columbia</primary>
          </indexterm>Columbia’s banana fields owned by the United Fruit Company (<link linkend="b-9781474207300-ref119" role="bib">Chomsky 2008</link>). By the 1980s, women workers, calling themselves <emphasis role="italic">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-187">
              <primary>
                <emphasis role="italic">bananeras</emphasis>
              </primary>
            </indexterm>bananeras</emphasis>, advanced new models of international solidarity by placing calls for gender equity at the center of campaigns for union democracy and leadership.</para>
<para xml:id="b-9781474207300-642">The activism of the <emphasis role="italic">bananeras</emphasis>, challenging the happy image of Chiquita Banana, has highlighted new ways of bringing the laboring conditions to a global consciousness (<link linkend="b-9781474207300-ref213" role="bib">Frank 2005</link>). Yet, too often, goods, whether <indexterm class="singular" xml:id="b-9781474207300-IDX-683">
            <primary>French West Africa</primary>
          </indexterm>French beans from West Africa or sneakers from <indexterm class="singular" xml:id="b-9781474207300-IDX-1980">
            <primary>Vietnam</primary>
          </indexterm>Vietnam, are produced in appalling conditions in the postcolonial world—the Global South, as it was increasingly termed. Rupturing transnational solidarity and shielding Northern consumers from postcolonial economies became essential for corporations. <indexterm class="singular" xml:id="b-9781474207300-IDX-1395">
            <primary>Nike</primary>
          </indexterm>Nike, a prototypical example of the globalized corporation, offers advertisements of its celebrity athlete endorsers, but obscures its production practices through complex webs of contracting and sub-contracting. When the exploitative conditions of labor in shoe, clothing, or electronics factories in places as diverse as <indexterm class="singular" xml:id="b-9781474207300-IDX-190">
            <primary>Bangladesh</primary>
          </indexterm>Bangladesh or Vietnam come to global attention through journalistic exposés or horrific industrial accidents and fires, companies rush to disavow connections to contract businesses (<link linkend="b-9781474207300-fig4_4" role="figure">Figure 4.4</link>).</para>
<para xml:id="b-9781474207300-643">By the 1980s and 1990s, a postcolonial “rush to the bottom” in wages and conditions had come to replace the insistence that empire was a project of civilization and modernization. French beans, for example, are grown in the former French colonies of West Africa. Picked in African soil, they sit on the shelves of Paris or London supermarkets within hours. Somewhere along the way those beans become “French” and their African origins reduced to small print (if at all) on the plastic packaging. They are prime examples of an updated extractive economy (<link linkend="b-9781474207300-ref215" role="bib">Freidberg 2004</link>). If the exhibits and world’s fairs with which this essay opened celebrated colonial production, companies edging toward the new century obscured their overseas business. Eager for consumers in the Global North, the business of empire was best left behind closed doors.</para>
<para xml:id="b-9781474207300-644">In many ways, the story of French beans reflects the way in which postcolonial workers are rendered invisible by the many consumer demands of the global economy. The advent of neoliberal trade policies and treaties (from the <indexterm class="singular" xml:id="b-9781474207300-IDX-321">
            <primary>Caribbean Basin Initiative</primary>
          </indexterm>Caribbean Basin Initiative that transferred garment work out of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1917">
            <primary>United States</primary>
          </indexterm>United States to NAFTA) shifted production of consumer goods, like sneakers and clothing, out of metropolitan industrial centers to former colonies. Behind triumphant “globalization,” companies from Nike to <indexterm class="singular" xml:id="b-9781474207300-IDX-708">
            <primary>Gap</primary>
          </indexterm>Gap have “outsourced”—a phrase that entered global discourse toward the century’s end—production <indexterm class="endofrange" startref="b-9781474207300-IDX-354" xml:id="b-9781474207300-IDX-end31"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1875" xml:id="b-9781474207300-IDX-end194"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2077" xml:id="b-9781474207300-IDX-end228"/>to <?page value="112"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure4_4"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1829">
            <primary>tourism</primary>
          </indexterm>multiple layers of contractors. Building solidarity, often by decrying “sweatshop” production, tried to create alliances between workers in the Global South and consumers in the Global North. To be sure, although horror stories of <indexterm class="singular" xml:id="b-9781474207300-IDX-1761">
            <primary>sweatshops</primary>
          </indexterm>sweatshops could (and still do) provoke the ire of consumers, such campaigns typically struggled to advance systemic critiques of global inequalities (<link linkend="b-9781474207300-ref58" role="bib">Bender and Greenwald 2003</link>).</para>
<figure label="4.4" xlink:href="b-9781474207300-figure4_4" xlink:role="objectPointer" xml:id="b-9781474207300-fig4_4">
<info xml:id="b-9781474207300-645">
<title xml:id="b-9781474207300-646">Demonstrators protest Nike’s sweatshop production. Credit: Alan Dejecacion/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-647">
<imageobject xml:id="b-9781474207300-648">
<imagedata align="center" fileref="images/fig4_4.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-650">If the sweatshop emerged by the end of the twentieth century as one obvious incarnation of a new imperium entwined with globalized capital, resorts are another. The contemporary resort, far more plush and polished than <indexterm class="singular" xml:id="b-9781474207300-IDX-1448">
            <primary>Orwell, George</primary>
          </indexterm>Orwell’s tawdry Burmese club, links the contemporary to the older and colonial. The colonial club with its flowing drinks and racial segregation also persists. Behind guarded walls, proliferating resorts, the built environment of the rapidly growing tourist empire, provide vacationers from former colonial metropoles the chance to enjoy the kinds of service once expected by colonial residents, yet <?page value="113"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-570">
            <primary>Export Processing Zone, EPZ</primary>
          </indexterm>remain sheltered from the realities of everyday and postcolonial life. They indulge in an imperial nostalgia that deliberately recalls a bygone colonial era, yet evading difficult questions about racialized global divisions of labor. Resorts, sweatshops, plantations, export processing zones (EPZs), and military bases all lay claim to prime lands in the heart of independent former colonies. As a new imperial infrastructure, they poignantly demonstrate the way the new imperium can be built on the foundations of older Euro-American empires.</para>
</section>
<?page value="114"?>
</chapter>
<chapter label="5" xml:id="b-9781474207300-chapter5">
<info xml:id="b-9781474207300-651">
<title xml:id="b-9781474207300-652">
          <?page value="115"?>Mobility</title>
<author xlink:href="C0008" xlink:role="biblioAuID">
<personname role="first-last">
<firstname>Jessica</firstname> <surname>Namakkal</surname>
          </personname>
        </author>
<pagenums>115–136</pagenums>
<biblioid class="doi">10.5040/9781474207300.ch-005</biblioid>
<mediaobject xml:id="b-9781474207300-653">
<imageobject xml:id="b-9781474207300-654">
<imagedata fileref="pdfs/9781474207300.ch-005.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
<itermset xml:id="b-9781474207300-IDX-see13">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-899">
            <primary>human trafficking</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1293">
            <primary>mobility</primary>
          </indexterm>
        </itermset>
<copyright>
          <year>2019</year>
          <holder>Bloomsbury Publishing</holder>
        </copyright>
      </info>
<epigraph xml:id="b-9781474207300-655">
<attribution>Jamaica <indexterm class="singular" xml:id="b-9781474207300-IDX-1109">
            <primary>Kincaid, Jamaica</primary>
          </indexterm>Kincaid, <link linkend="b-9781474207300-ref339" role="bib">
            <emphasis role="italic">A Small Place</emphasis>
          </link> (1988: 4–5)</attribution>
<para xml:id="b-9781474207300-656">You disembark from your plane. You go through customs. Since you are a tourist, a North American or a European—to be frank, white—and not an Antiguan black returning to Antigua from Europe or North America with cardboard boxes of much needed cheap clothes and food for relatives, you move through customs swiftly, you move through customs with ease. Your bags are not searched. You emerge from customs into the hot, clean air: immediately you feel cleansed, immediately you feel blessed (which is to say special); you feel free.</para>
</epigraph>
<para role="fullOut" xml:id="b-9781474207300-657">People move about the world for many different reasons. Those with the economic and social means travel for cultural enrichment, while those who lack money and the right passport are often viewed as being rich in culture, but poor in every other way. In her 1988 long-form essay <emphasis role="italic">A Small Place</emphasis>, Jamaica Kincaid, the Antiguan-American writer, reflected on her experiences growing up on a decolonizing island that had once been a site of the <indexterm class="singular" xml:id="b-9781474207300-IDX-153">
          <primary>Atlantic slave trade</primary>
        </indexterm>Atlantic slave trade.<footnote label="1" role="end-bk-note" xml:id="b-9781474207300-fn5_1">
          <para xml:id="b-9781474207300-658">Antigua became independent in 1981.</para>
        </footnote> Kincaid’s essay traces the uneven and intersecting networks of mobility, and immobility, that cross the cultures and geographies of her island home, making visible the deep divides between those who travel because they can and those who travel because they must. The academic literature on mobility has only occasionally considered these two groups together: as Stephen <indexterm class="singular" xml:id="b-9781474207300-IDX-830">
          <primary>Greenblatt, Stephen</primary>
        </indexterm>Greenblatt (<link linkend="b-9781474207300-ref242" role="bib">2010</link>: 250–3) has noted, “certain forms of movement—<indexterm class="startofrange" xml:id="b-9781474207300-IDX-1280">
          <primary>migration</primary>
        </indexterm>migration, labor-market border-crossing, smuggling, and the like—are marked as ‘serious’ while others, such as tourism, theater festivals, and (until recently) study abroad, are rendered virtually invisible.” Yet, as Kincaid tells us, the <?page value="116"?>
        <indexterm class="singular" xml:id="b-9781474207300-IDX-1338">
          <primary>nationalism</primary>
        </indexterm>
        <indexterm class="singular" xml:id="b-9781474207300-IDX-1772">
          <primary>Syria</primary>
        </indexterm>
        <indexterm class="singular" xml:id="b-9781474207300-IDX-1892">
          <primary>United Nations World Tourism Organization, UNWTO</primary>
        </indexterm>interaction between people who travel with ease and those who travel with great difficulty happens not only at the many border controls installed at airports and land crossings throughout the world, but also on the streets of cosmopolitan megacities like London, Paris, and New York, and in former colonies that today depend on the tourist industry as a major source of income.</para>
<para xml:id="b-9781474207300-659">It is easy to show how common transnational mobility is in the twenty-first century. According to the <indexterm class="singular" xml:id="b-9781474207300-IDX-1881">
          <primary>United Nations</primary>
        </indexterm>United Nations’ 2015 International Migration Report, the number of people living in a country other than where they were born has reached 244 million, including 20 million refugees. More than half of all these refugees (53 percent) originate from <indexterm class="singular" xml:id="b-9781474207300-IDX-12">
          <primary>Afghanistan</primary>
        </indexterm>Afghanistan, <indexterm class="singular" xml:id="b-9781474207300-IDX-1678">
          <primary>Somalia</primary>
        </indexterm>Somalia, and the Syrian Arab Republic. All three of these countries are in the throes of brutal civil wars rooted in struggles incited by imperial proxy wars and fractured colonial geographies (<link linkend="b-9781474207300-ref245" role="bib">Gregory 2004</link>). Meanwhile, the United Nations’ World <indexterm class="singular" xml:id="b-9781474207300-IDX-1830">
          <primary>tourism</primary>
        </indexterm>Tourism Organization (UNWTO) estimated that in the first nine months of 2016, almost a billion tourists traveled to global sites, up four percent from 2015. Amidst prolonged and vicious wars, what one could call the afterlives of Western empires, tourism is booming.</para>
<para xml:id="b-9781474207300-660">Cultures of mobility—whether through the guise of tourism, forced or voluntary colonial and postcolonial migrations, the expansion of “global education,” population displacement as a result of war and state-making, or the ubiquity of transnational military service—marked the twentieth century in ways that built on the “contact zones” established by earlier imperial networks. The idea of the “contact zone,” theorized by Mary Louise <indexterm class="singular" xml:id="b-9781474207300-IDX-1533">
          <primary>Pratt, Mary Louise</primary>
        </indexterm>Pratt as “social spaces where disparate cultures meet, clash, and grapple with each other, often in highly asymmetrical relations of domination and subordination” (1992: 4), helps us to understand the uneven terrain of mobility. Mobility is in many ways a cultural expectation and marker: a person’s ability to move through a multitude of spaces signifies class status, educational level, and race, sexuality, and gender privileges. While many of these inequalities were codified in colonial jurisprudence, this chapter shows that they continue to regulate contemporary networks through cultural practices.</para>
<para xml:id="b-9781474207300-661">The greatest change in the history of mobility since 1920 has been the systematic rise of racial, ethnic, and religious nationalisms, which have become primary cultural markers of deciding who has the right to free movement and who does not. The participation of colonized peoples in the two world wars and their increased movements from colony to metropole and between colonies, the partitions and changing borders of the postwar period and the subsequent displacement and migrations of people, and the transition from networks of formal empire to a regime of informal empire, often understood as neoliberal <indexterm class="singular" xml:id="b-9781474207300-IDX-752">
          <primary>globalization</primary>
        </indexterm>globalization, define the contemporary cultural history of mobility in relation to Western <indexterm class="endofrange" startref="b-9781474207300-IDX-1280" xml:id="b-9781474207300-IDX-end136"/>empires.</para>
<?page value="117"?>
<section xml:id="b-9781474207300-662">
<info xml:id="b-9781474207300-663">
<title xml:id="b-9781474207300-664">Technologies of (IM)Mobility</title>
<itermset xml:id="b-9781474207300-IDX-see14">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-1562">
              <primary>railroads</primary>
            </indexterm>
            <indexterm class="singular" xml:id="b-9781474207300-IDX-172">
              <primary>aviation</primary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-665">Technological <indexterm class="singular" xml:id="b-9781474207300-IDX-1800">
            <primary>technology</primary>
            <secondary>culture</secondary>
          </indexterm>culture, from innovations in <indexterm class="singular" xml:id="b-9781474207300-IDX-1846">
            <primary>transportation</primary>
          </indexterm>transportation to the widespread emergence of the Internet and social media, are often given primacy in understanding how people, materials, and ideas move in the contemporary era (<link linkend="b-9781474207300-ref107" role="bib">Castells 2009</link>). Transportation and <indexterm class="singular" xml:id="b-9781474207300-IDX-394">
            <primary>communication</primary>
          </indexterm>communication technologies that made empire both possible and successful have often been interpreted as cultural signifiers of <indexterm class="singular" xml:id="b-9781474207300-IDX-1295">
            <primary>modernity</primary>
          </indexterm>modernity as well as tools of inclusivity and exclusion. For example, according to the historians Marjory <indexterm class="singular" xml:id="b-9781474207300-IDX-854">
            <primary>Harper, Marjory</primary>
          </indexterm>Harper and Stephen <indexterm class="singular" xml:id="b-9781474207300-IDX-416">
            <primary>Constantine, Stephen</primary>
          </indexterm>Constantine (<link linkend="b-9781474207300-ref264" role="bib">2011</link>: 342), in the nineteenth century “railways and steamships reduced the risks to life but also limited the interruptions to income flows” for potential migrants weighing the benefits of moving throughout empires in search of economic opportunities. While Harper and Constantine argue that these technologies “helped turn potential migrants into travelers” (2011: 342), this experience was uneven, determined by the racialized travel routes forged by imperial networks. Though it might have been the case for white <indexterm class="singular" xml:id="b-9781474207300-IDX-64">
            <primary>Algeria</primary>
            <secondary>French settlers</secondary>
          </indexterm>settlers hoping to set down roots in <indexterm class="singular" xml:id="b-9781474207300-IDX-160">
            <primary>Australia</primary>
          </indexterm>Australia, <indexterm class="singular" xml:id="b-9781474207300-IDX-1377">
            <primary>New Zealand</primary>
          </indexterm>New Zealand, <indexterm class="singular" xml:id="b-9781474207300-IDX-302">
            <primary>Canada</primary>
          </indexterm>Canada, Algeria or parts of <indexterm class="singular" xml:id="b-9781474207300-IDX-684">
            <primary>French West Africa</primary>
          </indexterm>West Africa or <indexterm class="singular" xml:id="b-9781474207300-IDX-967">
            <primary>Indochina</primary>
          </indexterm>Indochina, colonized, and almost always non-white, migrants were rarely “turned into travelers” but were more accurately turned into slaves, aliens, immigrants, refugees, rogues, outlaws, and criminals when they strayed or were forced from their perceived homes.</para>
<para xml:id="b-9781474207300-666">While the explosion of the transportation industry, especially the expansion of the commercial flight industry in the 1950s, made the tools of mobility more accessible to a growing middle class in the West (<link linkend="b-9781474207300-ref375" role="bib">Lyth and Dierikx 1994</link>), global anticolonial movements threatened the stability of imperial borders, leading to increased border security and the intensified policing of movement within and between states. A culture of supporting technological innovation in the interest of strong empires and states encouraged the development of new forms of governmentality. Since the widespread movements of <indexterm class="singular" xml:id="b-9781474207300-IDX-469">
            <primary>decolonization</primary>
          </indexterm>decolonization in the 1960s, states have systematically implemented regimes of security that regulate who can cross national borders and how long they can stay: tourists, students, laborers, and refugees all need to be tracked, surveilled, and, depending on their economic status, nationality, sexual identity, gender, race, and/or religion, welcomed, tolerated, or deported.</para>
<para xml:id="b-9781474207300-667">Take, for example, the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1629">
            <primary>Schengen Agreement</primary>
          </indexterm>Schengen Agreement in Europe, signed in 1985 and implemented in 1995, that eliminated border controls between participating European states. As of 2017, there are twenty-six Schengen countries, twenty-two in the <indexterm class="singular" xml:id="b-9781474207300-IDX-566">
            <primary>European Union, EU</primary>
          </indexterm>European Union and four that are not (<indexterm class="singular" xml:id="b-9781474207300-IDX-908">
            <primary>Iceland</primary>
          </indexterm>Iceland, <indexterm class="singular" xml:id="b-9781474207300-IDX-1421">
            <primary>Norway</primary>
          </indexterm>Norway, <indexterm class="singular" xml:id="b-9781474207300-IDX-1763">
            <primary>Switzerland</primary>
          </indexterm>Switzerland, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1175">
            <primary>Lichtenstein</primary>
          </indexterm>Lichtenstein).<footnote label="2" role="end-bk-note" xml:id="b-9781474207300-fn5_2">
            <para xml:id="b-9781474207300-668">Notably, the United Kingdom and the Republic of Ireland always opted out of the agreement, choosing to control their own borders, well before England’s 2016 Brexit vote to leave the European Union.</para>
          </footnote> Schengen made mobility within Europe much easier for many Europeans and western tourists, encouraging a culture of inter-European travel and exchange: according to the <indexterm class="singular" xml:id="b-9781474207300-IDX-558">
            <primary>European Commission</primary>
          </indexterm>European Commission webpage (<link linkend="b-9781474207300-ref196" role="bib">2017</link>), “the border free Schengen Area guarantees free movement to more than 400 million EU citizens, as well as many EU-nationals, businessmen, tourists or other persons legally present on the EU territory.” Yet, as Schengen eased travel <?page value="118"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1773">
            <primary>Syria</primary>
          </indexterm>for those “legally present,” the “external border” of Europe saw a steady increase in security and policing, making it much more difficult for <indexterm class="singular" xml:id="b-9781474207300-IDX-26">
            <primary>Africa</primary>
            <secondary>migrants</secondary>
          </indexterm>migrants from Africa and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1274">
            <primary>Middle East</primary>
          </indexterm>Middle East, people often fleeing civil wars, political persecution, and economic and climate insecurity, to enter Europe (<link linkend="b-9781474207300-ref41" role="bib">Balibar 2004</link>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-181">
            <primary>Balibar, Etienne</primary>
          </indexterm>). Schengen States can reinstate the border when they deem it necessary, an action used with increasing frequency in 2015–16 as significant numbers of Syrian refugees sought asylum in Europe. The Schengen States are required to “cooperate with law enforcement agencies in other Schengen States in order to maintain a high level of security” (Schengen Area), which has meant the construction of detention centers for migrants and asylum seekers on European borders in <indexterm class="singular" xml:id="b-9781474207300-IDX-826">
            <primary>Greece</primary>
          </indexterm>Greece, <indexterm class="singular" xml:id="b-9781474207300-IDX-902">
            <primary>Hungary</primary>
          </indexterm>Hungary, and throughout the Balkans.</para>
<para xml:id="b-9781474207300-669">Allowing free movement within borders while strengthening the external border is a process Etienne Balibar (<link linkend="b-9781474207300-ref41" role="bib">2004</link>: 39) has deemed “immigration recolonized,” as migrants originating from former colonies are blocked from following the paths of labor migration formed during the period of formal colonialism. Similarly, in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1918">
            <primary>United States</primary>
          </indexterm>United States, President Donald J. <indexterm class="singular" xml:id="b-9781474207300-IDX-1854">
            <primary>Trump, Donald</primary>
          </indexterm>Trump’s 2016 campaign promise to build a wall between <indexterm class="singular" xml:id="b-9781474207300-IDX-1262">
            <primary>Mexico</primary>
          </indexterm>Mexico and the US operates on a faulty colonial logic that border walls prevent mobility. The building of the wall on the US–Mexico border intensifies the already blocked labor migration patterns established by the United States and Mexico during the <emphasis role="italic">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-243">
              <primary>Bracero program</primary>
            </indexterm>bracero</emphasis> program, which brought an estimated 4.5 million Mexican contract laborers to the United States between 1942 and 1964 (<link linkend="b-9781474207300-ref271" role="bib">Henderson 2011</link>) (see <link linkend="b-9781474207300-fig5_1" role="figure">Figure 5.1</link>). <anchor role="objectPointer" xml:id="b-9781474207300-figure5_1"/>
          <?page value="119"?>The contradiction inherent in a system that allows states to decide who can cross specific borders within a world that frames the freedom to move as a human rights issue is often clear to the people trapped in airport immigration and customs cells and being held in container detention facilities along the borders of Europe. In reality, the right to mobility is highly contested by growing popular conservative cultural movements that see the right to mobility as belonging only to the wealthy, the white, and the Western educated. Anti-immigrant political organizing and the election of xenophobic politicians throughout the West since the early 2010s has reproduced regimes of border control that largely mirror the national divisions of Western empire, despite the supposed freedoms brought about by Schengen and liberal immigration policies in the United States.</para>
<figure label="5.1" xlink:href="b-9781474207300-figure5_1" xlink:role="objectPointer" xml:id="b-9781474207300-fig5_1">
<info xml:id="b-9781474207300-670">
<title xml:id="b-9781474207300-671">Mexican men being registered to work as braceros in 1951. Credit: PhotoQuest/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-672">
<imageobject xml:id="b-9781474207300-673">
<imagedata align="center" fileref="images/fig5_1.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
</section>
<section xml:id="b-9781474207300-675">
<info xml:id="b-9781474207300-676">
<title xml:id="b-9781474207300-677">Passports, or, the Freedom to Move</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-678">The <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1482">
            <primary>passport</primary>
          </indexterm>passport is a modern tool that came into widespread usage in the early twentieth century as <indexterm class="singular" xml:id="b-9781474207300-IDX-1807">
            <primary>technology</primary>
            <secondary>transportation</secondary>
          </indexterm>transportation technology became more advanced and imperial nation-states faced a steady increase in colonial people looking to labor and settle outside the colonies. The growing ease of global movement by the early twentieth century made Western empires and states nervous for a variety of reasons. Without the ability to exclude certain people from crossing national borders, borders become irrelevant, thus creating a need for a system of counting and controlling the movement of citizens and non-citizens alike. The reasons for exclusion were numerous, but tended to emphasize a need to keep the population within the fixed borders safe from a variety of “foreign” threats: who exactly was viewed as a threat ebbed and flowed, but was based primarily on religious, racial, and economic factors. Sociologist John <indexterm class="singular" xml:id="b-9781474207300-IDX-1824">
            <primary>Torpey, John</primary>
          </indexterm>Torpey has argued that the development of a system of passport controls is the state’s “monopolization of human mobility” as “states must develop the capacity to ‘embrace’ their own citizens in order to extract from them the resources they need to reproduce themselves over time” (2000: 2). Creating documents—passports, identity cards, and papers—that specify who belongs to which state is the only way for the state to ensure who is a national and who is a non-national, despite deeply held cultural beliefs of the time based on racial science suggesting an organic relationship between race and nation.</para>
<para xml:id="b-9781474207300-679">The two main strains of thought in the development of European citizenship regulations are of <emphasis role="italic">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-1069">
              <primary>
                <emphasis role="italic">jus soli</emphasis>
              </primary>
            </indexterm>jus soli</emphasis> (right by territory), which states that a person born in a particular country should be granted citizenship to that particular territory, and <emphasis role="italic">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-1068">
              <primary>
                <emphasis role="italic">jus sanguinis</emphasis>
              </primary>
            </indexterm>jus sanguinis</emphasis> (right by blood or descent), which determines the citizenship of an individual based on race and/or origin of the birth parents (<link linkend="b-9781474207300-ref88" role="bib">Brubaker 1998</link>). While western states, including those in western Europe, as well as the United States, <indexterm class="singular" xml:id="b-9781474207300-IDX-303">
            <primary>Canada</primary>
          </indexterm>Canada, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1686">
            <primary>South Africa</primary>
          </indexterm>South Africa, have a history of choosing to abide by one or the <indexterm class="endofrange" startref="b-9781474207300-IDX-1629" xml:id="b-9781474207300-IDX-end171"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1918" xml:id="b-9781474207300-IDX-end201"/>other <?page value="120"?>principle, or sometimes a combination of the two, the complications brought out in the colonies by subjects having parents of different races and/or origins led to colonial courts making legal distinctions between race and nationality. As Christopher <indexterm class="singular" xml:id="b-9781474207300-IDX-1162">
            <primary>Lee, Christopher</primary>
          </indexterm>Lee (<link linkend="b-9781474207300-ref353" role="bib">2011</link>: 509) has shown, in British Africa during the interwar period, both categories of <emphasis role="italic">jus sanguinis</emphasis> and <emphasis role="italic">jus soli</emphasis> were at work in determining how colonized peoples were subject to state laws. A subject born, for example, in <indexterm class="singular" xml:id="b-9781474207300-IDX-1422">
            <primary>Nyasaland</primary>
          </indexterm>Nyasaland (present-day <indexterm class="singular" xml:id="b-9781474207300-IDX-1200">
            <primary>Malawi</primary>
          </indexterm>Malawi) to one African and one Indian parent was deemed by the courts in 1929 to be “non-native,” a “half-caste Indian,” thus not subject to the laws governing native peoples, yet still a British subject. All persons born on territory that was under British rule were British subjects, but their “race” or “origin” was a separate matter for a different set of regulations (<link linkend="b-9781474207300-ref353" role="bib">Lee 2011</link>: 511). And although France was a <emphasis role="italic">jus soli</emphasis> state that promoted assimilationist policies in the colonies, most <emphasis role="italic">indigènes</emphasis> in the colonies were barred from French <indexterm class="singular" xml:id="b-9781474207300-IDX-632">
            <primary>France</primary>
            <secondary>citizenship</secondary>
          </indexterm>citizenship because of a changing mixture of perceived racial origin, religious affiliation, language skills, and education level. While a small number of colonized peoples managed to become French citizens, even they were subject to regimes of racialist ideology meant to protect the whiteness of the French Republic.</para>
<para xml:id="b-9781474207300-680">Imperial systems meant to advance the interests of racial capitalism required the massive movement of populations far from their homes to labor as slaves on plantations, as indentured servants in factories and homes, and as middle managers to oversee colonized workers. The forced removal of people from their homes was a cornerstone of colonial conquest in the eighteenth and nineteenth centuries; however, this began to change by the early twentieth century, when colonized peoples began to explore the possibilities of migrating outside of their imperial networks and were often shut down by the creation of new passport regulations (<link linkend="b-9781474207300-ref411" role="bib">Mongia 1999</link>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1300">
            <primary>Mongia, Radhika Viyas</primary>
          </indexterm>). The difference between movement throughout empires and between nation-states is important here. Radhika Viyas Mongia has argued that from the early twentieth century to today, mobility has been dictated by the increased belief by states that race is inherently linked to national territory. The passport, as a tool of mobility, speaks to the unequal dimensions of contemporary access to transnational movement, what Mongia has described as a global system of “raced-migration,” “the specifically modern imbrication of the state, the nation, and race” (1999: 528). The development of the global passport regime increased in use as primarily non-white colonial subjects became increasingly mobile because of the two <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2062">
            <primary>World War I</primary>
          </indexterm>world wars and movements for anticolonial liberation, leading to a new cultural standard of identification linking personal identity directly to the passport one possesses and the details it provides (<link linkend="b-9781474207300-ref345" role="bib">Kumar 2000</link>).</para>
</section>
<section xml:id="b-9781474207300-681">
<info xml:id="b-9781474207300-682">
<title xml:id="b-9781474207300-683">Mobility, Empire, and the World Wars</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-684">The first waves of <indexterm class="singular" xml:id="b-9781474207300-IDX-1237">
            <primary>mass migration</primary>
          </indexterm>mass migration from the colonies to the metropole happened during and following the First World War. Colonial subjects had served in <indexterm class="endofrange" startref="b-9781474207300-IDX-1482" xml:id="b-9781474207300-IDX-end158"/>both <?page value="121"?>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-648">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>the British and <indexterm class="singular" xml:id="b-9781474207300-IDX-685">
            <primary>French West Africa</primary>
          </indexterm>French militaries prior to 1914, though their service was almost entirely geographically limited to the colonies and at sea. England followed a set of racial policies that prohibited black (mostly African and Caribbean) <indexterm class="singular" xml:id="b-9781474207300-IDX-949">
            <primary>India</primary>
            <secondary>soldiers</secondary>
          </indexterm>soldiers from fighting alongside white soldiers, based on the understanding that interaction between the races, particularly the policing of whites by blacks, would lessen the authority of white rule (C. Hall 2002). However, the massive loss of life during the First World War led to British officials calling on their colonial subjects: over one million Indians served in the British <indexterm class="singular" xml:id="b-9781474207300-IDX-659">
            <primary>France</primary>
            <secondary>military</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-812">
            <primary>Great Britain</primary>
            <secondary>military</secondary>
          </indexterm>military during the First World War, as well as 100,000 Egyptians and over 80,000 black South Africans, though the latter two groups were mostly limited to serving outside of Europe. <indexterm class="startofrange" xml:id="b-9781474207300-IDX-621">
            <primary>France</primary>
          </indexterm>France was less reluctant than England to bring non-white soldiers and workers into France. In France, over 600,000 “citizen-soldiers” came from West Africa, <indexterm class="singular" xml:id="b-9781474207300-IDX-1408">
            <primary>North Africa</primary>
          </indexterm>North Africa, <indexterm class="singular" xml:id="b-9781474207300-IDX-968">
            <primary>Indochina</primary>
          </indexterm>Indochina, <indexterm class="singular" xml:id="b-9781474207300-IDX-1197">
            <primary>Madagascar</primary>
          </indexterm>Madagascar, and even <indexterm class="singular" xml:id="b-9781474207300-IDX-676">
            <primary>French India</primary>
          </indexterm>French India. In addition to soldiers, France recruited over 220,000 overseas peoples as workers, including Algerians, Indochinese, Chinese, Moroccans, Tunisians, and Malagasy (<link linkend="b-9781474207300-ref515" role="bib">Stovall 1998</link>: 741). During this time, there were also thousands of workers from southern Europe who arrived to work in western Europe, but it was the arrival of peoples from the colonies during the period that led to a racialization of the workforce (<link linkend="b-9781474207300-ref522" role="bib">Tabili 1994</link>).</para>
<para xml:id="b-9781474207300-685">The arrival of colonized peoples in the metropole (primarily in France and England) during and after the war caused new debates on two main issues that reveal underlying anxieties about the preservation of the boundaries of race, sex, and class within the rapidly changing demographics of western Europe.<footnote label="3" role="end-bk-note" xml:id="b-9781474207300-fn5_3">
            <para xml:id="b-9781474207300-686">Scholarship shows that colonial migrants did not come to the Netherlands <emphasis role="italic">en masse</emphasis> from the Dutch East Indies until after the Second World War, although Gloria Wekker (<link linkend="b-9781474207300-ref578" role="bib">2016</link>) has argued that circulation of racialized discourse about Dutch colonial subjects before their arrival in the Netherlands has fundamentally shaped understandings of contemporary Dutch identity.</para>
          </footnote> First, there was the issue of mixed-race couplings, and second, the question of the make-up of the working class and whether or not this traditionally white political community should or would accept non-white workers in their ranks. By the end of the war, France lost 1.4 million and England 700,000 men, while many more in both countries were severely disabled as a result of war injuries. In the aftermath of war, people worried about reproducing the lost population, but were also fearful because of the appearance of colonial workers. Fears of <indexterm class="singular" xml:id="b-9781474207300-IDX-1287">
            <primary>miscegenation</primary>
          </indexterm>miscegenation and the degeneration of whiteness were catalysts for the race riots that swept across <indexterm class="startofrange" xml:id="b-9781474207300-IDX-779">
            <primary>Great Britain</primary>
          </indexterm>Britain in 1919 (<link linkend="b-9781474207300-ref577" role="bib">Webb 2017</link>), while in France “pronatalists, industrialists, work scientists, and eugenicists argued for ‘<emphasis role="italic">méstissage</emphasis> among whites’” (<link linkend="b-9781474207300-ref103" role="bib">Camiscioli 2009</link>: 130) to discourage white French women marrying non-white men. People ranging from feminists to politicians across a broad spectrum described relationships between “French women and non-white man as racially unsound and potentially dangerous” (2009: 131).</para>
<para xml:id="b-9781474207300-687">The direct threat of colonial subjects being accepted as part of the national body led to many in England and France redefining the nationalist subject, which was increasingly marked by race, religion, and language. The war not only brought massive destruction and fatalities into the homes of western Europeans, it also served as an opening for the colonized to move into the <?page value="122"?>metropole in a way that forced working-class and middle-class Europeans to confront empire directly, in the form of new neighbors, workmates, and members of the community. Following the end of the war, many of the colonial laborers and soldiers remained in Europe. French authorities, in response, continued to segregate the non-European workers, including those from the French colonies and territories as well as a substantial population of Chinese workers, through housing schemes and special labor contracts. The contracts that colonial laborers signed often stipulated that they could not change jobs and had no leverage to negotiate higher wages or better working conditions. Tyler <indexterm class="singular" xml:id="b-9781474207300-IDX-1739">
            <primary>Stovall, Tyler</primary>
          </indexterm>Stovall (<link linkend="b-9781474207300-ref515" role="bib">1998</link>: 745) has argued that “the contrasting lack of mobility among colonial workers soon made them the poorest paid laborers in France.” In addition to limiting the colonial workers’ ability to move between jobs, the arrival of significant numbers of non-white workers led to the French state creating institutions and technologies to track those perceived as threats. During the <indexterm class="singular" xml:id="b-9781474207300-IDX-1004">
            <primary>interwar period</primary>
          </indexterm>interwar years, the French police “developed systematic means to enforce distinctions between citizens, nationals, and foreigners,” applying technologies developed to surveil criminals to a population of immigrants who “had done nothing wrong” (<link linkend="b-9781474207300-ref476" role="bib">Rosenberg 2006</link>: 5). A culture of <indexterm class="singular" xml:id="b-9781474207300-IDX-661">
            <primary>France</primary>
            <secondary>surveillance</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1760">
            <primary>surveillance</primary>
          </indexterm>surveillance became the norm and was installed in hospitals and health clinics, at schools and through social welfare agencies, often based on the argument that non-western cultures were anti-assimilationist and thus non-western subjects refused to become proper national subjects (<link linkend="b-9781474207300-ref212" role="bib">Foucault 1977</link>).</para>
<para xml:id="b-9781474207300-688">Britain had recruited fewer colonial workers to work in factories at home, thus following the end of the First World War, the populations of colonial subjects in England remained relatively minor.<footnote label="4" role="end-bk-note" xml:id="b-9781474207300-fn5_4">
            <para xml:id="b-9781474207300-689">One estimate suggests there were no more than 8,000 “Asians” (typically meaning south Asians in this context) living and working in England in the early 1930s, within a population of 44 million (see <link linkend="b-9781474207300-ref566" role="bib">Visram 2002</link>: 254).</para>
          </footnote> Still, there was a significant and growing presence of both Asian and black folks originating from the <indexterm class="singular" xml:id="b-9781474207300-IDX-320">
            <primary>Caribbean</primary>
          </indexterm>Caribbean and West <indexterm class="singular" xml:id="b-9781474207300-IDX-18">
            <primary>Africa</primary>
          </indexterm>Africa who found ways to settle, especially in port cities like Liverpool (<link linkend="b-9781474207300-ref312" role="bib">Jenkinson 2012</link>). Many Afro-Caribbean people who came were merchant marines, hired in colonial ports in Africa, <indexterm class="singular" xml:id="b-9781474207300-IDX-140">
            <primary>Asia</primary>
          </indexterm>Asia, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1275">
            <primary>Middle East</primary>
          </indexterm>Middle East, and the Caribbean, and were viewed with great suspicion by both the state and local populations who saw them as a threat to both the purity of white women and the local economy (<link linkend="b-9781474207300-ref522" role="bib">Tabili 1994</link>). Anxieties over the economy and sexual purity manifested into laws such as the <indexterm class="singular" xml:id="b-9781474207300-IDX-83">
            <primary>Alien Seaman Order (1925)</primary>
          </indexterm>Alien Seaman Order of 1925, which required non-white sailors to register as “aliens” with the state. The order “was an episode in an ongoing process that reconstructed colonial racial categories in the mother country,” a move not toward the dissolution of empire but instead toward bringing the benefits of white supremacy into the metropole from the colonies (<link linkend="b-9781474207300-ref522" role="bib">Tabili 1994</link>: 63). Neither France nor England could stop the influx of non-white people during the interwar years, but they were able to put into place systems of surveillance and segregation that continued to determine who was a legitimate member of the state. Although colonial subjects arrived in Europe during a time when they were almost always legally members of the <indexterm class="endofrange" startref="b-9781474207300-IDX-648" xml:id="b-9781474207300-IDX-end63"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-779" xml:id="b-9781474207300-IDX-end79"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2062" xml:id="b-9781474207300-IDX-end225"/>imperial <?page value="123"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1298">
            <primary>Mondland, Eduardo</primary>
          </indexterm>state, as subjects or citizens, the seeds of seeing the colonized as fundamentally different, based on race, ethnicity, race, religion, and culture, were planted during these early waves of migration through the cultural transmission of the white, Christian, heteronormative family as the legitimate successor of Western <indexterm class="singular" xml:id="b-9781474207300-IDX-802">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1527">
            <primary>Portugal</primary>
            <secondary>empire</secondary>
          </indexterm>Empire.</para>
</section>
<section xml:id="b-9781474207300-690">
<info xml:id="b-9781474207300-691">
<title xml:id="b-9781474207300-692">Global Revolutions and the Anticolonial Diaspora</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-693">The interwar period was a time of exile and circulation for many colonized peoples active in liberation struggles. While mobility was necessary for the expansion of empire, it was also a threat to the imperial order, as anticolonial agitators traveled to Europe, <indexterm class="singular" xml:id="b-9781474207300-IDX-1595">
            <primary>Russia</primary>
          </indexterm>Russia, <indexterm class="singular" xml:id="b-9781474207300-IDX-1053">
            <primary>Japan</primary>
          </indexterm>Japan, <indexterm class="singular" xml:id="b-9781474207300-IDX-438">
            <primary>Cuba</primary>
          </indexterm>Cuba, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1263">
            <primary>Mexico</primary>
          </indexterm>Mexico to learn bomb-making skills and revolutionary theory. The ability of colonized peoples to mobilize, especially through imperial travel routes, was a cornerstone of the success of anticolonial organizing. Despite increased surveillance and attempts by imperial states to limit immigration and demobilize the troops who had come to Europe, the cosmopolitan contact zones of Paris, London, Lisbon, and Berlin, as well as cities in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1919">
            <primary>United States</primary>
          </indexterm>United States including New York and San Francisco, became important centers of global anticolonial agitation in the 1920s and 1930s. A great number of anticolonial thinkers and leaders were educated in the heart of Western empire, including Mohandas K. <indexterm class="singular" xml:id="b-9781474207300-IDX-707">
            <primary>Gandhi, Mohandas</primary>
          </indexterm>Gandhi, Muhammad Ali <indexterm class="singular" xml:id="b-9781474207300-IDX-1065">
            <primary>Jinnah, Muhammad Ali</primary>
          </indexterm>Jinnah, Jawaharlal <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1356">
            <primary>Nehru, Jawaharlal</primary>
          </indexterm>Nehru, and Aurobindo <indexterm class="singular" xml:id="b-9781474207300-IDX-742">
            <primary>Ghosh, Aurobindo</primary>
          </indexterm>Ghosh in England; Ho Chi <indexterm class="singular" xml:id="b-9781474207300-IDX-1284">
            <primary>Minh, Ho Chi</primary>
          </indexterm>Minh, Zhou <indexterm class="singular" xml:id="b-9781474207300-IDX-536">
            <primary>Enlai, Zhou</primary>
          </indexterm>Enlai, Frantz <indexterm class="singular" xml:id="b-9781474207300-IDX-580">
            <primary>Fanon, Frantz</primary>
          </indexterm>Fanon, Aimé and Suzanne <indexterm class="singular" xml:id="b-9781474207300-IDX-330">
            <primary>Césaire, Aimé</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-333">
            <primary>Césaire, Suzanne</primary>
          </indexterm>Césaire, Léopold Sédar <indexterm class="singular" xml:id="b-9781474207300-IDX-1640">
            <primary>Senghor, Léopold Sédar</primary>
          </indexterm>Senghor, and Messali <indexterm class="singular" xml:id="b-9781474207300-IDX-846">
            <primary>Hadj, Messali</primary>
          </indexterm>Hadj in France; Amílcar <indexterm class="singular" xml:id="b-9781474207300-IDX-286">
            <primary>Cabral, Amilcar</primary>
          </indexterm>Cabral and Eduardo Mondlane in Portugal; and Kwame <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1399">
            <primary>Nkrumah, Kwame</primary>
          </indexterm>Nkrumah and B.R. <indexterm class="singular" xml:id="b-9781474207300-IDX-90">
            <primary>Ambedkar, B. R.</primary>
          </indexterm>Ambedkar in the United States.</para>
<para xml:id="b-9781474207300-694">Anticolonial nationalist movements were a key cultural element of the anticolonial diaspora throughout the twentieth century: movements were often formed in diasporic meetings and funded by colonial migrants who came together to share resources as well as agitate for political change (<link linkend="b-9781474207300-ref236" role="bib">Goebel 2016</link>). Thousands of anticolonial pamphlets were printed in the United States, France, <indexterm class="singular" xml:id="b-9781474207300-IDX-719">
            <primary>Germany</primary>
          </indexterm>Germany, <indexterm class="startofrange" xml:id="b-9781474207300-IDX-210">
            <primary>Belgium</primary>
          </indexterm>Belgium, and other European countries and smuggled abroad, to circulate among the global colonial diaspora. The south Asian anticolonial <indexterm class="singular" xml:id="b-9781474207300-IDX-736">
            <primary>Ghadar Party</primary>
          </indexterm>Ghadar Party, which was instrumental in advocating for Indian independence, was almost entirely organized in the United States and <indexterm class="singular" xml:id="b-9781474207300-IDX-304">
            <primary>Canada</primary>
          </indexterm>Canada (<link linkend="b-9781474207300-ref465" role="bib">Ramnath 2011</link>). Kwame Nkrumah, the anti-imperialist leader and first prime minister of <indexterm class="singular" xml:id="b-9781474207300-IDX-739">
            <primary>Ghana</primary>
          </indexterm>Ghana, established a political group of West Africans against the British Empire while he was a student in London in the 1940s (<link linkend="b-9781474207300-ref475" role="bib">Rooney 1988</link>). Many future leaders of various African liberation movements against Portuguese rule, including Amilcar Cabral, Agostinho <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1373">
            <primary>Neto, Agostinho</primary>
          </indexterm>Neto, Mario <indexterm class="singular" xml:id="b-9781474207300-IDX-451">
            <primary>de Andrade, Mario</primary>
          </indexterm>de Andrade, Lucio <indexterm class="singular" xml:id="b-9781474207300-IDX-1138">
            <primary>Lara, Lucio</primary>
          </indexterm>Lara, Eduardo Mondlane, and Marcellino <indexterm class="singular" xml:id="b-9781474207300-IDX-497">
            <primary>Dos Santos, Marcellino</primary>
          </indexterm>dos Santos, met while studying in Lisbon and living together at the <emphasis role="italic">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-324">
              <primary>
                <emphasis role="italic">Casa dos Estudantes de Império</emphasis>
              </primary>
            </indexterm>Casa dos Estudantes de Império</emphasis>, a government-funded dorm for <?page value="124"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-405">
            <primary>communism</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-780">
            <primary>Great Britain</primary>
          </indexterm>Portuguese-African colonial students (<link linkend="b-9781474207300-ref59" role="bib">Benewick and Green 1992</link>: 36). The future leaders of the MPLA (<indexterm class="singular" xml:id="b-9781474207300-IDX-1491">
            <primary>People’s Movement for the Liberation of Angola, MPLA</primary>
          </indexterm>People’s Movement for the Liberation of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-103">
            <primary>Angola</primary>
          </indexterm>Angola) and FRELIMO (the <indexterm class="singular" xml:id="b-9781474207300-IDX-1317">
            <primary>Mozambique Liberation Front, FRELIMO</primary>
          </indexterm>Mozambique Liberation Front) met while studying in Lisbon. Imperial networks were of key importance in bringing together the future leaders of anticolonial movements, decades before the same leaders would meet again at international gatherings in Bandung, Cairo, Tehran, Belgrade, Buenos Aires, and Havana (<link linkend="b-9781474207300-ref460" role="bib">Prashad 2008</link>).</para>
<para xml:id="b-9781474207300-695">Owing in part to nationalist protest as well as external factors brought on by the war, anticolonial agitation became louder and stronger in the interwar period, especially in the colonies that were sending significant numbers of soldiers and laborers into the heart of imperial spaces. Movements for independence mobilized hundreds of thousands of people calling for the end of colonialism and often for national liberation, leading to a widespread culture of work stoppages, boycotts, and armed insurrection. In response, imperial powers began to restrict mobility in new ways. England, France, <indexterm class="singular" xml:id="b-9781474207300-IDX-1519">
            <primary>Portugal</primary>
          </indexterm>Portugal, and Belgium all sanctioned and carried out military suppression of anticolonial uprisings, but the attempts to quell the masses were largely unsuccessful at stopping the movements, despite mass casualties. As a result, anticolonial agitators were often put into prison, making <emphasis role="italic">immobility</emphasis> through incarceration a primary tactic of counterinsurgency.</para>
<para xml:id="b-9781474207300-696">Incarcerating and immobilizing anticolonialists was not limited to one imperial power, but was widespread throughout the colonies during the decades of anticolonial struggle. The British Raj imprisoned, at various times, many <indexterm class="singular" xml:id="b-9781474207300-IDX-952">
            <primary>Indian National Congress</primary>
          </indexterm>Indian National Congress leaders, including Jawaharlal Nehru and M.K. <indexterm class="singular" xml:id="b-9781474207300-IDX-705">
            <primary>Gandhi, Mahatma</primary>
          </indexterm>Gandhi. In British-controlled Gold Coast, Kwame Nkrumah was arrested and imprisoned in 1950. In the French protectorate of <indexterm class="singular" xml:id="b-9781474207300-IDX-1858">
            <primary>Tunisia</primary>
          </indexterm>Tunisia, Habib <indexterm class="singular" xml:id="b-9781474207300-IDX-242">
            <primary>Bourguiba, Habib</primary>
          </indexterm>Bourguiba, the leader of the Tunisian nationalist <indexterm class="singular" xml:id="b-9781474207300-IDX-1360">
            <primary>Neo-Destour Party</primary>
          </indexterm>Neo-Destour Party was held in detention throughout the early 1950s, and in the <indexterm class="singular" xml:id="b-9781474207300-IDX-203">
            <primary>Belgian Congo</primary>
          </indexterm>Belgian Congo the freedom fighter Patrice <indexterm class="singular" xml:id="b-9781474207300-IDX-1181">
            <primary>Lumumba, Patrice</primary>
          </indexterm>Lumumba was imprisoned after an anticolonial uprising in Stanleyville in 1959. Of course, major figures were not the only anticolonial resistors to be imprisoned: police and military throughout the colonized world arrested and imprisoned students, workers, those deemed sexually deviant, communists, and other opponents of empire, including significant numbers of women and youth.</para>
<para xml:id="b-9781474207300-697">Often the political writings and speeches of those imprisoned, in addition to the act of imprisonment, mobilized more support for the anticolonial cause as large numbers of people organized protests to free political prisoners. When <indexterm class="singular" xml:id="b-9781474207300-IDX-1297">
            <primary>Mohammed V, Sultan of Morocco</primary>
          </indexterm>Mohammed V, the Sultan of Morocco, and his two sons were forced by the French into exile on <indexterm class="singular" xml:id="b-9781474207300-IDX-428">
            <primary>Corsica</primary>
          </indexterm>Corsica in 1953, he was transformed into a nationalist hero (<link linkend="b-9781474207300-ref540" role="bib">Thomas <emphasis role="italic">et al.</emphasis> 2015</link>: 189). The Dutch exiled several nationalist leaders from the <indexterm class="singular" xml:id="b-9781474207300-IDX-501">
            <primary>Dutch East Indies</primary>
          </indexterm>Dutch East Indies in the early 1940s, including Tjipto <indexterm class="singular" xml:id="b-9781474207300-IDX-1224">
            <primary>Mangoenkoesoemo, Tjipto</primary>
          </indexterm>Mangoenkoesoemo, Mohammed <indexterm class="singular" xml:id="b-9781474207300-IDX-856">
            <primary>Hatta, Mohammed</primary>
          </indexterm>Hatta, and the future Indonesian president, <indexterm class="singular" xml:id="b-9781474207300-IDX-1757">
            <primary>Sukarno</primary>
          </indexterm>Sukarno. Agostinho Neto, leader of the MPLA and eventually the first president of Angola, was arrested in 1960 and quickly exiled to <indexterm class="singular" xml:id="b-9781474207300-IDX-307">
            <primary>Cape Verde</primary>
          </indexterm>Cape Verde, at <indexterm class="endofrange" startref="b-9781474207300-IDX-210" xml:id="b-9781474207300-IDX-end14"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-621" xml:id="b-9781474207300-IDX-end56"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1356" xml:id="b-9781474207300-IDX-end140"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1373" xml:id="b-9781474207300-IDX-end141"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1399" xml:id="b-9781474207300-IDX-end146"/>least <?page value="125"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1888">
            <primary>United Nations Declaration of Human Rights, UNDR</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2072">
            <primary>World War II</primary>
          </indexterm>partially because his imprisonment in Angola led to massive protests by his supporters. He was sent to jail in Lisbon, then placed under house arrest following international protests. Despite imprisonment and exile, many of the prisoners could call on their supporters to carry on the anticolonial mission, giving mobility to ideas and actions when physical bodies had been rendered immobile.</para>
</section>
<section xml:id="b-9781474207300-698">
<info xml:id="b-9781474207300-699">
<title xml:id="b-9781474207300-700">Postwar Displacements and Global Governance</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-701">The end of the Second World War, which came in May 1945, initiated a refugee crisis in Europe itself that would come to greatly affect population demographics in many parts of the world. In addition to the over 11 million people who were exterminated during the Nazi genocide and the more than 25 million military causalities, millions of civilians had fled their homes, either in search of safety or because the <indexterm class="singular" xml:id="b-9781474207300-IDX-1342">
            <primary>Nazis</primary>
          </indexterm>Nazis had forced them into some sort of service. After the war, approximately 11 million people in Europe, 4.5 million of whom were in Soviet-controlled areas in <indexterm class="singular" xml:id="b-9781474207300-IDX-1509">
            <primary>Poland</primary>
          </indexterm>Poland, <indexterm class="singular" xml:id="b-9781474207300-IDX-165">
            <primary>Austria</primary>
          </indexterm>Austria, and <indexterm class="singular" xml:id="b-9781474207300-IDX-720">
            <primary>Germany</primary>
          </indexterm>Germany, were not only far from home, but were not sure that they still had homes (<link linkend="b-9781474207300-ref272" role="bib">Hitchcock 2009</link>). The Allies, working with NGOs and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1882">
            <primary>United Nations</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1891">
            <primary>United Nations Relief and Rehabilitation Administration, UNRRA</primary>
          </indexterm>United Nations Relief and Rehabilitation Administration (UNRRA), repatriated around 10 million of the “displaced persons” between March and September 1945, but around 1.5 million displaced persons remained in refugee camps (often the same concentration camps they had been imprisoned within) until the early 1960s.</para>
<para xml:id="b-9781474207300-702">The postwar refugee crisis was one of the first major tasks that the newly created United Nations (1945) faced. The majority of displaced persons were victims of Nazi campaigns, and although the Allied nations did accept some of the displaced people, their doors would only open so far. This issue was on the minds of the creators of the one of the first major documents the UN produced, the Universal Declaration of Human Rights (UDHR) (1948). The UDHR deals explicitly with the right to movement. Article 13 reads: “(1) Everyone has the right to freedom of movement and residence within borders of each state. (2) Everyone has the right to leave any country, including his own, and to return to his country.” It is important to note that the association with a person’s right to movement is explicitly tied to his or her national belonging, a resolution consistent with the widespread implementation of passport controls during and after the wars. The UN, while committing to the rights of all people to the freedom of movement, also became deeply embedded in the system of state controls as they created a network of institutions that track and monitor refugees.</para>
<para xml:id="b-9781474207300-703">Even though colonial conquest had been the direct cause of the displacement of millions of colonized subjects for centuries prior, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1890">
            <primary>United Nations High Commissioner on Refugees</primary>
          </indexterm>United Nations High Commissioner on Refugees, the governing body that wrote the <indexterm class="endofrange" startref="b-9781474207300-IDX-103" xml:id="b-9781474207300-IDX-end10"/>contemporary <?page value="126"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-69">
            <primary>Algeria</primary>
            <secondary>race</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-945">
            <primary>India</primary>
            <secondary>partition</secondary>
          </indexterm>definition of refugee, was founded to address the crisis Europe faced at the end of its own war, not to deal with issues of colonial displacement. Despite the flourishing of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1402">
            <primary>Non-Aligned Movement</primary>
          </indexterm>Non-Aligned Movement that brought together anticolonial leaders in a series of international meetings, as well as the participation of recently liberated countries to the UN, it was not until 1960 that the UN produced a document that addressed the problem of colonialism. The “Declaration on the Granting of Independence to Colonial Countries and People” came about after great pressure was put onto the UN from the bloc of formerly colonized nation-states, and sought global anticolonial liberation. This attention to the displaced people of Europe, and a lack of interest or concern for the colonized people who had faced centuries of brutal resettlement was not lost on the colonized. As the Martinican poet-intellectual Aimé <indexterm class="singular" xml:id="b-9781474207300-IDX-331">
            <primary>Césaire, Aimé</primary>
          </indexterm>Césaire (<link linkend="b-9781474207300-ref108" role="bib">[1950] 2000</link>) wrote in his essay <emphasis role="italic">Discours sur le colonialisme</emphasis> (Discourse on Colonialism),</para>
<blockquote xml:id="b-9781474207300-704">
<para xml:id="b-9781474207300-705">It would be worthwhile to study clinically, in detail, the steps taken by <indexterm class="singular" xml:id="b-9781474207300-IDX-871">
              <primary>Hitler, Adolph</primary>
            </indexterm>Hitler and Hitlerism and to reveal to the very distinguished, very humanistic Christian bourgeois of the twentieth century that without his being aware of it, he has Hitler inside him, that Hitler <emphasis role="italic">inhabits</emphasis> him, that Hitler is his <emphasis role="italic">demon</emphasis>, that if he rails against him, he is being inconsistent and that, at bottom, what he cannot forgive Hitler for is not <emphasis role="italic">the crime</emphasis> in itself, <emphasis role="italic">the crime against man</emphasis>, it is not the <emphasis role="italic">humiliation of man as such</emphasis>, it is the crime against the white man, the humiliation of the white man, and the fact that he applied to Europe colonialist procedures which until then had been reserved exclusively for the Arabs of Algeria, the “coolies” of India, and the “niggers” of Africa ([1950] 2000: 36, original emphasis).</para>
</blockquote>
<para role="fullOut" xml:id="b-9781474207300-706">Displacement was a cornerstone of western imperial expansion, from settler colonialism which decimated indigenous populations in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1920">
            <primary>United States</primary>
          </indexterm>United States, <indexterm class="singular" xml:id="b-9781474207300-IDX-305">
            <primary>Canada</primary>
          </indexterm>Canada, <indexterm class="singular" xml:id="b-9781474207300-IDX-326">
            <primary>Central America</primary>
          </indexterm>Central and <indexterm class="singular" xml:id="b-9781474207300-IDX-1143">
            <primary>Latin America</primary>
          </indexterm>Latin America, <indexterm class="singular" xml:id="b-9781474207300-IDX-161">
            <primary>Australia</primary>
          </indexterm>Australia, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1378">
            <primary>New Zealand</primary>
          </indexterm>New Zealand, to the racially segregated regimes in <indexterm class="singular" xml:id="b-9781474207300-IDX-1687">
            <primary>South Africa</primary>
          </indexterm>South Africa and Algeria, to the massive forced migrations initiated by the Atlantic slave trade. Césaire, in this postwar moment, gave voice to the deep contradiction in the European panic over the “refugee crisis” attributed to the inherent evil of Hitler, when in fact the West had turned a blind eye (when not actively involved) to centuries of violence and genocide in the European colonies. That the largest and most violent movements of people in the twentieth century occurred in the wake of imperial collapse should thus come as no surprise.</para>
</section>
<section xml:id="b-9781474207300-707">
<info xml:id="b-9781474207300-708">
<title xml:id="b-9781474207300-709">The Partitions and Migrations of 1947–8 and their Afterlives</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-710">The beginning of the end of the British Empire was ushered in on a wave of partitions that spoke to the importance of cultural nationalism in the postwar <?page value="127"?>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2073">
            <primary>World War II</primary>
          </indexterm>period. The partition of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-928">
            <primary>India</primary>
          </indexterm>India into India and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1466">
            <primary>Pakistan</primary>
          </indexterm>Pakistan on August 15, 1947 and the end of the British Mandate and the creation of the state of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1030">
            <primary>Israel</primary>
          </indexterm>Israel on May 15, 1948 caused two of the most important mass displacements and migrations of the twentieth century. The partition of India came at the same time as its <indexterm class="singular" xml:id="b-9781474207300-IDX-942">
            <primary>India</primary>
            <secondary>independence</secondary>
          </indexterm>independence, leading to both celebrations and atrocity for the millions of people who were displaced, exterminated, or made into refugees in their own newly liberated countries (<link linkend="b-9781474207300-ref442" role="bib">Pandey 2006</link>). Likewise, using the marker of “the creation of Israel” to frame the events in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1473">
            <primary>Palestine</primary>
          </indexterm>Palestine in 1947–8 celebrates the new state while eclipsing the displacement of the Palestinian people, the destruction of the Palestinian state, and the loss of Palestinian homes and livelihoods. As Ilan <indexterm class="singular" xml:id="b-9781474207300-IDX-1478">
            <primary>Pappé, Ilan</primary>
          </indexterm>Pappé (<link linkend="b-9781474207300-ref445" role="bib">2006</link>) notes, while the 1948 war was the “war of independence” for Israelis, it is better known as <emphasis role="italic">al-Nakba</emphasis>, or “the catastrophe,” to Palestinians and others in the Arab world. Both partitions were accompanied by massive violence, including forced removals, systematic rape, and murder. In south Asia as well as Palestine, entire villages were destroyed. <indexterm class="singular" xml:id="b-9781474207300-IDX-2035">
            <primary>women</primary>
            <secondary>South Asian</secondary>
          </indexterm>South Asian women—Hindu, Muslim, and Sikh—were forced, often by way of sexual assault, into religious conversion and joining new families, changing their ancestral names, and erasing their previous lives. In Palestine, families were forced into refugee camps in neighboring states as their homes were occupied or destroyed. Many of these families and their descendants continue to live in exile today.</para>
<para xml:id="b-9781474207300-711">The establishment of Israel in 1948 was the result of colonial interest in the region combined with the desire of the Jewish diaspora for the establishment of a homeland, speaking to the importance of belonging to a state in the contemporary world system wherein people are recognized primarily through their state belonging. <indexterm class="singular" xml:id="b-9781474207300-IDX-2097">
            <primary>Zionism</primary>
          </indexterm>Zionism, a form of Jewish nationalism, is a political movement founded in the late nineteenth century intent on the reestablishment of a Jewish homeland in Palestine, believed to be the ancient homeland of the Jewish people. Theodor <indexterm class="singular" xml:id="b-9781474207300-IDX-862">
            <primary>Herzl, Theodor</primary>
          </indexterm>Herzl, an Austro-Hungarian <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1063">
            <primary>Jews</primary>
          </indexterm>Jew who grew up facing rampant <indexterm class="singular" xml:id="b-9781474207300-IDX-721">
            <primary>Germany</primary>
            <secondary>anti-Semitism</secondary>
          </indexterm>anti-Semitism in <indexterm class="singular" xml:id="b-9781474207300-IDX-166">
            <primary>Austria</primary>
          </indexterm>Austria, Germany, and <indexterm class="singular" xml:id="b-9781474207300-IDX-622">
            <primary>France</primary>
          </indexterm>France, founded the movement in 1897.<footnote label="5" role="end-bk-note" xml:id="b-9781474207300-fn5_5">
            <para xml:id="b-9781474207300-712">While there were Jewish settlements in Palestine prior to 1897, Herzl articulated Zionism as a political movement that continues into the present day.</para>
          </footnote> Zionist migration into Palestine before the creation of Israel occurred throughout five waves, heavily tied to anti-Semitic movements in Europe and <indexterm class="singular" xml:id="b-9781474207300-IDX-1596">
            <primary>Russia</primary>
          </indexterm>Russia, including the <indexterm class="singular" xml:id="b-9781474207300-IDX-498">
            <primary>Dreyfus Affair</primary>
          </indexterm>Dreyfus Affair in France and anti-Semitic pogroms in Russia. Herzl desired the establishment of a Jewish state recognized by international law, an idea he discussed with both the Ottoman Sultan <indexterm class="singular" xml:id="b-9781474207300-IDX-2">
            <primary>Abdülhamid II</primary>
          </indexterm>Abdülhamid II and the German Kaiser <indexterm class="singular" xml:id="b-9781474207300-IDX-2023">
            <primary>Wilhelm, Kaiser</primary>
          </indexterm>Wilhelm, and while they both turned him down, Zionists thought for a time about accepting the British offer to establish a Jewish homeland in <indexterm class="singular" xml:id="b-9781474207300-IDX-1864">
            <primary>Uganda</primary>
          </indexterm>Uganda.</para>
<para xml:id="b-9781474207300-713">While these discussions about the future of the Jewish people took place, Zionist migrants began to settle in Palestine. Between 1882 and 1903, 25,000 Zionist migrants, mostly from eastern Europe arrived; 40,000 between 1904 and 1914; 35,000 between 1919 and 1923; 67,000, originating primarily from <indexterm class="singular" xml:id="b-9781474207300-IDX-1510">
            <primary>Poland</primary>
          </indexterm>Poland, between 1924 and 1928; over 250,000 in the lead up to the Second <?page value="128"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1070">
            <primary>Kahn, Yasmin</primary>
          </indexterm>Word War between 1929 and 1939; and finally, during the war between 1940 and 1945, another 60,000-people arrived (<link linkend="b-9781474207300-ref331" role="bib">Khalidi 2006</link>: 571–9). The percentage of the Jewish population in Palestine grew from six percent in 1880 to over 31 percent by 1945. In contrast, by the end of the war fought to create the state of Israel, “more than half of Palestine’s native population, close to 800,000 people, had been uprooted, 531 villages had been destroyed, and eleven urban neighborhoods emptied of their inhabitants” (<link linkend="b-9781474207300-ref445" role="bib">Pappé 2006</link>: xiii). Fifty-four percent of the total Palestinian population at the time were made into refugees (<link linkend="b-9781474207300-ref331" role="bib">Khalidi 2006</link>: xxxiii).</para>
<para xml:id="b-9781474207300-714">The drawing of the border between India and the newly created Pakistan, which was geographically split into two, East and West Pakistan, with India in the middle, and the association with these new borders as a religious border meant to segregate the <indexterm class="singular" xml:id="b-9781474207300-IDX-1322">
            <primary>Muslims</primary>
          </indexterm>Muslims from the <indexterm class="singular" xml:id="b-9781474207300-IDX-865">
            <primary>Hindus</primary>
          </indexterm>Hindus, <indexterm class="singular" xml:id="b-9781474207300-IDX-1659">
            <primary>Sikhs</primary>
          </indexterm>Sikhs, <indexterm class="singular" xml:id="b-9781474207300-IDX-272">
            <primary>Buddhists</primary>
          </indexterm>Buddhists, <indexterm class="singular" xml:id="b-9781474207300-IDX-1037">
            <primary>Jains</primary>
          </indexterm>Jains, <indexterm class="singular" xml:id="b-9781474207300-IDX-2098">
            <primary>Zoroastrians</primary>
          </indexterm>Zoroastrians, <indexterm class="singular" xml:id="b-9781474207300-IDX-356">
            <primary>Christians</primary>
          </indexterm>Christians, and Jews led to the targeted rapes and killings of millions of people. Estimates of the dead vary from 200,000 to two million (<link linkend="b-9781474207300-ref98" role="bib">Butalia 1998</link>). As historian Yasmin Khan (<link linkend="b-9781474207300-ref332" role="bib">2008</link>: 157) writes, most people, especially in the highly contested area of the Punjab, fled their ancestral homes without notice, leaving behind the majority of their belongings and whatever amount of wealth they possessed, many not knowing where they were going or what would be there if and when they arrived. Refugee camps sprung up around India, a temporary measure that created “refugees” out of supposed national subjects. Tensions between India and Pakistan (and <indexterm class="singular" xml:id="b-9781474207300-IDX-191">
            <primary>Bangladesh</primary>
          </indexterm>Bangladesh, the area that was West Pakistan until 1971) remain high today. It is still impossible for many people who were displaced in 1947 or during partition to return to their ancestral homes, and the governments of India and Pakistan are reluctant to issue visas to each other, keeping families who were separated far apart (<link linkend="b-9781474207300-ref98" role="bib">Butalia 1998</link>).</para>
<para xml:id="b-9781474207300-715">Unlike India and Pakistan, which were partitioned as a final act of colonial rule, the establishment of the state of Israel and the colonization of the Palestinian homeland “evolved in the post-heyday of the classical European colonization of Asian and African countries and in the wake of the espousal by the Western democracies of the principle of self-determination” (<link linkend="b-9781474207300-ref331" role="bib">Khalidi 2006</link>: xxxi). The <indexterm class="singular" xml:id="b-9781474207300-IDX-179">
            <primary>Balfour, Arthur James</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-180">
            <primary>Balfour Declaration</primary>
          </indexterm>Balfour Declaration, issued by British foreign secretary Lord Arthur James Balfour in 1917, declared British support for the creation of a Jewish “national homeland” in Palestine. While the British were in conversation with various Arab leaders about mutual interests in the region, the move for Jewish settlement in Palestine increased with this support from England.</para>
<para xml:id="b-9781474207300-716">Normalizing occupation has become an essential part of the Israeli state’s campaign against Palestine, as Israel has become a western space situated within the <indexterm class="singular" xml:id="b-9781474207300-IDX-1276">
            <primary>Middle East</primary>
          </indexterm>Middle East. Displacement of populations often occurred simultaneously with the growth of the tourist industry: the “opening” of spaces from the control of “undesirable” populations also opens the doors to <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1831">
            <primary>tourism</primary>
          </indexterm>tourism (<link linkend="b-9781474207300-ref133" role="bib">Cohen-Hattab and Katz 2001</link>). The tension at the center of this contradiction is <indexterm class="endofrange" startref="b-9781474207300-IDX-1063" xml:id="b-9781474207300-IDX-end120"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2073" xml:id="b-9781474207300-IDX-end227"/>the <?page value="129"?>gap between those who choose to travel for leisure, pleasure, or economic opportunity, and those who are compelled, coerced, or forced to move for a wide variety of reasons, including but not limited to war, economic depression, targeted state violence, and changing state borders. Western tourism—from Jewish birthright trips and other types of religious nationalist tourism to the marketing of beach vacations—allows non-Palestinians to have access to ancestral Palestinian lands that Palestinians are no longer allowed to access. Anthropologist Rebecca <indexterm class="singular" xml:id="b-9781474207300-IDX-1734">
            <primary>Stein, Rebecca</primary>
          </indexterm>Stein (<link linkend="b-9781474207300-ref506" role="bib">2008</link>: 647) has shown how, after 1967, a “tourist event of massive proportions” took place as Israelis surged to sites that had been off limits to Israeli passport holders since the creation of Israel in 1948. Narratives of tourism that circulated in Israeli media gave cultural expression to the recent Israeli military victory, and tourism “was a crucial means by which many Jewish Israeli civilians came to know or reacquaint themselves with the newly occupied territories and confront their newfound status as occupiers” (<link linkend="b-9781474207300-ref506" role="bib">Stein 2008</link>: 648) (see <link linkend="b-9781474207300-fig5_2" role="figure">Figure 5.2</link>). Kashmir, a territory between India and Pakistan that remains contested territory, is also involved in a delicate balancing act of military occupation and a thriving tourist industry: while Kashmiris are placed under curfew and made subject to military and police control, tourists from the West and throughout India move freely about the territory to ski, sightsee, and camp. The culture of tourism, popularized through narratives of circulation and consumption, makes military occupation a quotidian <indexterm class="endofrange" startref="b-9781474207300-IDX-928" xml:id="b-9781474207300-IDX-end97"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1030" xml:id="b-9781474207300-IDX-end111"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1466" xml:id="b-9781474207300-IDX-end155"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1473" xml:id="b-9781474207300-IDX-end156"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1831" xml:id="b-9781474207300-IDX-end189"/>issue.</para>
<figure label="5.2" xml:id="b-9781474207300-fig5_2">
<info xml:id="b-9781474207300-717">
<title xml:id="b-9781474207300-718">Western tourists take pictures of destroyed military vehicles in the Golan Heights, 1967. Credit: Morse Collection/Gado/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-719">
<imageobject xml:id="b-9781474207300-720">
<imagedata align="center" fileref="images/fig5_2.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
</section>
<?page value="130"?>
<section xml:id="b-9781474207300-722">
<info xml:id="b-9781474207300-723">
<title xml:id="b-9781474207300-724">Postcolonial Migrations</title>
<itermset xml:id="b-9781474207300-IDX-see15">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-1264">
              <primary>Mexico</primary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-725">The two world wars caused a population shortage in Europe while simultaneously creating new labor needs. The postwar creation of social welfare institutions such as the <indexterm class="singular" xml:id="b-9781474207300-IDX-267">
            <primary>British National Health Service</primary>
          </indexterm>British National Health Service (1948) required an influx of new types of labor. A major change in the postwar migrations from the colonies into Europe was that women were actively recruited from the colonies, especially for jobs in health care and as domestic laborers, and entire families began to migrate instead of only single men (<link linkend="b-9781474207300-ref433" role="bib">Olwig 2015</link>). Though western states, including the <indexterm class="singular" xml:id="b-9781474207300-IDX-1921">
            <primary>United States</primary>
          </indexterm>United States, which carried out mass deportations of Mexican workers in the 1930s (<link linkend="b-9781474207300-ref271" role="bib">Henderson 2011</link>), hoped that once their labor needs had been met, “guest workers” would return to their home countries, it was also the case that for a great majority of these workers, shifting conceptions of national territory and empire made identification with a state complicated.</para>
<para xml:id="b-9781474207300-726">For colonial subjects recruited to England, the “white Dominions” (<indexterm class="singular" xml:id="b-9781474207300-IDX-306">
            <primary>Canada</primary>
          </indexterm>Canada, <indexterm class="singular" xml:id="b-9781474207300-IDX-162">
            <primary>Australia</primary>
          </indexterm>Australia, <indexterm class="singular" xml:id="b-9781474207300-IDX-1379">
            <primary>New Zealand</primary>
          </indexterm>New Zealand), <indexterm class="startofrange" xml:id="b-9781474207300-IDX-623">
            <primary>France</primary>
          </indexterm>France, and the United States, the position of being a subject of empire while simultaneously considered a foreign or guest worker was difficult to navigate. Algeria, for example, was formally a department of France, and while many Algerians faced barriers to French <indexterm class="singular" xml:id="b-9781474207300-IDX-56">
            <primary>Algeria</primary>
            <secondary>citizenship</secondary>
          </indexterm>citizenship during the colonial period, due to their adherence to <indexterm class="singular" xml:id="b-9781474207300-IDX-1027">
            <primary>Islam</primary>
          </indexterm>Islam, they were technically born on French land and were thus “native subjects” (<link linkend="b-9781474207300-ref489" role="bib">Shepard 2006</link>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1657">
            <primary>Shepard, Todd</primary>
          </indexterm>). During the years of the Algerian <indexterm class="singular" xml:id="b-9781474207300-IDX-77">
            <primary>Algeria</primary>
            <secondary>War of Independence</secondary>
          </indexterm>War of Independence, metropolitan France issued curfews that targeted North Africans, allowing police to arrest people based on their physical appearance, even though the Constitution of the Fifth Republic, put into place in 1958, extended French citizenship to all Algerian men and women, whether or not they were Muslim (<link linkend="b-9781474207300-ref489" role="bib">Shepard 2006</link>: 46). Todd Shepard (<link linkend="b-9781474207300-ref489" role="bib">2006</link>) argues that this last-ditch attempt to extend full citizenship rights to Algerians was an attempt to keep Algeria French, a move that was at least in part due to the intense lobbying of the French Algerian settlers, the <emphasis role="italic">
            <indexterm class="startofrange" xml:id="b-9781474207300-IDX-68">
              <primary>Algeria</primary>
              <secondary>
                <emphasis role="italic">pieds-noirs</emphasis>
              </secondary>
            </indexterm>pieds-noirs</emphasis>, whose lives in Algeria were threatened by <indexterm class="singular" xml:id="b-9781474207300-IDX-470">
            <primary>decolonization</primary>
          </indexterm>decolonization.<footnote label="6" role="end-bk-note" xml:id="b-9781474207300-fn5_6">
            <para xml:id="b-9781474207300-727">The <emphasis role="italic">pieds-noirs</emphasis> had origins in various areas of Europe, including France, Spain, Germany, Italy, Malta, and Jewish persons from various regions who had settled in Algeria to take advantage of the 1870 Crémieux Decree that granted Jews in Algeria the rights of French citizenship. Naturalization laws passed in 1889 and 1893 similarly gave French citizenship to all Europeans of Algeria and their descendants.</para>
          </footnote>
        </para>
<para xml:id="b-9781474207300-728">The possibility of having to provide substantial resources for the repatriation of colonial subjects—some of whom were settlers, others mixed race, or simply pro-French, English, Dutch, or Portuguese—is sometimes stated as a reason for the prolongation of empire. Whether this was the case, populations in the metropole regularly reacted negatively to the arrival of colonial populations in the metropole. For example, an estimated 250,000 Dutch and pro-Dutch Indonesians, many who had never been to the Netherlands before, arrived in Dutch cities after 1945 (<link linkend="b-9781474207300-ref540" role="bib">Thomas <emphasis role="italic">et al.</emphasis> 2015</link>: 278). Racism and xenophobia that targeted these groups quickly escalated after their arrival. While the French state knew that the independence of Algeria would mean some amount of repatriation, they were completely unprepared for virtually all <emphasis role="italic">pieds-noirs</emphasis> to enter France at the end of the war in 1962. When the <indexterm class="singular" xml:id="b-9781474207300-IDX-569">
            <primary>Evian Accords</primary>
          </indexterm>Evian Accords were signed on March 18, 1962, Algerians became Algerian citizens, and there was a <?page value="131"?>mass exodus of around one million people, 85 percent of the overall <emphasis role="italic">pieds-noirs</emphasis> population, from Algeria to France. As Claire <indexterm class="singular" xml:id="b-9781474207300-IDX-531">
            <primary>Eldridge, Claire</primary>
          </indexterm>Eldridge (<link linkend="b-9781474207300-ref182" role="bib">2013</link>) has shown, while the <emphasis role="italic">pieds-noirs</emphasis> largely considered themselves French and thus were fully expecting to be welcomed with open arms in metropolitan France, many soon found on arrival that they were viewed as unwanted foreigners, associated with the violence in Algeria and disruptors of French national identity.</para>
<para xml:id="b-9781474207300-729">Migration also occurred as a result of unrest in newly formed postcolonial states, sometimes based on the perceived injustices of colonial rule. In an exceptional case, south Asians who had been settled for generations in the former British colony of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1865">
            <primary>Uganda</primary>
          </indexterm>Uganda were expelled in 1972 by the new Ugandan President Idi <indexterm class="singular" xml:id="b-9781474207300-IDX-94">
            <primary>Amin, Idi</primary>
          </indexterm>Amin, and many were forced to relocate, placed in London in urban refugee camps (see <link linkend="b-9781474207300-fig5_3" role="figure">Figure 5.3</link>). Amin believed that the continued presence of Asians in Uganda was a form of cultural imperialism that needed to be cut off to restore the state to (black) Ugandans. In 1973, Ugandan writer and scholar Mahmood <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1218">
            <primary>Mamdani, Mahmood</primary>
          </indexterm>Mamdani found himself living in a refugee transit camp on Kensington Church Street in London (<link linkend="b-9781474207300-ref385" role="bib">Mamdani [1973] 2011</link>). Over 4,000 Asians had arrived in London from Uganda, most with no money because Amin had forbidden them from taking currency out of the country, and thus relied on family and friends, and to some extent the British state, to help them <indexterm class="endofrange" startref="b-9781474207300-IDX-68" xml:id="b-9781474207300-IDX-end7"/>settle. <?page value="132"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure5_3"/>Those expelled were essentially stateless: writing in 1973, Mamdani noted that “bitter experience has taught us that in both Uganda and <indexterm class="singular" xml:id="b-9781474207300-IDX-781">
            <primary>Great Britain</primary>
          </indexterm>Britain, it has mattered little what passport we held. Our fate was determined by political and not legal factors” ([1973] 2011: 9).</para>
<figure label="5.3" xlink:href="b-9781474207300-figure5_3" xlink:role="objectPointer" xml:id="b-9781474207300-fig5_3">
<info xml:id="b-9781474207300-730">
<title xml:id="b-9781474207300-731">Ugandan Asians arrive at Stansted Airport on a charter flight after being expelled from Uganda, September 18, 1972. Credit: Keystone/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-732">
<imageobject xml:id="b-9781474207300-733">
<imagedata align="center" fileref="images/fig5_3.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-735">The end of formal empire led many to reconsider what “home” meant to them, especially among the resurgence of ethnic, racial, and religious nationalisms. Although south Asian Ugandans were eventually allowed to return to Uganda, they had been rendered foreigners in their absence, Ugandan nationalism taking on a distinct racial character. Mamdani, writing on what it was like to return to Uganda in 1980, following almost a decade of exile in London, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1922">
            <primary>United States</primary>
          </indexterm>United States, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1784">
            <primary>Tanzania</primary>
          </indexterm>Tanzania, remembers that since the expulsions in 1972, no one in Uganda seemed to remember the Ugandan Asians, transforming him <emphasis role="italic">muzungu</emphasis> (a white person) upon his return. In the new 2011 preface to his now classic 1973 book <emphasis role="italic">From Citizen to Refugee</emphasis>, Mamdani writes, “Even though I had come home, in the eyes of those who did not know me, I would be a foreigner. I knew I would never be able to take ‘home’ for granted” ([1973] 2011: 7).</para>
<para xml:id="b-9781474207300-736">By the late 1960s and early 1970s, anti-immigrant sentiments grew in England, France, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1367">
            <primary>Netherlands</primary>
          </indexterm>Netherlands as former colonial subjects became more active in local politics and communities, making space for themselves through political organizing and cultural expression. Stuart <indexterm class="singular" xml:id="b-9781474207300-IDX-847">
            <primary>Hall, Stuart</primary>
          </indexterm>Hall (<link linkend="b-9781474207300-ref258" role="bib">1997</link>), the Jamaican-born intellectual and cultural theorist, has argued that British national identity was built on the existence of its global cultural empire, and the threat the colonized posed to this identity caused a deeper commitment to a culture of whiteness among British nationalists. The backlash against the growing diversity of the metropole in the 1960s to today has been met with a proliferation of xenophobic political ideologies. While these political parties throughout Europe and the United States ebb and flow in popularity, the foundational idea that Europe, including the United Kingdom and by extension the United States, is threatened by immigrants persists. On April 20, 1968, Enoch <indexterm class="singular" xml:id="b-9781474207300-IDX-1531">
            <primary>Powell, Enoch</primary>
          </indexterm>Powell, a Conservative Member of Parliament gave the now infamous “Rivers of Blood” speech in Birmingham, England in which he responded to continued reform of <indexterm class="singular" xml:id="b-9781474207300-IDX-392">
            <primary>Commonwealth of Nations</primary>
          </indexterm>Commonwealth immigration policies and antiracist legislation by invoking the fear that “decent Englishmen” had expressed to him that “in 15 or 20 years’ time the black man will have the whip hand over the white man.” This formulation of the “decent Englishman” is of course of a white, English, Christian man, a worker who was threatened by the deep otherness of “Commonwealth immigrants” who were arriving <emphasis role="italic">en masse</emphasis>, with all their children, to infiltrate proper British society. He called out the <indexterm class="singular" xml:id="b-9781474207300-IDX-1660">
            <primary>Sikhs</primary>
          </indexterm>Sikhs, many of whom had arrived in England following the massive violence of partition in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1546">
            <primary>Punjab</primary>
          </indexterm>Punjab, for practicing religious customs that are “inappropriate” to “native-born” Englishmen. While this type of fear-mongering will not be surprising <indexterm class="endofrange" startref="b-9781474207300-IDX-623" xml:id="b-9781474207300-IDX-end57"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1218" xml:id="b-9781474207300-IDX-end132"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1865" xml:id="b-9781474207300-IDX-end193"/>to <?page value="133"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1177">
            <primary>Livingston, David</primary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1774">
            <primary>Syria</primary>
          </indexterm>anyone in the post–9/11 era, this speech, and other ones like it, mark an important moment when the politics of mobility became explicitly linked to states, race, nationalism, and the “end of <indexterm class="singular" xml:id="b-9781474207300-IDX-649">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-803">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>empire.”</para>
</section>
<section xml:id="b-9781474207300-737">
<info xml:id="b-9781474207300-738">
<title xml:id="b-9781474207300-739">The New Imperial Borders: Tourism and Migration</title>
</info>
<epigraph xml:id="b-9781474207300-740">
<attribution>Mary Louise <indexterm class="singular" xml:id="b-9781474207300-IDX-1534">
              <primary>Pratt, Mary Louise</primary>
            </indexterm>Pratt, <link linkend="b-9781474207300-ref461" role="bib">
              <emphasis role="italic">Imperial Eyes</emphasis>
            </link> (1992: 216)</attribution>
<para xml:id="b-9781474207300-741">In contemporary travel accounts, the monarch-of-all-I-survey scene gets repeated only now from the balconies of hotels in big third-world cities.</para>
</epigraph>
<para role="fullOut" xml:id="b-9781474207300-742">To speak of mobility is also to speak of its impossibility. That some people, typically white Europeans or North Americans, were free to “explore uncharted territory” while brown and black people from non-western areas were seen as threats, especially when mobile, is a colonial construction that remains in circulation today. While adventure narratives that portray white European and North American explorers such as Henry Morton <indexterm class="singular" xml:id="b-9781474207300-IDX-1733">
            <primary>Stanley, Henry Morton</primary>
          </indexterm>Stanley and David Livingstone, T.E. <indexterm class="singular" xml:id="b-9781474207300-IDX-1148">
            <primary>Lawrence, T.E.</primary>
          </indexterm>Lawrence (better known as “Lawrence of Arabia”), Gertrude <indexterm class="singular" xml:id="b-9781474207300-IDX-215">
            <primary>Bell, Gertrude</primary>
          </indexterm>Bell, and the fictional anthropologist Professor Indiana Jones, remain contemporary hallmarks of popular culture, colonized and formerly colonized subjects often struggle to gain access to imperial spaces beyond their “native lands.” As the historian Matthew <indexterm class="singular" xml:id="b-9781474207300-IDX-1732">
            <primary>Stanard, Matthew</primary>
          </indexterm>Stanard (<link linkend="b-9781474207300-ref504" role="bib">2014</link>) has shown, in the case of the <indexterm class="singular" xml:id="b-9781474207300-IDX-204">
            <primary>Belgian Congo</primary>
          </indexterm>Belgian Congo, <indexterm class="singular" xml:id="b-9781474207300-IDX-211">
            <primary>Belgium</primary>
          </indexterm>Belgium was extremely conscious of making sure that colony and metropole were kept divided. Well into the late 1950s, and through decolonization in 1960, Belgium actively denied access to white Belgian spaces to Congolese people, even those brought to the metropole as cultural performers for the benefit of the Belgian public. This is an example of what Stanard calls the “immobility” of the colonized, a theorization that is important in understanding contemporary regimes of border securitization (2014: 89). While Belgium may be a unique case in which mobility was more restricted than in the larger British and French empires, it is also indicative of the spectrum of approaches by which imperial nation-states regulated the flows of colonial subjects.</para>
<para xml:id="b-9781474207300-743">Imperial expansion—from the arrival of western “explorers” and militaries to the movement of colonial settlers and the forced migrations of subjugated peoples from land desired by the West—depended on the relationships and ideas forged in the contact zones to succeed. In contemporary society, we are seeing contact zones emerge as a confluence of tourists and refugees and/or migrants in the same space but often for very different reasons. Take, for example, the situation in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-827">
            <primary>Greece</primary>
          </indexterm>Greece during the summer of 2015. Amidst an economic depression that was reaching its sixth year—a depression that had caused many members of the Greek middle class to lose their jobs, their life savings, their pensions, and their homes—Syrian refugees, fleeing violence at <?page value="134"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-87">
            <primary>Alternative for German, AfD</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-567">
            <primary>European Union, EU</primary>
          </indexterm>home, began arriving in great numbers on Greek shores. Over the summer, major western media publications, including <emphasis role="italic">The Guardian</emphasis>, <emphasis role="italic">New York Times</emphasis>, and <emphasis role="italic">Wall Street Journal</emphasis> ran pictures of mostly white western tourists in Greece watching as brown and black refugees, primarily from Syria but also <indexterm class="singular" xml:id="b-9781474207300-IDX-1017">
            <primary>Iraq</primary>
          </indexterm>Iraq, <indexterm class="singular" xml:id="b-9781474207300-IDX-1173">
            <primary>Libya</primary>
          </indexterm>Libya, <indexterm class="singular" xml:id="b-9781474207300-IDX-541">
            <primary>Eritrea</primary>
          </indexterm>Eritrea, and elsewhere on the African continent, arrived on the shores of their beach holidays. While most Greeks were too economically depressed to vacation, English, French, Dutch, American, and German tourists arrived at this scenic border on the beach. Journalists wrote of tourists unwittingly rescuing migrants lost at sea while out on their own leisure tours, and of tourist establishments that sometimes became temporary “welcome centers” for recent arrivals who needed food, water, and shelter.</para>
<para xml:id="b-9781474207300-744">The combination of the Greek economic crisis, the tourist season, and the dramatic increase of refugees seeking entry to Europe resulted in a contact zone that revealed the ways in which <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1832">
            <primary>tourism</primary>
          </indexterm>tourism and migration are at fundamental odds with each other. That most of the EU countries currently involved in this system of fortification did not have colonial empires shows how pervasive and powerful the culture of maintaining and rebuilding colonial systems and tools of control continue to be. Contemporary debates around mobility are concentrated on the threat that refugees, primarily from <indexterm class="singular" xml:id="b-9781474207300-IDX-13">
            <primary>Afghanistan</primary>
          </indexterm>Afghanistan, Syria, Iraq, and parts of Central and West Africa, pose to “fortress Europe,” the former seats of empire. While far-right nationalist parties that espouse xenophobic platforms that are anti-Muslim and anti-immigrant, such as the <indexterm class="singular" xml:id="b-9781474207300-IDX-1333">
            <primary>National Front, FN</primary>
          </indexterm>National Front (FN) in <indexterm class="singular" xml:id="b-9781474207300-IDX-624">
            <primary>France</primary>
          </indexterm>France, <indexterm class="singular" xml:id="b-9781474207300-IDX-757">
            <primary>Golden Dawn</primary>
          </indexterm>Golden Dawn in Greece, and the Alternative for Germany (AfD), continue to gain popularity, the numbers of migrants risking their lives to cross the Mediterranean and reach Europe has also increased, exceeding 300,000 people in 2015 (<link linkend="b-9781474207300-ref205" role="bib">Fleming 2015</link>).</para>
<para xml:id="b-9781474207300-745">Many of the security regimes in place today began as tools of colonial governance. As Ann Laura <indexterm class="singular" xml:id="b-9781474207300-IDX-1735">
            <primary>Stoler, Ann Laura</primary>
          </indexterm>Stoler (<link linkend="b-9781474207300-ref512" role="bib">2016</link>: 4) writes, “colonial counterinsurgency policies rest undiluted in current security measures.” For example, the counterinsurgency tactics the French <indexterm class="singular" xml:id="b-9781474207300-IDX-660">
            <primary>France</primary>
            <secondary>military</secondary>
          </indexterm>military developed during the Algerian <indexterm class="singular" xml:id="b-9781474207300-IDX-78">
            <primary>Algeria</primary>
            <secondary>War of Independence</secondary>
          </indexterm>War of Independence were exported to the <indexterm class="singular" xml:id="b-9781474207300-IDX-1923">
            <primary>United States</primary>
          </indexterm>United States (<link linkend="b-9781474207300-ref379" role="bib">Macmaster 2004</link>) and have been used in US military campaigns abroad and domestically, including, recently, the #NODAPL (No Dakota Access Pipeline) protests, a movement led by Indigenous peoples against the building of the <indexterm class="singular" xml:id="b-9781474207300-IDX-447">
            <primary>Dakota Pipeline</primary>
          </indexterm>Dakota Pipeline. The military tactics employed by federal and local police agencies at Standing Rock in North Dakota, including police and military agents clearing camps that protestors built to prevent the physical construction of the pipeline, made it clear that the United States continues to view Indigenous peoples as threats to the US rather than as legitimate citizens, a clear sign of continued settler colonialism. While pipeline workers, contractors, and police and military are free to move throughout the United States, #NODAPL protestors, allies, and even journalists covering the conflict, including <emphasis role="italic">Democracy Now!</emphasis>’s Amy <indexterm class="singular" xml:id="b-9781474207300-IDX-759">
            <primary>Goodman, Amy</primary>
          </indexterm>Goodman, have been subject <indexterm class="endofrange" startref="b-9781474207300-IDX-827" xml:id="b-9781474207300-IDX-end88"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1774" xml:id="b-9781474207300-IDX-end186"/>to <?page value="135"?>surveillance, arrest, prosecution, and incarceration, all counterinsurgency tactics that limit movement.<footnote label="7" role="end-bk-note" xml:id="b-9781474207300-fn5_7">
            <para xml:id="b-9781474207300-746">For more on #NODAPL and the situation at Standing Rock, see <link linkend="b-9781474207300-ref122" role="bib">Chrisler <emphasis role="italic">et al.</emphasis> (2016)</link>.</para>
          </footnote>
        </para>
<para xml:id="b-9781474207300-747">Though empire officially “ended” with the liberation of the former colonies, mobility continues to be regulated by hierarchical institutions of race and nation rooted in colonial systems of control, which comes as no surprise to the currently and formerly colonized. Despite the hopes that increased access to transportation technology, a global regime of <indexterm class="singular" xml:id="b-9781474207300-IDX-671">
            <primary>Free Trade</primary>
          </indexterm>free trade, and network connectivity would, as neoliberal pundit and <emphasis role="italic">New York Times</emphasis> columnist Thomas <indexterm class="singular" xml:id="b-9781474207300-IDX-690">
            <primary>Friedman, Thomas</primary>
          </indexterm>Friedman (<link linkend="b-9781474207300-ref218" role="bib">2005</link>) has suggested, make the “world flat,” it has become obvious that globalization has not meant detachment from nationalism or the weakening of borders. The borders are only getting stronger, yet narratives and practices of tourism and consumption continue unabated, signaling to the wealthy that if you have enough capital, you can simultaneously travel abroad and build up your borders at home to keep those without wealth out (<link linkend="b-9781474207300-ref318" role="bib">Jones 2016</link>).</para>
<para xml:id="b-9781474207300-748">Despite the cultural and political resurgence of xenophobia in western countries, there has also been the proliferation of social movements, including No Borders and No One is Illegal, that bring together activists, migrants, and refugees to protect anyone seeking shelter and safety. Independent of state institutions, NGOs, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1883">
            <primary>United Nations</primary>
          </indexterm>United Nations, these movements operate at the local level without central leadership, and undertake autonomous actions such as squatting in an Airbnb in Berlin and claiming it for refugees, working to <indexterm class="endofrange" startref="b-9781474207300-IDX-1832" xml:id="b-9781474207300-IDX-end190"/>stop <anchor role="objectPointer" xml:id="b-9781474207300-figure5_4"/>
          <?page value="136"?>individual deportations by mobilizing call-ins and protests, and the mass mobilization of protestors and lawyers who worked to halt President Donald J. <indexterm class="singular" xml:id="b-9781474207300-IDX-1855">
            <primary>Trump, Donald</primary>
          </indexterm>Trump’s Executive Order 13769 (issued January 27, 2017) that suspended the US <indexterm class="singular" xml:id="b-9781474207300-IDX-1954">
            <primary>United States</primary>
            <secondary>Refugee Admissions Program</secondary>
          </indexterm>Refugee Admissions Program and banned entry of persons from <indexterm class="singular" xml:id="b-9781474207300-IDX-1009">
            <primary>Iran</primary>
          </indexterm>Iran, <indexterm class="singular" xml:id="b-9781474207300-IDX-1018">
            <primary>Iraq</primary>
          </indexterm>Iraq, <indexterm class="singular" xml:id="b-9781474207300-IDX-1174">
            <primary>Libya</primary>
          </indexterm>Libya, <indexterm class="singular" xml:id="b-9781474207300-IDX-1679">
            <primary>Somalia</primary>
          </indexterm>Somalia, <indexterm class="singular" xml:id="b-9781474207300-IDX-1748">
            <primary>Sudan</primary>
          </indexterm>Sudan, <indexterm class="singular" xml:id="b-9781474207300-IDX-1775">
            <primary>Syria</primary>
          </indexterm>Syria, and <indexterm class="singular" xml:id="b-9781474207300-IDX-2081">
            <primary>Yemen</primary>
          </indexterm>Yemen (see <link linkend="b-9781474207300-fig5_4" role="figure">Figure 5.4</link>). As the activist-scholar Harsha <indexterm class="singular" xml:id="b-9781474207300-IDX-2001">
            <primary>Walia, Harsha</primary>
          </indexterm>Walia (<link linkend="b-9781474207300-ref570" role="bib">2013</link>) argued, it is the mission of these solidarity and mutual-aid networks to name and “undo” the borders created by empire and to establish a world in which no person is illegal. Security regimes are becoming more sophisticated, but they have not prevented the movement of people who continue to find ways to work together to resist the continuation of systems of empire that persist through the protection of national borders.</para>
<figure label="5.4" xlink:href="b-9781474207300-figure5_4" xlink:role="objectPointer" xml:id="b-9781474207300-fig5_4">
<info xml:id="b-9781474207300-749">
<title xml:id="b-9781474207300-750">Protestors at Raleigh-Durham International Airport protesting the Muslim travel ban, January 29, 2017. Credit: Leo Ching.</title>
</info>
<mediaobject xml:id="b-9781474207300-751">
<imageobject xml:id="b-9781474207300-752">
<imagedata align="center" fileref="images/fig5_4.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
</section>
</chapter>
<chapter label="6" xml:id="b-9781474207300-chapter6">
<info xml:id="b-9781474207300-754">
<title xml:id="b-9781474207300-755">
          <?page value="137"?>Sexuality</title>
<authorgroup>
<author xlink:href="C0003" xlink:role="biblioAuID">
<personname role="first-last">
<firstname>Anna</firstname> <surname>Clark</surname>
            </personname>
          </author>
<author xlink:href="C0010" xlink:role="biblioAuID">
<personname role="first-last">
<firstname>Elizabeth</firstname> <surname>Williams</surname>
            </personname>
          </author>
</authorgroup>
<pagenums>137–154</pagenums>
<biblioid class="doi">10.5040/9781474207300.ch-006</biblioid>
<mediaobject xml:id="b-9781474207300-756">
<imageobject xml:id="b-9781474207300-757">
<imagedata fileref="pdfs/9781474207300.ch-006.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
<copyright>
          <year>2019</year>
          <holder>Bloomsbury Publishing</holder>
        </copyright>
      </info>
<para role="fullOut" xml:id="b-9781474207300-758">Sexuality is always an issue in imperialism because it is the most intimate site for the clash of cultures and power relations. The term “sexuality” encompasses a broad range of practices, identities, and relationships. Often, it refers to physical acts that challenge the boundaries between bodies. For instance, interracial sex and reproduction created offspring and relationships that undermined racial boundaries. Sexual practices that were deemed “repugnant” to <indexterm class="singular" xml:id="b-9781474207300-IDX-2030">
          <primary>women</primary>
          <secondary>colonial settlers</secondary>
        </indexterm>colonial norms, or (perhaps more to the point) a threat to colonial rule, could become targets of <indexterm class="singular" xml:id="b-9781474207300-IDX-1650">
          <primary>sex</primary>
          <secondary>regulation</secondary>
        </indexterm>regulation.</para>
<para xml:id="b-9781474207300-759">Sexuality can also refer to the discourses which use sex (real or imagined) as a framework to discuss larger anxieties about power and control. For instance, as more white women settled in the colonies, a discourse which highlighted the threat of “black peril,” the supposed rape of white women by black men, symbolized the perceived threat to white male power. Furthermore, by the 1920s, sexuality had been created as an object of study not only in the discipline of sexology, but in medicine, psychology, anthropology, and sociology as well, all disciplines important in the project of colonial management of populations. Imperialism had always been key to these studies, since differences in sexual cultures were used in racist thinking. In a language of evolutionary hierarchy, parallels were made between colonized peoples, the European working class, and children: all supposedly characterized by a primitive sexuality that was excessive and unrestrained. Yet as twentieth-century sexologists strove to define and even invent what was “natural” in terms of sex and to create sexuality as identity, some sexologists also claimed that so-called primitive people had a purer and more natural sexuality, unencumbered by civilization.</para>
<para xml:id="b-9781474207300-760">Finally, sexuality served as a potent tool for the management of colonized populations. Imperialists sought to regulate sexuality not only by disciplining <?page value="138"?>
        <indexterm class="singular" xml:id="b-9781474207300-IDX-223">
          <primary>biopolitics</primary>
        </indexterm>
        <indexterm class="singular" xml:id="b-9781474207300-IDX-650">
          <primary>France</primary>
          <secondary>empire</secondary>
        </indexterm>
        <indexterm class="singular" xml:id="b-9781474207300-IDX-804">
          <primary>Great Britain</primary>
          <secondary>empire</secondary>
        </indexterm>individuals, but also at a biopolitical level: the imperative to measure and manage populations, especially through <indexterm class="singular" xml:id="b-9781474207300-IDX-1572">
          <primary>reproduction</primary>
        </indexterm>reproduction. In the twentieth century, modernity brought new elements to these clashes with a greater focus on development and bureaucratic management (<link linkend="b-9781474207300-ref509" role="bib">Stoler 1995</link>: 4; <link linkend="b-9781474207300-ref93" role="bib">Burton 1999</link>: 1). In the <indexterm class="singular" xml:id="b-9781474207300-IDX-1005">
          <primary>interwar period</primary>
        </indexterm>interwar period, imperial powers increasingly justified their actions as “trusteeship” to manage populations for greater health and efficiency. European imperialists sought to develop their colonies for greater economic success, and even claimed to prepare colonized people for self-rule in the distant future. This management was especially important in efforts to maintain reproduction and health, key for the maintenance of a labor force.</para>
<para xml:id="b-9781474207300-761">No single approach to the production, management, and disciplining of sexuality held true at all times and places; rather, great variation existed among the various European empires. Even within a single colony, opinions about sexuality varied greatly among different colonial actors. For instance, while missionaries often sought to “reform” indigenous sexual practices, efforts to modernize and assimilate could clash with philosophies of British indirect rule and French accommodation, the notion that it was easier to rule through local authorities who would respect indigenous customs (<link linkend="b-9781474207300-ref275" role="bib">Hobsbawm and Ranger 1992</link>; <link linkend="b-9781474207300-ref384" role="bib">Mamdani 1996</link>; <link linkend="b-9781474207300-ref140" role="bib">Conklin 1997</link>: 165). Colonial planters cared most about maintaining control over land and labor—they therefore tended to be most interested in biopolitical agendas. Attempts to “reform” sexual practices could also become rallying points for cultural nationalists, who argued that such “reforms” represented an assault on the values and identity of indigenous groups. Such contested approaches to the management of sexuality are by no means incidental. Rather, sexuality proved a potent imperial discourse precisely because it was malleable enough to serve multiple agendas. Whether colonized people were seen as primitive and barbaric or pure and natural, sexuality was an excuse to control their lives.</para>
<section xml:id="b-9781474207300-762">
<info xml:id="b-9781474207300-763">
<title xml:id="b-9781474207300-764">Eugenics 1918–39</title>
<itermset xml:id="b-9781474207300-IDX-see16">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-549">
              <primary>eugenics</primary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-765">Eugenics became an important aspect of modernist racial thinking on both the left and right. Eugenics can be defined as the pseudo-scientific management of human breeding, and it was particularly concerned with race and class in the effort to define the “abnormal” and “unfit.” Eugenics sought to discourage the reproduction of the “unfit,” and conversely to encourage the reproduction of those in valued categories. Eugenics, of course, reached its murderous apogee in the <indexterm class="singular" xml:id="b-9781474207300-IDX-878">
            <primary>holocaust</primary>
          </indexterm>Holocaust, but it also played a key role in imperialist endeavors. The genocide of the <indexterm class="singular" xml:id="b-9781474207300-IDX-861">
            <primary>Herero</primary>
          </indexterm>Herero people in <indexterm class="singular" xml:id="b-9781474207300-IDX-715">
            <primary>German Southwest Africa</primary>
          </indexterm>German South-West Africa between 1904 and 1907 is a particularly salient example; in fact, several scholars have argued that the genocidal techniques of <indexterm class="singular" xml:id="b-9781474207300-IDX-1343">
            <primary>Nazis</primary>
          </indexterm>Nazi Germany had been developed in this colonial genocide (<link linkend="b-9781474207300-ref285" role="bib">Hull 2005</link>; <link linkend="b-9781474207300-ref382" role="bib">Madley 2005</link>; <link linkend="b-9781474207300-ref601" role="bib">Zimmerer and Zeller 2008</link>).</para>
<?page value="139"?>
<para xml:id="b-9781474207300-766">Imperialist <indexterm class="singular" xml:id="b-9781474207300-IDX-1089">
            <primary>Kenya</primary>
            <secondary>eugenics</secondary>
          </indexterm>eugenics was also about managing populations to preserve racial boundaries in more subtle—and more insidious—ways. For instance, Chloe <indexterm class="singular" xml:id="b-9781474207300-IDX-296">
            <primary>Campbell, Chloe</primary>
          </indexterm>Campbell has shown that eugenicists in colonial Kenya used arguments of “the inherent biological limitations of the native population” to suggest “the futility of native development” (<link linkend="b-9781474207300-ref104" role="bib">Campbell 2007</link>: 32). Settlers thus ensured a population of laborers on their farms by suggesting that Africans were genetically unfit for any other work.</para>
<para xml:id="b-9781474207300-767">As the earlier example indicates, in colonies where settlers relied on indigenous labor, management of marriage and childbirth became important issues. During the interwar period, several African colonies saw declines in population as a result of famine, disease, and war, endangering efforts to develop colonial economies. Colonial regimes thus attempted to “reform” indigenous practices surrounding reproduction in order to ensure a healthy labor supply. In the <indexterm class="singular" xml:id="b-9781474207300-IDX-205">
            <primary>Belgian Congo</primary>
          </indexterm>Belgian Congo, for instance, settler women attempted to increase birth rates and reduce infant mortality by “educating” African women in hygiene and “mothercraft” (<link linkend="b-9781474207300-ref288" role="bib">Hunt 1988</link>).</para>
<para xml:id="b-9781474207300-768">Colonial officials sometimes claimed to be protecting women from practices such as child marriage, but as Martin <indexterm class="singular" xml:id="b-9781474207300-IDX-1822">
            <primary>Thomas, Martin</primary>
          </indexterm>Thomas writes of French territories in Muslim <indexterm class="singular" xml:id="b-9781474207300-IDX-1409">
            <primary>North Africa</primary>
          </indexterm>North Africa, “legal regulation enforced French control over the Muslim population rather than affording women greater freedom” (<link linkend="b-9781474207300-ref537" role="bib">Thomas 2005</link>: 160). Conversely, African elites were sometimes able to exploit these biopolitical anxieties to their own advantage. In interwar colonial Asante, chiefs mandated the “capture” of unmarried women. The colonial government supported these detentions, believing that they were necessary to reduce <indexterm class="singular" xml:id="b-9781474207300-IDX-1967">
            <primary>venereal disease</primary>
          </indexterm>venereal disease in young women. In reality, chiefs were actually disturbed by the new financial independence of Asante women who farmed cocoa. The prevention of venereal disease thus served as a cover for the reassertion of elite male authority “over women’s productive and reproductive power” (<link linkend="b-9781474207300-ref18" role="bib">Allman 1996</link>: 212).</para>
<para xml:id="b-9781474207300-769">Colonial authorities often blamed indigenous peoples for the prevalence of venereal disease. Although medical authorities in <indexterm class="singular" xml:id="b-9781474207300-IDX-714">
            <primary>German East Africa</primary>
          </indexterm>German East Africa believed that venereal disease had been introduced into the colony by Europeans, they nevertheless asserted that the “loose morals” of indigenous women were responsible for spreading venereal disease. As one doctor stated, “civilisation is indeed responsible for bringing [diseases in], but not for their general dissemination. This requires a suitable soil, that is, ‘loose morals’ … that do not allow for immunity” (quoted in <link linkend="b-9781474207300-ref574" role="bib">Walther 2013</link>: 182). Likewise, some French doctors attributed many birth defects and skin problems to hereditary syphilis that they claimed was endemic in <indexterm class="singular" xml:id="b-9781474207300-IDX-1309">
            <primary>Morocco</primary>
          </indexterm>Morocco; blaming it on Arab customs, they wanted to inject pregnant women with the arsenic used to treat venereal disease. Fortunately, as Ellen <indexterm class="singular" xml:id="b-9781474207300-IDX-96">
            <primary>Amster, Ellen</primary>
          </indexterm>Amster points out, the French government did not provide funding for these efforts (<link linkend="b-9781474207300-ref21" role="bib">Amster 2016</link>: 331; see also <link linkend="b-9781474207300-ref126" role="bib">Clark 2013</link>: 86–114).</para>
<?page value="140"?>
<para xml:id="b-9781474207300-770">Imperial governments were also concerned with regulating <indexterm class="singular" xml:id="b-9781474207300-IDX-1649">
            <primary>sex</primary>
            <secondary>interracial</secondary>
          </indexterm>interracial sex: they feared that relationships between white men and colonized women would threaten racial <indexterm class="singular" xml:id="b-9781474207300-IDX-1554">
            <primary>race</primary>
            <secondary>purity</secondary>
          </indexterm>purity, and reduce white “prestige” in the colonies. In 1905, for instance, legislation passed in colonial <indexterm class="singular" xml:id="b-9781474207300-IDX-542">
            <primary>Eritrea</primary>
          </indexterm>Eritrea banned marriages between Italian women and native men, and established that indigenous women who married Italian men would not be granted citizenship (<link linkend="b-9781474207300-ref48" role="bib">Baratieri 2014</link>: 366). Some governments instructed their officials to renounce their native concubines and marry white women instead (<link linkend="b-9781474207300-ref140" role="bib">Conklin 1997</link>: 169). In the East Indies, <indexterm class="singular" xml:id="b-9781474207300-IDX-502">
            <primary>Dutch East Indies</primary>
          </indexterm>Dutch imperialists began to fear the consequences of <indexterm class="singular" xml:id="b-9781474207300-IDX-412">
            <primary>concubinage</primary>
          </indexterm>concubinage: the increasing number of pauperized and discontented Eurasians. The Dutch increasingly resorted to a language of racial purity in the 1920s. As the nationalist challenge mounted, officials began to crack down on sex between Europeans and indigenous peoples. White women were given the responsibility to control the sexual drives of white men and to preserve the “race” in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-980">
            <primary>Indonesia</primary>
          </indexterm>Indonesia and marry white men. But as officials discouraged concubinage, more Dutch men actually married native women, often their housekeepers (<link linkend="b-9781474207300-ref508" role="bib">Stoler 1992</link>: 530) (<link linkend="b-9781474207300-fig6_1" role="figure">Figure 6.1</link>).</para>
<para xml:id="b-9781474207300-771">Similarly, in <indexterm class="singular" xml:id="b-9781474207300-IDX-969">
            <primary>Indochina</primary>
          </indexterm>Indochina French officials admonished European men to uphold their values of reason and self-restraint against what they regarded as the dissolute desires of the native population; they needed to preserve racial purity to preserve their imperial domination, which was becoming increasingly fragile. French authorities worried that in Indochina a European man might lose his inhibitions in the “heavy and odorous atmosphere of the opium den,” becoming “incapable <anchor role="objectPointer" xml:id="b-9781474207300-figure6_1"/>
          <?page value="141"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-740">
            <primary>Ghana</primary>
          </indexterm>of true desire,” and masturbating himself, or even worse, being seduced by the boy preparing the pipes, who was much more “appetizing” than the native prostitute (<link linkend="b-9781474207300-ref463" role="bib">Proschan 2002</link>: 625). The French had long encouraged concubinage with Indochinese women, and even granted citizenship to their offspring if they could be seen to have assimilated into French culture, but in the interwar period they also became anxious that native women would accuse French men of fathering their children and disturb the racial order (<link linkend="b-9781474207300-ref479" role="bib">Saada 2012</link>: 121–47).</para>
<figure label="6.1" xlink:href="b-9781474207300-figure6_1" xlink:role="objectPointer" xml:id="b-9781474207300-fig6_1">
<info xml:id="b-9781474207300-772">
<title xml:id="b-9781474207300-773">Postcard of the colonies of the Netherlands, <emphasis role="italic">c.</emphasis> 1900. Credit: Culture Club/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-774">
<imageobject xml:id="b-9781474207300-775">
<imagedata align="center" fileref="images/fig6_1.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-777">European authorities also tried to control poor whites, especially women, who defied convention and mingled with colonized peoples, thus endangering racial distinctions. During the 1938 election in <indexterm class="singular" xml:id="b-9781474207300-IDX-1688">
            <primary>South Africa</primary>
          </indexterm>South Africa, interracial marriage became a central issue; when the <indexterm class="singular" xml:id="b-9781474207300-IDX-1893">
            <primary>United Party (South Africa)</primary>
          </indexterm>United Party refused to ban it, the “Purified” <indexterm class="singular" xml:id="b-9781474207300-IDX-1334">
            <primary>National Party, GNP</primary>
          </indexterm>National Party (GNP) produced a poster depicting a white woman living in squalor with her African husband. Not only did they fear racial mixing, they also wanted to reestablish the gender hierarchy endangered by the increased independence gained by Afrikaner women during the 1920s and 1930s. As Jonathan <indexterm class="singular" xml:id="b-9781474207300-IDX-907">
            <primary>Hyslop, Jonathan</primary>
          </indexterm>Hyslop writes, by “portraying white women as sexually threatened by black men, Afrikaner males claimed the role of protectors of women, thereby reasserting their patriarchal control” (1995: 57–81).</para>
<para xml:id="b-9781474207300-778">Colonized peoples also sometimes opposed interracial relationships. In the Gold Coast in the 1920s, African nationalists deployed the specter of interracial sex both to assert patriarchal authority over African women, and to argue against colonial authority. “By casting European men as sexually promiscuous interlopers,” Carina <indexterm class="singular" xml:id="b-9781474207300-IDX-1566">
            <primary>Ray, Carina</primary>
          </indexterm>Ray notes, African nationalists “challenged the very idea that Europeans were morally suited to rule the colonial world” (2014: 82). Yet sometimes indigenous women may have been able to exploit interracial relationships to their own advantage. For instance, women in rural southern <indexterm class="singular" xml:id="b-9781474207300-IDX-1315">
            <primary>Mozambique</primary>
          </indexterm>Mozambique pursued “strategic engagements” with Portuguese men to access economic opportunities, gain farming land, or learn a trade (<link linkend="b-9781474207300-ref226" role="bib">Gengenbach 2010</link>: 20). Robert <indexterm class="singular" xml:id="b-9781474207300-IDX-51">
            <primary>Aldrich, Robert</primary>
          </indexterm>Aldrich has made a similar point about relationships between European and indigenous men in French colonies: while “some relationships differed little from <indexterm class="singular" xml:id="b-9781474207300-IDX-1538">
            <primary>prostitution</primary>
          </indexterm>prostitution or included coercion and violence, yet many indigenous men could derive material and emotional advantages in the form of income, social promotion, or closer association with the colonial ruling order from partnerships with Europeans” (<link linkend="b-9781474207300-ref15" role="bib">Aldrich 2002</link>: 202).</para>
<para xml:id="b-9781474207300-779">In addition to trying to regulate interracial marriages, during the interwar period western governments and local reformers sometimes tried to change indigenous <indexterm class="singular" xml:id="b-9781474207300-IDX-1228">
            <primary>marriage customs</primary>
          </indexterm>marriage customs as part of an effort to modernize these societies. They did not always agree on strategies, and their efforts often sparked nationalist objections. In Indonesia, the Dutch government tried to mandate monogamous marriages for non-<indexterm class="singular" xml:id="b-9781474207300-IDX-1323">
            <primary>Muslims</primary>
          </indexterm>Muslims married to Muslims, ostensibly to protect them. Some nationalists had demanded this change as part of their vision of a new, modern society. But Indonesian Muslims were affronted at <indexterm class="endofrange" startref="b-9781474207300-IDX-980" xml:id="b-9781474207300-IDX-end104"/>this <?page value="142"?>interference in their religious customs. They pointed out that <indexterm class="singular" xml:id="b-9781474207300-IDX-1513">
            <primary>polygamy</primary>
          </indexterm>polygamy prevented prostitution and adultery, and highlighted the hypocrisy of Europeans who failed to interfere in the practice of European men taking native concubines (<link linkend="b-9781474207300-ref362" role="bib">Locher-Scholten 2000</link>: 193–206).</para>
<para xml:id="b-9781474207300-780">Campaigns against child marriage, which had been prominent in the 1890s, were also revived in the twentieth century. This time, however, it was not just a matter of western governments imposing alien cultures; in many cases local reformers now advocated laws against child marriage.<footnote label="1" role="end-bk-note" xml:id="b-9781474207300-fn6_1">
            <para xml:id="b-9781474207300-781">The Dutch in Indonesia also tried to repress child marriage (<link linkend="b-9781474207300-ref362" role="bib">Locher-Scholten 2000</link>).</para>
          </footnote> In <indexterm class="singular" xml:id="b-9781474207300-IDX-929">
            <primary>India</primary>
          </indexterm>India, the American journalist Katherine <indexterm class="singular" xml:id="b-9781474207300-IDX-1251">
            <primary>Mayo, Katherine</primary>
          </indexterm>Mayo (1867–1940) depicted child marriage as the epitome of “barbaric” Hindu customs that made Indians incapable of self-rule. Many female Indian nationalists rejected her negative attitude toward their culture but wanted to press for reforms themselves; they demanded that the nationalist movement take on women’s causes. Despite resistance from the British government, who were interested in appeasing Orthodox <indexterm class="singular" xml:id="b-9781474207300-IDX-866">
            <primary>Hindus</primary>
          </indexterm>Hindus as a way of dividing Indians to hinder the nationalist cause, child marriage became a major nationalist focus. Eventually, the British conceded and allowed passage of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1620">
            <primary>Sarda Act (1929)</primary>
          </indexterm>Sarda Act of 1929, which set the age of consent within marriage 13, and consent to sex outside of it 14 (<link linkend="b-9781474207300-ref419" role="bib">Mukherjee 2006</link>: 233; <link linkend="b-9781474207300-ref441" role="bib">Pande 2012</link>: 206). This act applied not only to Hindus but to all marriages, and allowed for a notion of universal human rights for women who breached the assumption that religious communities should have a monopoly on control of personal lives. However, the act also sparked tensions with Muslim communities (<link linkend="b-9781474207300-ref498" role="bib">Sinha 2006</link>: 155–61).</para>
<para xml:id="b-9781474207300-782">In the nineteenth century, social purity campaigns used a rhetoric of “white slavery,” but now, campaigns against sex trafficking had to fit with the notion of trusteeship. For European women activists, this fit well with the “maternalist” tradition of taking care of others, often in a condescending manner (<link linkend="b-9781474207300-ref528" role="bib">Tambe 2009</link>: 404–10). However, European governments sometimes objected to efforts to suppress trafficking. In the <indexterm class="singular" xml:id="b-9781474207300-IDX-1740">
            <primary>Straits Settlements</primary>
          </indexterm>Straits Settlements, for instance, concern with venereal disease led some officials to propose the reintroduction of regulations that resembled the <indexterm class="singular" xml:id="b-9781474207300-IDX-421">
            <primary>Contagious Diseases Acts</primary>
          </indexterm>Contagious Diseases Acts in compulsory treatment. In <indexterm class="singular" xml:id="b-9781474207300-IDX-884">
            <primary>Hong Kong</primary>
          </indexterm>Hong Kong, British officials at first resisted efforts to reform the <emphasis role="italic">mui tsai</emphasis> system in which young girls were contracted into domestic service and sometimes sex work (<link linkend="b-9781474207300-ref239" role="bib">Gorman 2008</link>: 186–209) (<link linkend="b-9781474207300-fig6_2" role="figure">Figure 6.2</link>). Furthermore, humanitarian activists and League officials did not always recognize that many female migrants were voluntarily seeking better opportunities in a new global labor market (<link linkend="b-9781474207300-ref472" role="bib">Rodríguez García 2012</link>). In <indexterm class="singular" xml:id="b-9781474207300-IDX-686">
            <primary>French West Africa</primary>
          </indexterm>West Africa, colonial officials failed to report the sexual trafficking of very young girls to the <indexterm class="singular" xml:id="b-9781474207300-IDX-1155">
            <primary>League of Nations</primary>
          </indexterm>League of Nations, leading to a public outcry and new legislation. However, this legislation also cracked down on sex work by adult Nigerian women and stigmatized the broader patterns of women’s labor migration that were impelled by the very developments of the modern economy that colonial officials were trying to encourage, as Saheed <indexterm class="singular" xml:id="b-9781474207300-IDX-6">
            <primary>Aderinto, Saheed</primary>
          </indexterm>Aderinto notes (<link linkend="b-9781474207300-ref8" role="bib">2015</link>: 120). In <indexterm class="singular" xml:id="b-9781474207300-IDX-625">
            <primary>France</primary>
          </indexterm>France, colonial officials <?page value="143"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure6_2"/>pushed back against the League’s efforts to suppress trafficking on the grounds that it would interfere with regulated brothels, which they insisted were essential to fight venereal disease.</para>
<figure label="6.2" xlink:href="b-9781474207300-figure6_2" xlink:role="objectPointer" xml:id="b-9781474207300-fig6_2">
<info xml:id="b-9781474207300-783">
<title xml:id="b-9781474207300-784">
              <emphasis role="italic">Mui tsai</emphasis>, child slave. Credit: Anti-Slavery International.</title>
</info>
<mediaobject xml:id="b-9781474207300-785">
<imageobject xml:id="b-9781474207300-786">
<imagedata align="center" fileref="images/fig6_2.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-788">For the French, regulated brothels were also important as a way of segregating sexual commerce in colonial <indexterm class="singular" xml:id="b-9781474207300-IDX-1410">
            <primary>North Africa</primary>
          </indexterm>North Africa, and in some ways the system intensified between the wars to provide sexual services to soldiers (<link linkend="b-9781474207300-ref358" role="bib">Limoncelli 2010</link>: 120–7; <link linkend="b-9781474207300-ref21" role="bib">Amster 2016</link>: 335). They even introduced regulated brothels to <indexterm class="singular" xml:id="b-9781474207300-IDX-1776">
            <primary>Syria</primary>
          </indexterm>Syria and <indexterm class="singular" xml:id="b-9781474207300-IDX-295">
            <primary>Cameroon</primary>
          </indexterm>Cameroon (<link linkend="b-9781474207300-ref103" role="bib">Camiscioli 2009</link>: 104). Despite these efforts, the old system of the <emphasis role="italic">maison tolerée</emphasis> seemed increasingly outdated in the new more sexualized popular culture of urban <indexterm class="singular" xml:id="b-9781474207300-IDX-1310">
            <primary>Morocco</primary>
          </indexterm>Morocco, where clandestine <indexterm class="singular" xml:id="b-9781474207300-IDX-1539">
            <primary>prostitution</primary>
          </indexterm>prostitution flourished out of authorities’ control (<link linkend="b-9781474207300-ref531" role="bib">Taraud 2003</link>: 143). The French colonial officials’ insistence on the regulatory system undermined the moral authority of the French <indexterm class="singular" xml:id="b-9781474207300-IDX-651">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1455">
            <primary>Ottoman Empire</primary>
          </indexterm>empire and further inflamed nationalist resistance.</para>
<para xml:id="b-9781474207300-789">In <indexterm class="startofrange" xml:id="b-9781474207300-IDX-523">
            <primary>Egypt</primary>
          </indexterm>Egypt, Islamic nationalists and Egyptian feminists had long campaigned against the state regulation of prostitution, which had been imposed by the British in 1882. While the Ottomans had closely regulated the sexual behavior of their subjects, especially soldiers, the British were mainly concerned with the health of white soldiers, for women who sold sex to indigenous Egyptians only were not inspected. The Egyptian government, as part of its effort to display national independence, finally banned prostitution in 1951. The Egyptian <?page value="144"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-693">
            <primary>
              <emphasis role="italic">Front National de Libération</emphasis>, FLN</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1010">
            <primary>Iran</primary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1441">
            <primary>orientalism</primary>
          </indexterm>opposition to prostitution was not, however, solely the product of western discourses; rather, Egyptian <indexterm class="singular" xml:id="b-9781474207300-IDX-66">
            <primary>Algeria</primary>
            <secondary>nationalists</secondary>
          </indexterm>nationalists also drew on medieval Islamic texts to argue for the abolition of prostitution. In fact, nationalists viewed marriage as an important institution that would protect the sexual, moral, and mental health of Egyptian men, thus ensuring the success of the Egyptian nation (<link linkend="b-9781474207300-ref334" role="bib">Kholoussy 2010</link>: 677–91). Similarly, in the 1950s the members of the anticolonial FLN (Front National de Liberation) in Algeria viewed prostitutes as traitors to their cause, although some prostitutes actually aided the nationalists’ movement by passing on information inadvertently given by their customers (<link linkend="b-9781474207300-ref531" role="bib">Taraud 2003</link>: 361).</para>
<para xml:id="b-9781474207300-790">For nationalists in the Islamic <indexterm class="singular" xml:id="b-9781474207300-IDX-2063">
            <primary>World War I</primary>
          </indexterm>world, reforming sexual behavior was an important part of their cultural process. In the late nineteenth and early twentieth centuries, Egyptian and Iranian nationalists who visited Europe were shocked by what they saw as sexual immorality and the looseness of white women; they defined <indexterm class="singular" xml:id="b-9781474207300-IDX-1028">
            <primary>Islam</primary>
          </indexterm>Islam as purer in contrast. In turn, these nationalists repudiated the long tradition of men keeping boy lovers and celebrating the beauty of male youths in poetry, declaring that these practices corrupted Islamic purity. Instead, they wanted to modernize relationships between men and women into a new form of heterosexuality suitable for modern nations (<link linkend="b-9781474207300-ref395" role="bib">Massad 2008</link>; <link linkend="b-9781474207300-ref334" role="bib">Kholoussy 2010</link>). Iranian constitutionalists at the beginning of the twentieth century criticized pederasty of boys and marriage of young girls as exploitative and undermining the brotherly bonds of nationalists because they were based on inequality of age (<link linkend="b-9781474207300-ref424" role="bib">Najmabadi 2008</link>; <link linkend="b-9781474207300-ref10" role="bib">Afary 2009</link>). Historians emphasize that these reform efforts were not primarily imposed by western Orientalist discourses, but were responses to internal dynamics within Iranian society.</para>
<para xml:id="b-9781474207300-791">The <indexterm class="singular" xml:id="b-9781474207300-IDX-2036">
            <primary>women</primary>
            <secondary>veil</secondary>
          </indexterm>veil also became an issue in larger debates over women’s work and education in the interwar and immediate postwar period. Some colonial officials and their supporters encouraged women to unveil as a sign of modernity and support for the French in Algeria. Some nationalists also promoted the unveiling, education, and employment of women in the interwar period as a means of modernity. However, the development of a commercial popular leisure culture where women worked in department stores, frequented cafes, and even sold sex, was both alluring and frightening to young nationalists (<link linkend="b-9781474207300-ref531" role="bib">Taraud 2003</link>: 357). Most Islamic reformers advocated more traditional religious measures about veiling and the female role. Colonial authorities sometimes went along with this populist conservatism to keep a lid on revolts (<link linkend="b-9781474207300-ref541" role="bib">Thompson [2000] 2013</link>: 87–120).</para>
</section>
<section xml:id="b-9781474207300-792">
<info xml:id="b-9781474207300-793">
<title xml:id="b-9781474207300-794">New Discourses of Sexuality</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-795">Although many of the old racial discourses of the nineteenth century remained intact, the first decades of the twentieth century also brought shifts in racial thought. Particularly after the horrors of the Great War, the image of <indexterm class="endofrange" startref="b-9781474207300-IDX-523" xml:id="b-9781474207300-IDX-end44"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1455" xml:id="b-9781474207300-IDX-end153"/>European <?page value="145"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-440">
            <primary>Cubism</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1217">
            <primary>Malinoski, Bronislaw</primary>
          </indexterm>peoples heading a stately march toward an idealized civilization began to unravel. As Henrika <indexterm class="singular" xml:id="b-9781474207300-IDX-1119">
            <primary>Kuklick, Henrika</primary>
          </indexterm>Kuklick has written, the generation that came of age in the postwar period thus “regarded human nature as fundamentally irrational, and considered individual and social degeneration as just as natural as progress” (<link linkend="b-9781474207300-ref344" role="bib">Kuklick 1991</link>: 23). Simultaneously, the idea of essential racial difference was increasingly questioned by anthropologists, who began to move toward a “cultural relativist” position. Functionalists like Bronislaw Malinowksi (1884–1942), A.R. <indexterm class="singular" xml:id="b-9781474207300-IDX-1559">
            <primary>Radcliffe Brown, A.R.</primary>
          </indexterm>Radcliffe Brown (1881–1955), E.E. <indexterm class="singular" xml:id="b-9781474207300-IDX-568">
            <primary>Evans Pritchard, E.E.</primary>
          </indexterm>Evans Pritchard (1902–73), and particularly Franz <indexterm class="singular" xml:id="b-9781474207300-IDX-230">
            <primary>Boas, Franz</primary>
          </indexterm>Boas (1858–1942), began to argue that differences between groups of peoples were due to cultural variation, rather than biology. Meanwhile, sexologists like Havelock <indexterm class="singular" xml:id="b-9781474207300-IDX-534">
            <primary>Ellis, Havelock</primary>
          </indexterm>Ellis (1859–1939) and Sigmund <indexterm class="singular" xml:id="b-9781474207300-IDX-687">
            <primary>Freud, Sigmund</primary>
          </indexterm>Freud (1856–1939) increasingly worried about the negative effects of “civilization” upon the sexual health of Europeans; while the suppression of sexual instincts was viewed as essential for progress, it also created opportunities for the development of perversions or neuroses (<link linkend="b-9781474207300-ref273" role="bib">Hoad 2000</link>; <link linkend="b-9781474207300-ref194" role="bib">Epprecht 2008</link>). Thus, in the early twentieth century, artists, intellectuals, sexologists, and anthropologists increasingly advocated a return to the “primitive” as a cure for western ills.</para>
<para xml:id="b-9781474207300-796">Cultural modernists found what they imagined to be “oriental” or “primitive” sexuality to be inspiring; a fantastical image of “oriental” and “primitive” sexuality also began to dominate in popular and high culture. The bestselling novel by Edith Maud <indexterm class="singular" xml:id="b-9781474207300-IDX-891">
            <primary>Hull, Edith Maud</primary>
          </indexterm>Hull (1880–1947), <emphasis role="italic">The Sheik</emphasis>, published in 1919 and made into a film starring Rudolph <indexterm class="singular" xml:id="b-9781474207300-IDX-1965">
            <primary>Valentino, Rudolph</primary>
          </indexterm>Valentino in 1921, epitomized this Orientalist trend (<link linkend="b-9781474207300-fig6_3" role="figure">Figure 6.3</link>). The novel tells the story of an Englishwoman, Lady Diana Mayo, who was raped by an Arab Sheik while traveling alone in Algeria. Lady Mayo falls in love with the Sheik, who luckily turns out to be an Englishman in disguise. The novel played with anxieties about interracial intimacies, and about the increased independence of European <indexterm class="singular" xml:id="b-9781474207300-IDX-82">
            <primary>Algeria</primary>
            <secondary>women</secondary>
          </indexterm>women in the interwar era (<link linkend="b-9781474207300-ref120" role="bib">Chow 1999</link>: 64–87; <link linkend="b-9781474207300-ref66" role="bib">Blake 2003</link>; <link linkend="b-9781474207300-ref534" role="bib">Teo 2010</link>). At the same time, racist images pervaded popular culture (<link linkend="b-9781474207300-ref115" role="bib">Chase 1992</link>: 256; <link linkend="b-9781474207300-ref186" role="bib">Ellena 2004</link>: 257). The African-American singer and dancer Josephine <indexterm class="singular" xml:id="b-9781474207300-IDX-177">
            <primary>Baker, Josephine</primary>
          </indexterm>Baker (1906–75) was the toast of Paris and Berlin, but her popularity was predicated on her performance of a particular vision of “savage” sexuality (<link linkend="b-9781474207300-fig6_4" role="figure">Figure 6.4</link>); as Roman <indexterm class="singular" xml:id="b-9781474207300-IDX-886">
            <primary>Horak, Roman</primary>
          </indexterm>Horak notes, “Baker was presented over and over again as the Other of urban European modernity” (<link linkend="b-9781474207300-ref282" role="bib">Horak 2013</link>: 516). Similarly, the Cubists repurposed the conventions of African art to tap into an impulsive, sensual, and primal impulse that they felt was lacking in European life (<link linkend="b-9781474207300-ref65" role="bib">Blake 1999</link>). In both cases, the lack of restraint that supposedly characterized the “primitive” was seen as a cure for European over-civilization and neurosis.</para>
<para xml:id="b-9781474207300-797">Radical sex reformers believed that the West had repressed the art of love and idealized the “Orient” as a source of erotic knowledge. The German physician and sex educator Max <indexterm class="singular" xml:id="b-9781474207300-IDX-876">
            <primary>Hodann, Max</primary>
          </indexterm>Hodann (1894–1946) proclaimed “the world of the Orient, the Mohammedan-Arabian world, as well as the Indian and Shintoist, is today still free from this ban against sensuousness which <indexterm class="endofrange" startref="b-9781474207300-IDX-1441" xml:id="b-9781474207300-IDX-end151"/>oppresses <?page value="146"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure6_3"/>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure6_4"/>
          <?page value="147"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-881">
            <primary>homosexuality</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1442">
            <primary>orientalism</primary>
          </indexterm>Europe and America, and prevents the growth of any love culture” (<link linkend="b-9781474207300-ref277" role="bib">Hodann [1932] 1975</link>: 12). In her 1937 marriage manual, the family planning pioneer Helena <indexterm class="singular" xml:id="b-9781474207300-IDX-2078">
            <primary>Wright, Helena</primary>
          </indexterm>Wright (1887–1982) wrote, “there can be nothing impossible about the achievement of a successful sex act, because it is the universal experience of primitive peoples, and of Eastern civilizations,” who treated sex as a cultural art and skill (<link linkend="b-9781474207300-ref595" role="bib">Wright [1931] 1937</link>: 85). The Dutch physician Theodore <indexterm class="singular" xml:id="b-9781474207300-IDX-1966">
            <primary>Van de Velde, Theodore</primary>
          </indexterm>Van de Velde (1873–1937), author of the 1926 bestseller <emphasis role="italic">Ideal Marriage</emphasis>, explored “oriental” sexual manuals for new positions for intercourse, but he also believed that western women’s sexuality was physiologically different and more complicated (<link linkend="b-9781474207300-ref561" role="bib">Van de Velde [1926] 1930</link>: 149). A male homosexual journal praised Islamic cultures for discreetly tolerating same-sex relations (<link linkend="b-9781474207300-ref324" role="bib">Karsch-Haack and Stelter 2002</link>: 25–30, 80–2). On the other hand, the “primitivity” of African sexuality continued to be stigmatized. As Keguro <indexterm class="singular" xml:id="b-9781474207300-IDX-1192">
            <primary>Macharia, Keguro</primary>
          </indexterm>Macharia has put it, “The African appeared in sexology’s archives as hypo- and hyper-developed: too uncivilized to be homosexual, a condition that afflicted the ‘over-civilized’ races, and too excessively bodily not to be queer (the too-large penises, too-large clitorises, too much appetite)” (<link linkend="b-9781474207300-ref378" role="bib">Macharia 2014</link>).</para>
<figure label="6.3" xlink:href="b-9781474207300-figure6_3" xlink:role="objectPointer" xml:id="b-9781474207300-fig6_3">
<info xml:id="b-9781474207300-798">
<title xml:id="b-9781474207300-799">A scene from the film “The Sheik,” in which Rudolph Valentino (1895–1926) embraces Agnes Ayres. Credit: Hulton Archive/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-800">
<imageobject xml:id="b-9781474207300-801">
<imagedata align="center" fileref="images/fig6_3.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<figure label="6.4" xlink:href="b-9781474207300-figure6_4" xlink:role="objectPointer" xml:id="b-9781474207300-fig6_4">
<info xml:id="b-9781474207300-803">
<title xml:id="b-9781474207300-804">Josephine Baker posing with a tiger rug, <emphasis role="italic">c</emphasis>. 1925. Credit: Hulton Archive/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-805">
<imageobject xml:id="b-9781474207300-806">
<imagedata align="center" fileref="images/fig6_4.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-808">In African colonies, Europeans were less likely to view colonized peoples as possessing special sexual knowledge. As opposed to those in the exotic “East,” where sexual expertise had supposedly been developed as a cultural form, Africans were generally viewed as being too “primitive” to have anything but heterosexual, reproductive sex. As Marc <indexterm class="singular" xml:id="b-9781474207300-IDX-540">
            <primary>Epprecht, Marc</primary>
          </indexterm>Epprecht has put it, African cultures were considered unique “in the[ir] absence of, ignorance about, or intolerance toward exceptions to the heterosexual norm” (<link linkend="b-9781474207300-ref194" role="bib">Epprecht 2008</link>: 25). However, this very adherence to “natural,” “uncontaminated” sexuality was what made Africans virile and healthy; experts including Carl <indexterm class="singular" xml:id="b-9781474207300-IDX-1067">
            <primary>Jung, Carl</primary>
          </indexterm>Jung (1875–1961) and Marie <indexterm class="singular" xml:id="b-9781474207300-IDX-234">
            <primary>Bonaparte, Marie</primary>
          </indexterm>Bonaparte (1882–1962) proposed that data about the sexual practices of “primitive” peoples could thus be used to improve the sexual health of Europeans. Bonaparte was particularly inspired by the practice of clitoridectomy in some East African communities. A former patient of <indexterm class="singular" xml:id="b-9781474207300-IDX-688">
            <primary>Freud, Sigmund</primary>
          </indexterm>Freud’s, she was disturbed by her inability to achieve a “mature” vaginal orgasm. As Bodil Folke <indexterm class="singular" xml:id="b-9781474207300-IDX-664">
            <primary>Frederiksen, Bodil Folke</primary>
          </indexterm>Frederiksen has written, Bonaparte became convinced “that because of African free sexuality and possibly because of the prevalence of clitoridectomy, African women might be better ‘vaginalized’, as she expressed it, and thus more feminine than European women” (<link linkend="b-9781474207300-ref214" role="bib">Frederiksen 2008</link>: 26). She subsequently underwent several operations to move her clitoris closer to her vaginal canal in an effort to cure her supposed sexual dysfunction, before ultimately deciding that psychoanalysis was a more effective treatment.<footnote label="2" role="end-bk-note" xml:id="b-9781474207300-fn6_2">
            <para xml:id="b-9781474207300-809">Even after she rejected surgical interventions for European women, Bonaparte remained interested in the effects of clitoridectomy on African women’s sexuality. In her 1953 study of female sexuality, Bonaparte argued that clitoridectomy had the goal not of reducing women’s sexual pleasure, but rather of shifting it toward the mature vaginal orgasm. Thus, she believed, African women were “more frequently, and better, ‘vaginalized’ than their European sisters” (quoted in <link linkend="b-9781474207300-ref214" role="bib">Frederiksen 2008</link>: 40).</para>
          </footnote>
        </para>
<para xml:id="b-9781474207300-810">This is not to say that the idea of the “primitive” as sexually pathological entirely disappeared; rather, it existed alongside the newer discourse stressing the dangers of civilization for sexual health. Furthermore, the sexual dysfunction of Europeans posed a direct threat to <indexterm class="singular" xml:id="b-9781474207300-IDX-1648">
            <primary>sex</primary>
            <secondary>colonization</secondary>
          </indexterm>colonization. As colonial possessions <?page value="148"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-34">
            <primary>Africa</primary>
            <secondary>sexuality</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1456">
            <primary>Oyeˇwùmí, Oyèrónké˙</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1651">
            <primary>sex</primary>
            <secondary>regulation</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2089">
            <primary>Zambia</primary>
          </indexterm>increasingly challenged imperial authority, western imperial powers became ever more concerned about their ability to exert control over seemingly more virile and sexually functional peoples (<link linkend="b-9781474207300-ref159" role="bib">Davin 1978</link>). The sexual discourses of the nineteenth and twentieth centuries thus represented a curious Catch-22: the lack of sexual restraint that supposedly rendered “primitive” peoples incapable of self-rule also guaranteed that they would produce larger and less neurotic populations than those who ruled them.</para>
<para xml:id="b-9781474207300-811">The idea that African sexual norms and practices must be protected from “contamination” by more “civilized”—and hence more deviant and neurotic—cultures served as a justification for keeping colonized people out of cities, schools, and politics. The “detribalized native” was viewed as particularly prone to adopting criminal or immoral behaviors, or succumbing to madness (<link linkend="b-9781474207300-ref563" role="bib">Vaughan 2004</link>: 100–28). In British colonies, regimes were thus able to justify the segregation of colonized peoples in rural “Native Reserves” as an extension of their duties as guardians of vulnerable wards; as Mahmood <indexterm class="singular" xml:id="b-9781474207300-IDX-1219">
            <primary>Mamdani, Mahmood</primary>
          </indexterm>Mamdani notes, “the essence of protection [of natives] was not to guarantee rights but to enforce custom” (1996: 70).</para>
<para xml:id="b-9781474207300-812">Despite the insistence on the need to preserve indigenous sexual practices from “contamination,” scholars have shown that colonialism dramatically altered African sex/gender norms. Oyèrónkẹ́ Oyĕwùmí has argued (controversially) that the very category of gender did not exist in Yorubaland prior to European colonization: in precolonial <indexterm class="singular" xml:id="b-9781474207300-IDX-2085">
            <primary>Yoruba</primary>
          </indexterm>Yoruba society, she writes, “the body was not the basis of social roles, inclusions, or exclusions” (<link linkend="b-9781474207300-ref437" role="bib">Oyĕwùmí 1997</link>: x).<footnote label="3" role="end-bk-note" xml:id="b-9781474207300-fn6_3">
            <para xml:id="b-9781474207300-815">Critics of her approach suggest that she relies too heavily on linguistic data (arguing, for instance, that the absence of gendered pronouns in the Yoruba language indicates an absence of gender in the culture more broadly) and for overgeneralizing about western scholarship on gender (see, for example, <link linkend="b-9781474207300-ref225" role="bib">Geiger 1999</link>; <link linkend="b-9781474207300-ref389" role="bib">Manicom 2001</link>; <link linkend="b-9781474207300-ref35" role="bib">Bakare-Yusuf 2004</link>).</para>
          </footnote> Colonization, she argues, thus introduced patriarchy to a space where seniority had previously been the most significant category of difference.</para>
<para xml:id="b-9781474207300-816">Indeed, the mandate to preserve indigenous cultures and mores often served as a cover to do just the opposite—to recreate “customs” to meet the needs of a particular moment. In accordance with the doctrine of indirect rule, authorities in colonial Africa sought to rule through indigenous institutions. In reality, these institutions were often invented or transformed through the process of colonization (Hobsbawn and Ranger 1992; <link linkend="b-9781474207300-ref503" role="bib">Spear 2003</link>). Customary law proved a particularly useful tool for controlling the behavior—both sexual and economic—of indigenous women in Northern Rhodesia (<link linkend="b-9781474207300-ref113" role="bib">Chanock 1982</link>). Yet non-elite men and women were also sometimes able to exploit disputes among various authorities (missionaries, administrators, and chiefs and other African elites) in defining customary law to pursue their own agendas. Thus, argues Rachel <indexterm class="singular" xml:id="b-9781474207300-IDX-1059">
            <primary>Jean-Baptiste, Rachel</primary>
          </indexterm>Jean-Baptiste, “The colonial state and African male political leaders were constantly shifting their articulations of customary law in response to the unanticipated ways in which ordinary men and women defined, engaged in and were in conflict over matrimony and sex” (2008: 240).</para>
<para xml:id="b-9781474207300-817">Similarly, in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1086">
            <primary>Kenya</primary>
          </indexterm>Kenya in the 1920s and 1930s, attempts by missionaries and humanitarians to ban the custom of clitoridectomy backfired as <indexterm class="startofrange" xml:id="b-9781474207300-IDX-745">
            <primary>Gikuyu</primary>
          </indexterm>Gikuyu <?page value="149"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-694">
            <primary>
              <emphasis role="italic">Front National de Libération</emphasis>, FLN</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-805">
            <primary>Great Britain</primary>
            <secondary>empire</secondary>
          </indexterm>nationalists embraced the custom as essential to the social structures of their community. As Susan <indexterm class="singular" xml:id="b-9781474207300-IDX-1490">
            <primary>Pedersen, Susan</primary>
          </indexterm>Pedersen explains, “As a defense of clitoridectomy became entangled with long-standing <indexterm class="singular" xml:id="b-9781474207300-IDX-1108">
            <primary>Kikuyu</primary>
          </indexterm>Kikuyu grievances about mission influence and access to land, clitoridectomy … came to be seen as a mark of loyalty to the incipient, as yet imaginary, nation” (<link linkend="b-9781474207300-ref450" role="bib">Pedersen 1991</link>: 651). The trained anthropologist (and later first president of independent Kenya) Jomo <indexterm class="singular" xml:id="b-9781474207300-IDX-1093">
            <primary>Kenyatta, Jomo</primary>
          </indexterm>Kenyatta (1891–1978) “defended the positive function of initiation rites, particularly clitoridectomy, in direct response to missionary attacks on their supposed barbarity and encouragement of sexual promiscuity by claiming instead that they actually turned children into socially and sexually responsible and disciplined adults” (<link linkend="b-9781474207300-ref61" role="bib">Berman 1996</link>: 334). When missionaries began to refuse to let circumcised girls attend their schools, Gikuyu nationalists set up their own “independent schools.” These schools in turn helped build nationalist sentiment.</para>
</section>
<section xml:id="b-9781474207300-818">
<info xml:id="b-9781474207300-819">
<title xml:id="b-9781474207300-820">Postwar Moral Imperialism and Decolonization</title>
<itermset xml:id="b-9781474207300-IDX-see17">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-471">
              <primary>decolonization</primary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-821">Just as the process of building up colonial regimes drew on sexual rhetoric and practices, sexuality also influenced the process of tearing them down. Decolonization brought with it particular kinds of sexual <indexterm class="singular" xml:id="b-9781474207300-IDX-1652">
            <primary>sex</primary>
            <secondary>violence</secondary>
          </indexterm>violence, as colonial regimes sought to retain control. Men and women detained by the British colonial government during the suppression of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1244">
            <primary>Mau Mau</primary>
          </indexterm>Mau Mau rebellion in Kenya faced sexualized torture—in June 2013, the British government agreed to pay compensation to over 5,000 of these torture victims (<link linkend="b-9781474207300-ref185" role="bib">Elkins 2005b</link>; <link linkend="b-9781474207300-ref23" role="bib">Anderson 2011</link>; <link linkend="b-9781474207300-ref447" role="bib">Parry 2016</link>). In his study of the Algerian <indexterm class="singular" xml:id="b-9781474207300-IDX-79">
            <primary>Algeria</primary>
            <secondary>War of Independence</secondary>
          </indexterm>War of Independence, <emphasis role="italic">The Wretched of the Earth</emphasis> ([1961] 2004), Frantz <indexterm class="singular" xml:id="b-9781474207300-IDX-581">
            <primary>Fanon, Frantz</primary>
          </indexterm>Fanon (1925–61) highlighted the sexual humiliation of colonized men; attacks on the virility of Algerian men signaled more foundational anxieties about the ability of the French to defeat an enemy often perceived as more martial, sexually powerful, and potent than his colonizer (<link linkend="b-9781474207300-ref202" role="bib">Fanon [1961] 2004</link>). Algerian nationalist women were also raped in prison; the sexualized torture of FLN militants like Djamila <indexterm class="singular" xml:id="b-9781474207300-IDX-237">
            <primary>Bouhired, Djamila</primary>
          </indexterm>Bouhired and Djamila <indexterm class="singular" xml:id="b-9781474207300-IDX-238">
            <primary>Boupacha, Djamila</primary>
          </indexterm>Boupacha attracted the attention of major French intellectuals like Simone <indexterm class="singular" xml:id="b-9781474207300-IDX-452">
            <primary>de Beauvoir, Simone</primary>
          </indexterm>de Beauvoir (1908–86) and her partner Jean-Paul <indexterm class="singular" xml:id="b-9781474207300-IDX-1625">
            <primary>Sartre, Jean-Paul</primary>
          </indexterm>Sartre (1905–80), who viewed torture as a source of national shame for the French (<link linkend="b-9781474207300-ref521" role="bib">Surkis 2010</link>). Yet, as Todd <indexterm class="singular" xml:id="b-9781474207300-IDX-1658">
            <primary>Shepard, Todd</primary>
          </indexterm>Shepard has argued, sexual stereotypes also created possibilities for Algerian nationalists to resist: “During the Algerian War,” he writes, “the implicit reliance on the sexualized and gendered understandings that had so underwritten colonialism’s role in building modernity became manifest,” opening opportunities for anticolonialists “to draw much attention to the French use of such tactics and to offer convincing rebuttals” (2008: 186) (<link linkend="b-9781474207300-fig6_5" role="figure">Figure 6.5</link>).</para>
<para xml:id="b-9781474207300-822">Sexual violence was also perpetrated by colonized people against one another. Members of the FLN targeted Algerians who were viewed <indexterm class="endofrange" startref="b-9781474207300-IDX-745" xml:id="b-9781474207300-IDX-end69"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1086" xml:id="b-9781474207300-IDX-end125"/>as <?page value="150"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure6_5"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-57">
            <primary>Algeria</primary>
            <secondary>collaborators</secondary>
          </indexterm>collaborators; victims were sometimes castrated, symbolizing their emasculation under colonial regimes (<link linkend="b-9781474207300-ref489" role="bib">Shepard 2008</link>: 44). During the Partition of <indexterm class="singular" xml:id="b-9781474207300-IDX-930">
            <primary>India</primary>
          </indexterm>India and <indexterm class="singular" xml:id="b-9781474207300-IDX-1467">
            <primary>Pakistan</primary>
          </indexterm>Pakistan, thousands of women on both sides of the border were abducted, raped, mutilated, and forcibly married and/or converted as the two states sought to establish their geographic and semantic boundaries. Women’s bodies became a battleground upon which the tensions between religious groups were fought out; nevertheless, women were also agents (and sometimes agents of violence) during Partition (<link linkend="b-9781474207300-ref97" role="bib">Butalia 1993</link>).</para>
<figure label="6.5" xlink:href="b-9781474207300-figure6_5" xlink:role="objectPointer" xml:id="b-9781474207300-fig6_5">
<info xml:id="b-9781474207300-823">
<title xml:id="b-9781474207300-824">A man sits in front of OAS graffiti in Algeria, <emphasis role="italic">c.</emphasis> 1962. Credit: Dominique Berretty, Gamma-Rapho Collection/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-825">
<imageobject xml:id="b-9781474207300-826">
<imagedata align="center" fileref="images/fig6_5.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-828">The postcolonial period saw increases in migration from former imperial possessions, with parallel anxieties about its effects. In <indexterm class="singular" xml:id="b-9781474207300-IDX-626">
            <primary>France</primary>
          </indexterm>France, workers were imported from the former colonies to fill labor shortages. French authorities blamed the poverty of the <indexterm class="singular" xml:id="b-9781474207300-IDX-115">
            <primary>Antilles</primary>
          </indexterm>Antilles on the excessive sexuality and fertility which supposedly characterized Guadeloupean and Martiniquan women, and viewed immigration as an opportunity to defuse population pressure, employ these women, and reform their sexual mores by introducing them to French society (<link linkend="b-9781474207300-ref228" role="bib">Germain 2010</link>: 476).<footnote label="4" role="end-bk-note" xml:id="b-9781474207300-fn6_4">
            <para xml:id="b-9781474207300-829">At home in the Antilles, nationalist men argued that the victimization of female migrants in France represented the continuation of colonial conditions. However, Germain contends, this portrayal of migrant women as victims of French racism “failed to acknowledge how gender relations within the Antillean community victimized women” (2010: 493).</para>
          </footnote> Once in France, Antillean women were funneled into domestic work, and, faced with insufficient state support, some turned to prostitution to earn a living. Nevertheless, today Antillean women play a key role in French politics. As a member of the French Parliament, Christiane <indexterm class="singular" xml:id="b-9781474207300-IDX-1793">
            <primary>Taubira, Christiane</primary>
          </indexterm>Taubira, a French Guianese women, crafted legislation which recognized the <indexterm class="singular" xml:id="b-9781474207300-IDX-154">
            <primary>Atlantic slave trade</primary>
          </indexterm>Atlantic slave trade as a crime against humanity and required school curricula <?page value="151"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1443">
            <primary>orientalism</primary>
          </indexterm>to discuss this history; hers is a prominent voice in debates about citizenship, race relations, and negritude in France (<link linkend="b-9781474207300-ref587" role="bib">Wilks 2015</link>: 97).<footnote label="5" role="end-bk-note" xml:id="b-9781474207300-fn6_5">
            <para xml:id="b-9781474207300-830">Taubira was also a prominent supporter of same-sex marriage in France, and made headlines in 2016 when she resigned as minister of justice in protest of President François Hollande’s proposal to revoke French citizenship from convicted terrorists with dual nationality.</para>
          </footnote>
        </para>
<para xml:id="b-9781474207300-831">In <indexterm class="singular" xml:id="b-9781474207300-IDX-782">
            <primary>Great Britain</primary>
          </indexterm>Britain, Clive <indexterm class="singular" xml:id="b-9781474207300-IDX-2009">
            <primary>Webb, Clive</primary>
          </indexterm>Webb has found that mixed-race couples in the 1950s often fared better than their peers in the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1924">
            <primary>United States</primary>
          </indexterm>United States; although discrimination was not illegal and couples certainly experienced it, interracial marriage was not prohibited unlike in the United States with its <indexterm class="singular" xml:id="b-9781474207300-IDX-1064">
            <primary>Jim Crow Laws</primary>
          </indexterm>Jim Crow laws (<link linkend="b-9781474207300-ref577" role="bib">Webb 2017</link>). But in 1958 the Notting Hill riots in London erupted, as white people alleged that black men were pimping white women in order to excuse white assaults of their black neighbors. A murderer even covered up his crimes by deflecting attention away to prejudice against Jamaican immigrants (<link linkend="b-9781474207300-ref414" role="bib">Mort 2006</link>). In 1968, the Conservative British politician Enoch <indexterm class="singular" xml:id="b-9781474207300-IDX-1532">
            <primary>Powell, Enoch</primary>
          </indexterm>Powell infamously predicted that the streets would run with “rivers of blood” if the migration of non-white people was not stopped (<link linkend="b-9781474207300-ref34" role="bib">Bailkin 2012</link>: 23).<footnote label="6" role="end-bk-note" xml:id="b-9781474207300-fn6_6">
            <para xml:id="b-9781474207300-832">As Jordanna Bailkin has noted, experts in the postwar period argued “that a relatively benign trickle of migrants of color was being replaced by a ‘flood’ that threatened Britain’s historic tolerance, that these migrations were qualitatively and quantitatively unprecedented, and that their impact on British identity was more important than that of any other movement of peoples in the 1950s and 1960s” (2012: 23).</para>
          </footnote> In the 1970s, women from South Asia were subjected to virginity tests at Heathrow if they were arriving to join their husbands (<link linkend="b-9781474207300-ref256" role="bib">R.A. Hall 2002</link>: 55–68).</para>
<para xml:id="b-9781474207300-833">In the present moment, rhetoric about the sexual and gendered cultures of non-western people has become a particularly useful tool for the rejection of multiculturalism in Europe. Both queer folks and Muslim women are depicted as vulnerable populations who must be saved from their culture and their menfolk respectively. Conversely, former imperial nations in Europe define themselves in terms of “homonationalism,” claiming that their toleration of multicultural populations and gay people indicates their modernity and their “superior ability to tolerate difference” (<link linkend="b-9781474207300-ref190" role="bib">El-Tayeb 2011</link>: 83). While it is true that some predominantly Islamic countries have adopted repressive legislation limiting the rights of women and GLBTQ people, the discourse of homonationalism problematically generalizes across nations, and reiterates an Orientalist tradition of portraying the Muslim Other as superstitious, premodern, culture-bound, and out of step with supposedly universal norms of tolerance and human rights (<link linkend="b-9781474207300-ref464" role="bib">Puar 2007</link>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1542">
            <primary>Puar, Jasbar</primary>
          </indexterm>: 39; <link linkend="b-9781474207300-ref190" role="bib">El-Tayeb 2011</link>, <link linkend="b-9781474207300-ref191" role="bib">2012</link>). As El-Tayeb notes, when queer activists join this project, they “assure the nation of [their] loyalty.” But such “conditional inclusion” can readily be revoked if members of marginal communities refuse to assimilate to national norms (<link linkend="b-9781474207300-ref191" role="bib">El-Tayeb 2012</link>: 83). At the same time, Jasbir Puar notes that homonationalist discourses continue to feature the terrorist Other as both particularly virulent in his homophobia, and suspiciously prone to queer tendencies (<link linkend="b-9781474207300-ref464" role="bib">Puar 2007</link>: 37).<footnote label="7" role="end-bk-note" xml:id="b-9781474207300-fn6_7">
            <para xml:id="b-9781474207300-834">Todd Shepard has argued that the figure of the “gay Arab” played a central role in both far-right and gay liberationist discourses in France in the 1960s and 1970s. Orientalist discourses reemerged in the arguments of French sexual liberation, while what Shepard terms “sex-talk” “created a site where many French people could and did speak about race, empire and Algeria (<link linkend="b-9781474207300-ref490" role="bib">Shepard 2012</link>: 83; see also <link linkend="b-9781474207300-ref489" role="bib">Shepard 2008</link>).</para>
          </footnote>
        </para>
<para xml:id="b-9781474207300-835">Homonationalist discourses have also been applied to spaces in sub-Saharan Africa, where both conservatives and progressives have expressed opposition to the “exportation” of GLBTQ identity to Africa.<footnote label="8" role="end-bk-note" xml:id="b-9781474207300-fn6_8">
            <para xml:id="b-9781474207300-836">This parallel in conservative and progressive rhetoric has also been observed by the authors of this study of GLBT issues in Cameroon, Senegal, South Africa, and Uganda (<link linkend="b-9781474207300-ref32" role="bib">Awondo <emphasis role="italic">et al.</emphasis> 2012</link>).</para>
          </footnote> African leaders in <indexterm class="singular" xml:id="b-9781474207300-IDX-2094">
            <primary>Zimbabwe</primary>
          </indexterm>Zimbabwe, <indexterm class="singular" xml:id="b-9781474207300-IDX-1866">
            <primary>Uganda</primary>
          </indexterm>Uganda, and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1392">
            <primary>Nigeria</primary>
          </indexterm>Nigeria and elsewhere have attempted to legitimize anti-gay policies and legislation on the basis that <indexterm class="startofrange" xml:id="b-9781474207300-IDX-882">
            <primary>homosexuality</primary>
          </indexterm>homosexuality is not an indigenous practice.<footnote label="9" role="end-bk-note" xml:id="b-9781474207300-fn6_9">
            <para xml:id="b-9781474207300-837">Marc Epprecht has argued forcefully against such interpretation, claiming that it is homophobia, not homosexuality, that is the western import (<link linkend="b-9781474207300-ref194" role="bib">Epprecht 2008</link>).</para>
          </footnote> The response of western progressives to such rhetoric has often recirculated ideas about the “backwardness” of the “dark continent”—while <?page value="152"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-351">
            <primary>China</primary>
            <secondary>sexuality</secondary>
          </indexterm>ignoring the fact that fundamentalist Christian organizations from the US contributed heavily to anti-gay campaigns in Africa (<link linkend="b-9781474207300-ref47" role="bib">Baptiste 2014</link>; <link linkend="b-9781474207300-ref571" role="bib">Walker 2014</link>). LGBTI activists in Africa have opposed policies that seek to limit or stop aid to countries with anti-gay policies, pointing out that donor sanctions reproduce power imbalances between countries, ignore the fact that LGBTI Africans also depend upon foreign aid, and often “exacerbate the environment of intolerance in which political leadership scapegoat LGBTI people for donor sanctions in an attempt to retain and reinforce national state sovereignty.”<footnote label="10" role="end-bk-note" xml:id="b-9781474207300-fn6_10">
            <para xml:id="b-9781474207300-838">See the African Queer &amp; Social Justice Organisations and Activists Statement on the threats by UK government sanctions, originally posted October 15, 2011, reposted on several blogs including blacklooks.org, October 28, 2011, <link xlink:href="http://www.blacklooks.org/2011/10/statement-of-african-social-justice-activists-on-the-decision-of-the-british-government-to-%E2%80%9Ccut-aid%E2%80%9D-to-african-countries-that-violate-the-rights-of-lgbti-people-in-africa/">
                <uri>http://www.blacklooks.org/2011/10/statement-of-african-social-justice-activists-on-the-decision-of-the-british-government-to-%E2%80%9Ccut-aid%E2%80%9D-to-african-countries-that-violate-the-rights-of-lgbti-people-in-africa/</uri>
              </link>.</para>
          </footnote>
        </para>
<para xml:id="b-9781474207300-839">More progressive voices have, however, also expressed reticence about the applicability of GBTQI identities in the African context. In a ground-breaking book which established the long history of marriages between <indexterm class="singular" xml:id="b-9781474207300-IDX-910">
            <primary>Igbo</primary>
          </indexterm>Igbo women in precolonial Nigeria, Ifi <indexterm class="singular" xml:id="b-9781474207300-IDX-88">
            <primary>Amadiume, Ifi</primary>
          </indexterm>Amadiume chastised black lesbians in the West for making connections between such marriages and their own relationships. “Such interpretation[s],” she noted, “would be totally inapplicable, shocking and offensive to Nnobi women, since the strong bonds and support between them do not imply lesbian sexual practices” (<link linkend="b-9781474207300-ref19" role="bib">Amadiume 1987</link>: 7).<footnote label="11" role="end-bk-note" xml:id="b-9781474207300-fn6_11">
            <para xml:id="b-9781474207300-840">She accused black American, Caribbean, and British lesbians of using “prejudiced interpretations of African situations to justify their choices of sexual alternatives which have roots and meaning in the West” (<link linkend="b-9781474207300-ref19" role="bib">Amadiume 1987</link>: 7).</para>
          </footnote> Of course, as Kathryn <indexterm class="singular" xml:id="b-9781474207300-IDX-1073">
            <primary>Kendall, Kathryn</primary>
          </indexterm>Kendall notes in her study of same-sex love among women in <indexterm class="singular" xml:id="b-9781474207300-IDX-1166">
            <primary>Lesotho</primary>
          </indexterm>Lesotho, the absence of a sexual connotation may actually enable women to pursue same-sex relationships: “The fact that these activities are not considered to be ‘sexual’ grants Basotho women the freedom to enjoy them without restraint, embarrassment, or the ‘identity crises’ experienced by women in homophobic cultures like those of the United States and Europe” (<link linkend="b-9781474207300-ref327" role="bib">Kendall 1999</link>: 161–5).</para>
<para xml:id="b-9781474207300-841">More recently, Neville <indexterm class="singular" xml:id="b-9781474207300-IDX-873">
            <primary>Hoad, Neville</primary>
          </indexterm>Hoad has expressed concern that attempts to fold those who engage in same-sex practices in Africa into the universalizing language of gay rights has the effect of “closing down spaces for these participants without replicating the set of historical circumstances which allowed gayness to have historical agency in the west” (<link linkend="b-9781474207300-ref274" role="bib">Hoad 2007</link>:153). Joseph <indexterm class="singular" xml:id="b-9781474207300-IDX-1239">
            <primary>Massad, Joseph</primary>
          </indexterm>Massad has raised similar concerns about use of GLBTQ rhetoric in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1277">
            <primary>Middle East</primary>
          </indexterm>Middle East, suggesting that sexual practices and identities that do not fit a western vision of “queerness” may be made invisible in the process (<link linkend="b-9781474207300-ref395" role="bib">Massad 2008</link>: 16). However, the notion of a western importation of sexual identities may not be particularly accurate. In the case of <indexterm class="singular" xml:id="b-9781474207300-IDX-1812">
            <primary>Thailand</primary>
          </indexterm>Thailand, ideas about sexual identity were being imported from China and <indexterm class="singular" xml:id="b-9781474207300-IDX-931">
            <primary>India</primary>
          </indexterm>India long before the advent of western imperialism in south-east Asia. Furthermore, Thai people adapt and transform “western” identity categories to meet their own needs and expectations (Jackson 1997).</para>
<para xml:id="b-9781474207300-842">We also need to attend to the flow of identities in the reverse direction, from the Global South to the West. Western transfolks have borrowed the concept of “third gender” identities such as the <emphasis role="italic">berdaches</emphasis> of North America, <emphasis role="italic">hijras</emphasis> of India, and the female husbands in parts of West and East Africa to describe their own experiences. Just as the term “<indexterm class="singular" xml:id="b-9781474207300-IDX-1842">
            <primary>transgender</primary>
          </indexterm>transgender” has roots in a particular set of western discourses, each of these third gender identities emerged in the particular and specific context of space and history (<link linkend="b-9781474207300-ref543" role="bib">Towle and Morgan 2002</link>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1392" xml:id="b-9781474207300-IDX-end144"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-882" xml:id="b-9781474207300-IDX-end92"/>; <?page value="153"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1444">
            <primary>orientalism</primary>
          </indexterm>see also <link linkend="b-9781474207300-ref178" role="bib">Dutta 2012</link>). The western embrace of “third gender” identities often recirculates problematic anthropological discourse about a more “natural,” “intuitive,” or “primordial” approach to gender identity. Aren <indexterm class="singular" xml:id="b-9781474207300-IDX-49">
            <primary>Aizura, Aren</primary>
          </indexterm>Aizura has observed that Thai clinics may intentionally reproduce the Orientalist fantasies of western transwomen who visit the clinics for gender reassignment surgery (<link linkend="b-9781474207300-ref14" role="bib">Aizura 2010</link>).</para>
<para xml:id="b-9781474207300-843">These observations about current debates surrounding sexuality and race in the Global South underscore the extent to which the complicated sexual politics of imperialism have survived in different guises in the neocolonial world. At the current moment, a new wave of conservativism that rejects globalization and multiculturalism is sweeping across parts of Europe and the United States. In each case, claims about the sexual and gendered mores, practices, and typologies of people of color are being circulated to oppose their presence in the wealthiest parts of the world. Far from a new phenomenon, this set of racial and sexual scripts draws strength from a much longer genealogy that tied sexuality to the West’s right to colonize and rule. However, as we have attempted to show here, the metaphors of gender and sexuality have also been available to those who used them to resist imperialism, to assert agency, and to undercut the claims to supremacy implicit in colonial projects. As we prepare to challenge this political turn in the coming years, we would do well to keep in mind these twin histories of repression and <indexterm class="endofrange" startref="b-9781474207300-IDX-1924" xml:id="b-9781474207300-IDX-end202"/>resistance.</para>
</section>
<?page value="154"?>
</chapter>
<chapter label="7" xml:id="b-9781474207300-chapter7">
<info xml:id="b-9781474207300-844">
<title xml:id="b-9781474207300-845">
          <?page value="155"?>Resistance</title>
<author xlink:href="C0002" xlink:role="biblioAuID">
<personname role="first-last">
<firstname>Roland</firstname> <surname>Burke</surname>
          </personname>
        </author>
<pagenums>155–176</pagenums>
<biblioid class="doi">10.5040/9781474207300.ch-007</biblioid>
<mediaobject xml:id="b-9781474207300-846">
<imageobject xml:id="b-9781474207300-847">
<imagedata fileref="pdfs/9781474207300.ch-007.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
<itermset xml:id="b-9781474207300-IDX-see18">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-193">
            <primary>Banivauna Mar, Tracey</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1573">
            <primary>resistance</primary>
          </indexterm>
        </itermset>
<copyright>
          <year>2019</year>
          <holder>Bloomsbury Publishing</holder>
        </copyright>
      </info>
<para role="fullOut" xml:id="b-9781474207300-848">
        <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2032">
          <primary>women</primary>
          <secondary>resistance</secondary>
        </indexterm>Resistance to empire sits among the richest fields of contemporary historical scholarship. A generation of innovative inquiries, and the explosive growth of a sibling field, international and transnational history, has transformed understanding (<link linkend="b-9781474207300-ref128" role="bib">Clavin 2005</link>, <link linkend="b-9781474207300-ref129" role="bib">2011</link>; <link linkend="b-9781474207300-ref499" role="bib">Sluga 2013</link>). Half a century of historical investigation has resolved, in ever finer detail, the ways in which empires exerted their power culturally, socially, and politically, and the concomitant damage they wrought upon the peoples subjected to them, both direct and mediated (<link linkend="b-9781474207300-ref384" role="bib">Mamdani 1996</link>). Academic approaches to empires and their dissolution are now less constrained by narratives of incremental progress from colonialism to a single terminal point, that of independent statehood, with the arrival of recent transformative works from Antoinette <indexterm class="singular" xml:id="b-9781474207300-IDX-282">
          <primary>Burton, Antoinette</primary>
        </indexterm>Burton (<link linkend="b-9781474207300-ref94" role="bib">2015</link>), Heather <indexterm class="singular" xml:id="b-9781474207300-IDX-1741">
          <primary>Streets-Salter, Heather</primary>
        </indexterm>Streets-Salter and Trevor <indexterm class="singular" xml:id="b-9781474207300-IDX-735">
          <primary>Getz, Trevor</primary>
        </indexterm>Getz (<link linkend="b-9781474207300-ref517" role="bib">2015</link>), and Tracey Banivanua Mar (<link linkend="b-9781474207300-ref44" role="bib">2016</link>). An efflorescence of literature on the cultural and social interface between colonizer and colonized has demonstrated the means by which imperial projects were enacted on the ground, on the page, and in the mind. This revolutionized understanding of how empire functioned has been accompanied by a corresponding revolution in understanding of resistance to it (<link linkend="b-9781474207300-ref533" role="bib">Taylor 2002</link>; <link linkend="b-9781474207300-ref444" role="bib">Pannikar 2009</link>).</para>
<para xml:id="b-9781474207300-849">The relevant chronology has been extended further back than the once orthodox focus of the 1940s to 1960s, revealing traditions of resistance, cultural and social, that were continuous. Older classifications of “primary” resistance, occurring around the time of conquest, and “secondary” resistance, proximate to independence, have been supplanted by a complex picture of ongoing contestations of imperial control which varied in intensity, quality, and scale. Whether it was the passive resistance of a sluggish work rhythm or the withdrawal into traditional religious or social frameworks, resistance was not <?page value="156"?>
        <indexterm class="singular" xml:id="b-9781474207300-IDX-500">
          <primary>Dubois, W.E.B.</primary>
        </indexterm>only dynamic. Thus, resistance itself has become a more capacious and nuanced category—including phenomena less conspicuous than the intuitive examples of mass protest and outright insurrection (<link linkend="b-9781474207300-ref488" role="bib">Sharpe 1989</link>; <link linkend="b-9781474207300-ref532" role="bib">Taussig 1993</link>; <link linkend="b-9781474207300-ref33" role="bib">Bahba 1994</link>; <link linkend="b-9781474207300-ref590" role="bib">Wolski 2001</link>: 216–36). Greater understanding of the role of women and a gendered frame of analysis has refurbished the staid and partial pantheon of masculine anticolonial actors and archetypally masculinist actions (<link linkend="b-9781474207300-ref116" role="bib">Chatterjee 1989</link>: 662–83; <link linkend="b-9781474207300-ref117" role="bib">Chaudhuri and Strobel 1992</link>; <link linkend="b-9781474207300-ref497" role="bib">Sinha 1995</link>, <link linkend="b-9781474207300-ref498" role="bib">2006</link>; <link linkend="b-9781474207300-ref150" role="bib">Cooper 2009</link>: 129–45; <link linkend="b-9781474207300-ref70" role="bib">Boittin 2010</link>). A more expansive map of the sites of resistance has also been cultivated, with the international and transnational connections between anticolonial movements among the most vibrant areas of study (<link linkend="b-9781474207300-ref439" role="bib">Paisley 2012</link>; <link linkend="b-9781474207300-ref106" role="bib">Carey and Lydon 2014</link>; <link linkend="b-9781474207300-ref390" role="bib">Manjapra 2014</link>; <link linkend="b-9781474207300-ref235" role="bib">Goebel 2015</link>: 1–21). Finally, the purpose of resistance has been broadened away from narrow nationalist ambitions. Resisting imperial injustice did not automatically entail a wholesale pursuit of independence. Nation-states were often an anomalous and poor fitting schema for peoples and territories fighting colonial abuses (<link linkend="b-9781474207300-ref370" role="bib">Lorcin and Shepard 2016</link>). Embracing empire, and resisting instead its hypocrisies and harms, both cultural and political, was an orientation adopted by a number of movements, and retained well into the peak years of decolonization between 1950 and 1960.</para>
<section xml:id="b-9781474207300-850">
<info xml:id="b-9781474207300-851">
<title xml:id="b-9781474207300-852">Rights, Reformism, and Revolution: Varieties of Opposition to Empire</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-853">No single mode of resistance defined the twentieth-century’s anticolonialisms. Even within the arc of a single (and singular) career, that of the legendary W.E.B. Du Bois, plural frameworks for understanding empire’s abuses, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1557">
            <primary>racism</primary>
          </indexterm>racism that attended them, were pursued. Du Bois, for instance, pioneered international solidarity movements, organized around the shared global experience of empire’s oppression in the general case; more materialist and Marxian influenced <indexterm class="singular" xml:id="b-9781474207300-IDX-113">
            <primary>anti-imperialism</primary>
          </indexterm>anti-imperialism; conventional, collective national self-determination, and racialized anti-imperial internationalism, in several iterations of <indexterm class="singular" xml:id="b-9781474207300-IDX-1475">
            <primary>Pan-Africanism</primary>
          </indexterm>Pan-Africanism. Throughout his life, his command of the interior resistance to racism, or “mental colonization,” and the scope of forums provided by culture and everyday praxis, was never absent. In the mid-century, Du Bois experimented with institutional mechanisms for reform in legal initiatives, including a brief but striking effort to hold the newly formed <indexterm class="singular" xml:id="b-9781474207300-IDX-1884">
            <primary>United Nations</primary>
          </indexterm>United Nations to its loudly proclaimed promises of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-894">
            <primary>human rights</primary>
          </indexterm>human rights. It typified not only his ecumenical and agile contestation of empire, but a larger innovation that intersected and reshaped much of anticolonialism in the postwar period (<link linkend="b-9781474207300-fig7_1" role="figure">Figure 7.1</link>).</para>
<para xml:id="b-9781474207300-854">The transformational middle decades of a century of anticolonial resistance were coincident with the institutionalization of human rights as a <indexterm class="endofrange" startref="b-9781474207300-IDX-2032" xml:id="b-9781474207300-IDX-end216"/>notionally <?page value="157"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure7_1"/>universal norm for everyone—an epoch which began with the adoption of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1959">
            <primary>Universal Declaration of Human Rights, UDHR</primary>
          </indexterm>Universal Declaration of Human Rights (UDHR) in December 1948. Both crusades crossed and informed each other—sitting firmly in alignment for a period, and then diverging drastically in the 1970s. In the 1940s, human rights arrived as one of the default languages for expressing resistance to colonial rule, and calling into question the cultural conceits of the “civilizing” project of the imperialists. Established as the ascendant moral lingua franca of the world, and one proclaimed (albeit with hesitation) by the imperial powers, human rights critique afforded ample capacity for destroying European claims to humane rule. Empire rested on a presumption, the supremacy of one peoples over another, which was flatly incompatible with the most fundamental precept of Article 1 of the UDHR, a sweeping statement of human equality. Colonial administration violated, at best episodically, at worst grossly and systematically, almost every one of the provisions that followed: on freedoms of movement, assembly, association, expression, conscience, fair justice, and political participation. It failed dismally on economic and social rights—sustenance, <indexterm class="singular" xml:id="b-9781474207300-IDX-519">
            <primary>education</primary>
          </indexterm>education, health, welfare, <indexterm class="endofrange" startref="b-9781474207300-IDX-894" xml:id="b-9781474207300-IDX-end95"/>and <?page value="158"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-80">
            <primary>Algeria</primary>
            <secondary>War of Independence</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-783">
            <primary>Great Britain</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1925">
            <primary>United States</primary>
          </indexterm>housing—the very substance of “civilization” which liberal colonial development purported to advance as its primary purpose.</para>
<figure label="7.1" xlink:href="b-9781474207300-figure7_1" xlink:role="objectPointer" xml:id="b-9781474207300-fig7_1">
<info xml:id="b-9781474207300-855">
<title xml:id="b-9781474207300-856">Dr W.E.B. DuBois of the United States, after his speech before the World Congress of Partisans of Peace in Paris. Credit: Bettmann/CORBIS/Bettmann Archive.</title>
</info>
<mediaobject xml:id="b-9781474207300-857">
<imageobject xml:id="b-9781474207300-858">
<imagedata align="center" fileref="images/fig7_1.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-860">This rights-based critique of imperialism had a deeper lineage in the liberal nationalist tradition, but its post–1945 revision was a meaningful shift insofar as individual rights were established as a legitimate, explicitly universal, aspiration. Although the romantic and liberal nationalist creeds of the two preceding centuries did have a significant international component, and did pretend to universal application, they lacked the formalized codification that attended the modern refurbishment of human rights. Rejecting human rights standards on grounds of race, or its coded interwar equivalent, “backwardness of civilization,” was, accordingly, a less viable option for imperial administrations.</para>
<para xml:id="b-9781474207300-861">While human rights was a powerful shaping language for resistance, both cultural and political, it remains clear that throughout the twentieth century, <indexterm class="singular" xml:id="b-9781474207300-IDX-1339">
            <primary>nationalism</primary>
          </indexterm>nationalism in a <emphasis role="italic">collective</emphasis> sense was the dominant mode of anticolonial struggle, and some species of social democracy were the preferred model for a postcolonial state (<link linkend="b-9781474207300-ref11" role="bib">Afshari 2007</link>; <link linkend="b-9781474207300-ref417" role="bib">Moyn 2010</link>; <link linkend="b-9781474207300-ref340" role="bib">Klose 2013</link>). By the end of 1950, the existence of colonialism was itself being cast by many as a human rights violation outright, but one which abused whole nations, and not merely their constituent individuals. The only effective remedy was held to be national self-determination, which was written into the draft human rights covenant as the very first article. From Accra to Zanzibar, the genealogies drawn upon resided, broadly speaking, within traditions that dated to the foundational anti-imperial moment of 1776 (cf. <link linkend="b-9781474207300-ref81" role="bib">Breuilly 2013</link>: 1–20). Anticolonial leaders cast themselves as the heirs to a celebrated democratic nationalist canon, often quoting the heroes who defined an emancipatory heritage the West had claimed as its own. Animated by the same spirit that had inhabited Thomas <indexterm class="singular" xml:id="b-9781474207300-IDX-1060">
            <primary>Jefferson, Thomas</primary>
          </indexterm>Jefferson and Giuseppe <indexterm class="singular" xml:id="b-9781474207300-IDX-1254">
            <primary>Mazzini, Giuseppe</primary>
          </indexterm>Mazzini, African, Asian, Oceanic, and Arab struggles were, at least to liberal opinion, both comprehensible and legitimate (<link linkend="b-9781474207300-ref192" role="bib">Emerson 1962</link>: 222–4).</para>
<para xml:id="b-9781474207300-862">The eventual success of these nationalist campaigns was the product of incremental reform, wholesale revolution, and, in some cases, sustained armed rebellion. Typically, each of these elements was interlaced in a chaotic dialogue of indigenous resistance and imperial reluctance—and only rarely unfolding according to a systematized plan. In the main, a greater role for reformist gradualism was the pattern exemplified by the closing decade of US administration in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1504">
            <primary>Philippines</primary>
          </indexterm>Philippines in the 1940s, the British in south Asia and parts of Africa in the 1940s through the early 1960s, and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-627">
            <primary>France</primary>
          </indexterm>France in some of its African territories. By contrast, revolution—often involving immensely bloody and protracted insurgencies—was the primary driver in Algeria, <indexterm class="singular" xml:id="b-9781474207300-IDX-1087">
            <primary>Kenya</primary>
          </indexterm>Kenya, <indexterm class="singular" xml:id="b-9781474207300-IDX-981">
            <primary>Indonesia</primary>
          </indexterm>Indonesia, and French <indexterm class="startofrange" xml:id="b-9781474207300-IDX-970">
            <primary>Indochina</primary>
          </indexterm>Indochina across the 1940s and 1950s, and much of southern Africa across the 1960s through the 1990s.</para>
<para xml:id="b-9781474207300-863">At the sharpest edge of these revolutions, the whole notion of resistance was reconceived beyond the accession to sovereignty. The pioneer of this new kind of <?page value="159"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-695">
            <primary>
              <emphasis role="italic">Front National de Libération</emphasis>, FLN</primary>
          </indexterm>revolutionary resistance, the Algerian National Liberation Front (FLN), pressed the case for a more total vision of “national liberation”; a liberation not just from the political yoke of the French but also from its cultural impositions and anti-Islamic practices. After a decade of ever-escalating imperial violence and dilatory promises, Algerian nationalist ideologues, along with a chorus of European disciples, evangelized a bloodier campaign against empire (<link linkend="b-9781474207300-ref259" role="bib">Hamon and Rotman 1979</link>; <link linkend="b-9781474207300-ref114" role="bib">Charby 2004</link>; <link linkend="b-9781474207300-ref100" role="bib">Byrne 2016</link>). Famously articulated by Frantz <indexterm class="singular" xml:id="b-9781474207300-IDX-582">
            <primary>Fanon, Frantz</primary>
          </indexterm>Fanon in his exceptionally influential <emphasis role="italic">Wretched of the Earth</emphasis> ([1961] 2004), and amplified by a militant foreword from Jean Paul <indexterm class="singular" xml:id="b-9781474207300-IDX-1626">
            <primary>Sartre, Jean-Paul</primary>
          </indexterm>Sartre, the cleavage between colonizer and colonized was cast as total. Even Albert <indexterm class="singular" xml:id="b-9781474207300-IDX-298">
            <primary>Camus, Albert</primary>
          </indexterm>Camus, caught between the Syclla and Charybdis of cultural and political tensions of decolonization, was unable to promote his <emphasis role="italic">trêve civil</emphasis> and ended a temporary cultural pariah in France. Along with the insurgency in French Indochina, which won its first major success in May 1954, Algeria’s revolution set anticolonialism in a new key—less liberal, less consensual, and much more maximalist in how the conflict was conceived. Pioneering early work from Alistair <indexterm class="singular" xml:id="b-9781474207300-IDX-887">
            <primary>Horne, Alistair</primary>
          </indexterm>Horne (<link linkend="b-9781474207300-ref283" role="bib">1977</link>) revealed the depth of polarization, and the brutality and complexity of the Algerian conflict (<link linkend="b-9781474207300-ref535" role="bib">Thénault 2011</link>)—and its international repercussions (<link linkend="b-9781474207300-ref142" role="bib">Connelly 2002</link>: 1–17, 276–85). Numerous successor struggles, and a veritable generation of western European and American intellectuals, would be inspired by the cultural and political creeds of Algiers, extending the particular nationalist resistance in <indexterm class="singular" xml:id="b-9781474207300-IDX-1411">
            <primary>North Africa</primary>
          </indexterm>North Africa to a world-spanning revolutionary cause. Militant anticolonial nationalism, whether political or culturally anchored merely in ideology, became, strangely, a transnational movement. Its icons, Regis <indexterm class="singular" xml:id="b-9781474207300-IDX-459">
            <primary>Debray, Regis</primary>
          </indexterm>Debray, Amilcar <indexterm class="singular" xml:id="b-9781474207300-IDX-287">
            <primary>Cabral, Amilcar</primary>
          </indexterm>Cabral, Samora <indexterm class="singular" xml:id="b-9781474207300-IDX-1193">
            <primary>Machel, Samora</primary>
          </indexterm>Machel, Ho Chi <indexterm class="singular" xml:id="b-9781474207300-IDX-1285">
            <primary>Minh, Ho Chi</primary>
          </indexterm>Minh, Leila <indexterm class="singular" xml:id="b-9781474207300-IDX-1098">
            <primary>Khaled, Leila</primary>
          </indexterm>Khaled, and—above all others—Che <indexterm class="singular" xml:id="b-9781474207300-IDX-837">
            <primary>Guevara, Che</primary>
          </indexterm>Guevara, would adorn university halls and inhabit student hearts across both West and South (<link linkend="b-9781474207300-fig7_2" role="figure">Figure 7.2</link>).</para>
<para xml:id="b-9781474207300-864">If sovereignty in the form of independent statehood, acquired either through reformism and non-violent mobilization, or revolutionary violence, ultimately outcompeted alternative avenues, it was by no means the inevitable course. In a substantial swathe of territories, most strikingly across <indexterm class="singular" xml:id="b-9781474207300-IDX-24">
            <primary>Africa</primary>
            <secondary>francophone</secondary>
          </indexterm>Francophone Africa, a democratic reformation carried within empire was a credible alternative, sincerely pursued by local freedom movements (<link linkend="b-9781474207300-ref585" role="bib">Wilder 2015</link>; <link linkend="b-9781474207300-ref518" role="bib">Stromberg Childers 2016</link>). New imperial federations were sketched out, with assurances of genuine cultural and economic solidarity, equality, and regional autonomy. Such architectures of colonial freedom within empire never eventuated, but for those which envisaged them, almost as often African leaders as French metropolitan politicians, their failure was not celebrated—freedom and equality within empire was a goal, not a consolation (<link linkend="b-9781474207300-ref147" role="bib">Cooper 2008</link>: 168). The contours of this vision were set out in the <indexterm class="singular" xml:id="b-9781474207300-IDX-250">
            <primary>Brazzaville Declaration</primary>
          </indexterm>Brazzaville Declaration, which was concluded by Free French leader Charles <indexterm class="singular" xml:id="b-9781474207300-IDX-455">
            <primary>de Gaulle, Charles</primary>
          </indexterm>de Gaulle in January 1944.</para>
<para xml:id="b-9781474207300-865">Although the Brazzaville text ultimately found vastly less influence than the earlier nationalist touchstone, the 1941 <indexterm class="singular" xml:id="b-9781474207300-IDX-148">
            <primary>Atlantic Charter</primary>
          </indexterm>Atlantic Charter, its federalist <indexterm class="endofrange" startref="b-9781474207300-IDX-627" xml:id="b-9781474207300-IDX-end58"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-970" xml:id="b-9781474207300-IDX-end101"/>sentiment <?page value="160"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure7_2"/>did hold meaning for many (cf. <link linkend="b-9781474207300-ref313" role="bib">Jennings 2015</link>: 250–2). Two of the most eminent figures in African literature and philosophy, Aimé <indexterm class="singular" xml:id="b-9781474207300-IDX-332">
            <primary>Césaire, Aimé</primary>
          </indexterm>Césaire and Leopold <indexterm class="singular" xml:id="b-9781474207300-IDX-1641">
            <primary>Senghor, Léopold Sédar</primary>
          </indexterm>Senghor, were not, initially, nationalists in the conventional sense—much as they abhorred French oppression, and the perennial hypocrisy of French professions of liberty, equality, and solidarity. With its diminished emphasis on independent statehood as the prime means for emancipation, indigenous activists and politicians who engaged with these schemes (or proposed their own) often grasped a wider set of means for redress against imperial injustice (<link linkend="b-9781474207300-ref148" role="bib">Cooper 2014</link>).</para>
<figure label="7.2" xlink:href="b-9781474207300-figure7_2" xlink:role="objectPointer" xml:id="b-9781474207300-fig7_2">
<info xml:id="b-9781474207300-866">
<title xml:id="b-9781474207300-867">Vietminh poster celebrating the victory of Dien Bien Phu. Credit: Photo by Apic/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-868">
<imageobject xml:id="b-9781474207300-869">
<imagedata align="center" fileref="images/fig7_2.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-871">Across this chapter, the creed of anticolonial nationalism will constitute the dominant strand of opposition to empire, but it is not taken as the highest expression of resistance. Given the depth of its influence and impact, anticolonial nationalism is inescapably prominent in any narrative of twentieth-century resistance—yet <indexterm class="singular" xml:id="b-9781474207300-IDX-1703">
            <primary>sovereignty</primary>
          </indexterm>sovereignty in the form of statehood proved an insufficient remedy to the lasting sequelae of colonization. By the late 1970s, sovereignty <?page value="161"?>itself, which had been so hard fought, and so recently won, was increasingly showing its limits for every state. The cumulative harm of empire had not been ameliorated, but statehood—the purported means for addressing it was receding from its peak moment of power. There would be no elegant resolution to empire’s miserable legacy. The triumph of independence was a waypoint, a fractional increment of successful resistance, one which more often revealed the extent of the injuries, and compelled the pursuit of a constellation of alternative means of opposition.</para>
</section>
<section xml:id="b-9781474207300-872">
<info xml:id="b-9781474207300-873">
<title xml:id="b-9781474207300-874">The Disappointments of the “Wilsonian Moment”: Interwar Resistance to Empire</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-875">As the first apocalyptic slaughter of the industrial age drew to its close in November 1918, the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2064">
            <primary>World War I</primary>
          </indexterm>world that would emerge from the First World War seemed to hold considerable promise for those arrayed against imperialism. With <indexterm class="singular" xml:id="b-9781474207300-IDX-784">
            <primary>Great Britain</primary>
          </indexterm>Britain and <indexterm class="singular" xml:id="b-9781474207300-IDX-628">
            <primary>France</primary>
          </indexterm>France, the two foremost western European empires, deeply shaken by the scale of both mobilization and destruction, the prospect of a radically reordered world seemed certain (<link linkend="b-9781474207300-ref229" role="bib">Gerwarth and Manela 2014a</link>: 786–800). US President Woodrow <indexterm class="singular" xml:id="b-9781474207300-IDX-2026">
            <primary>Wilson, Woodrow</primary>
          </indexterm>Wilson ascended as the new global architect, with a vision which looked, initially, like a promise of nation-states for the world’s peoples and with it, a repossession of their culture and politics. Wilson’s exaltation of self-determination as a privileged principle rallied a wave of anti-imperial claims, and promptly disappointed virtually all of them (<link linkend="b-9781474207300-ref388" role="bib">Manela 2007</link>: 3–37, 197–226). Ultimately, the 1919 <indexterm class="singular" xml:id="b-9781474207300-IDX-1481">
            <primary>Paris Peace Conference (1919)</primary>
          </indexterm>Paris Peace Conference offered half-measures and accommodation for Britain, France, <indexterm class="singular" xml:id="b-9781474207300-IDX-212">
            <primary>Belgium</primary>
          </indexterm>Belgium, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1368">
            <primary>Netherlands</primary>
          </indexterm>Netherlands. At best, the new <indexterm class="singular" xml:id="b-9781474207300-IDX-1156">
            <primary>League of Nations</primary>
          </indexterm>League of Nations system promised mild scope to hold the administering powers to account in some limited set of territories, via the <indexterm class="singular" xml:id="b-9781474207300-IDX-1494">
            <primary>Permanent Mandates Commission</primary>
          </indexterm>Permanent Mandates Commission.</para>
<para xml:id="b-9781474207300-876">Despite the manifest disappointments of 1919, the frayed hold of empire was tested during the interwar years. Even if equality of citizenship or national independence seemed barely any closer than they had been in 1913, more assertive forms of resistance contested European power, and more confident arguments hammered relentlessly against imperial claims across the second-half of the 1920s and 1930s. For the subset of territories overseen as Mandates, there was now a permanent forum for interrogating imperial practice. Weak and ritualized as it was, the requirement to respond to dissent in an international forum was unprecedented (<link linkend="b-9781474207300-ref451" role="bib">Pedersen 2015</link>: 44–76; <link linkend="b-9781474207300-ref580" role="bib">Wheatley 2015</link>: 205–48). Colonized peoples could seek to have their claims heard, and in a handful of cases, even speak back to the dissembling French, British, and Australian legations in Geneva.</para>
<para xml:id="b-9781474207300-877">If the Mandates system was symbolically potent, it was mostly ineffectual outside its native habitat in the Palais des Nations. Less easily dismissed with <?page value="162"?>diplomatic élan and procedural obfuscation was the surging resistance on the ground. In the December 1921 settlement of a bloody civil war, a large section of <indexterm class="singular" xml:id="b-9781474207300-IDX-1020">
            <primary>Ireland</primary>
          </indexterm>Ireland won its independence—the Irish nation’s first large-scale success against English rule since the age of the Tudors. <indexterm class="singular" xml:id="b-9781474207300-IDX-524">
            <primary>Egypt</primary>
          </indexterm>Egypt negotiated improved autonomy, and a formalistic independence from Britain in 1922. Across Africa and the Arab world, local strikes, tax revolts, and insurrections unfolded in staccato fashion; never reaching the threshold for genuine crisis, but disproving the secure equilibrium that professionalized colonial administration had posited (<link linkend="b-9781474207300-ref96" role="bib">Bush 1999</link>; <link linkend="b-9781474207300-ref165" role="bib">Derrick 2008</link>). <indexterm class="singular" xml:id="b-9781474207300-IDX-547">
            <primary>Ethiopia</primary>
          </indexterm>Ethiopia, never colonized, fought valiantly against the first expansionistic outbreak of interwar <indexterm class="singular" xml:id="b-9781474207300-IDX-590">
            <primary>fascism</primary>
          </indexterm>Fascism—winning worldwide sympathy as it withstood the onslaught of Italian dictator Benito <indexterm class="singular" xml:id="b-9781474207300-IDX-1325">
            <primary>Mussolini, Benito</primary>
          </indexterm>Mussolini, a campaign that was notorious even in the 1930s for its use of chemical weapons.</para>
<para xml:id="b-9781474207300-878">Although Ethiopia unmasked the rising brutality of a new kind of fascist empire, with its cultural and political impositions, <indexterm class="singular" xml:id="b-9781474207300-IDX-932">
            <primary>India</primary>
          </indexterm>India was the epicenter for a renewed contestation of the fundamental claims of imperialism. Wartime repressions and extractions, which crystallized in the extraordinarily broad authoritarian license enacted through the 1915 <indexterm class="singular" xml:id="b-9781474207300-IDX-473">
            <primary>Defense of India Act (1915)</primary>
          </indexterm>Defense of India Act and the murderous brutality from British authorities at Amritsar, were indicative that whatever was agreed at Whitehall would now be tested by the people of India. Resistance flourished in the interwar milieu. Indian nationalists were provoked by the twin imperial impulses—crackdown and prophylactic concession. The former, the impulse to intensified repression, was abundant in the 1919 <indexterm class="singular" xml:id="b-9781474207300-IDX-97">
            <primary>Anarchical and Revolutionary Crimes Act (1919)</primary>
          </indexterm>Anarchical and Revolutionary Crimes Act; the latter, grudging professions of reform, was threadbare but visible in the 1919 <indexterm class="singular" xml:id="b-9781474207300-IDX-762">
            <primary>Government of India Act (1919)</primary>
          </indexterm>Government of India Act.</para>
<para xml:id="b-9781474207300-879">Amidst the reconfigured conditions of the interwar years, India’s resistance began to break out of the grooves which had limited its transformative effect for over a century. <indexterm class="startofrange" xml:id="b-9781474207300-IDX-706">
            <primary>Gandhi, Mahatma</primary>
          </indexterm>Gandhi, who had already built a career in leading local movements for justice against exploitation in <indexterm class="singular" xml:id="b-9781474207300-IDX-1689">
            <primary>South Africa</primary>
          </indexterm>South Africa before the First World War, served to catalyze successful campaigns against crushing taxation assessments in 1918. Navigating a new path of resistance, which refurbished the tired political armamentarium of the <indexterm class="singular" xml:id="b-9781474207300-IDX-953">
            <primary>Indian National Congress</primary>
          </indexterm>Indian National Congress, while simultaneously eschewing sporadic popular insurrectionism that followed the April 1919 massacre, Gandhi inaugurated a qualitatively different campaign against empire. Working at the level of community activation, with its emphasis on local cultural traditions, as opposed to elite political negotiation, Gandhi proposed techniques which embedded the practices of national resistance into the everyday individual cultural and economic actions and outlook of India’s peoples. More than dissent, Gandhian practice furnished the capacity to enact forms of daily practice that transcended empire’s cultural, political, and economic tendrils.</para>
<para xml:id="b-9781474207300-880">The measures he popularized constructed sub-state domains of independence—a sovereignty of spirit and personal industry beyond empire’s reach. Traditional fabric production decoupled those who practiced it from <?page value="163"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2074">
            <primary>World War II</primary>
          </indexterm>imperial trade networks, a measure so successful it remains the centerpiece of the Indian national flag. <indexterm class="singular" xml:id="b-9781474207300-IDX-1617">
            <primary>salt</primary>
          </indexterm>Salt production evaded empire’s mercantilist hand, and delivered independence of supply in a vital commodity—while simultaneously opening an opportunity for communal solidarity and purposive mobilization of traditional cultural practices. Bodily agency and corporeal sovereignty, typified by hunger strike, carved out the most elemental sphere of independence and personal autonomy. As a powerful means for communicating resolve without extrinsic violence, the hunger strike was a technique that had been used adeptly by suffragists in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-785">
            <primary>Great Britain</primary>
          </indexterm>Britain, and, later and controversially, by imprisoned <indexterm class="singular" xml:id="b-9781474207300-IDX-1022">
            <primary>Irish Republican Army, IRA</primary>
          </indexterm>Irish Republican Army cadres in their campaigns for Northern Irish sovereignty in the 1980s. For Gandhi, while never the mainstay option, it was a recourse that often held potency, particularly at key moments when the grander cause was <emphasis role="italic">in extremis</emphasis>. By 1930, the risk these new isomers of resistance posed was abundantly clear to the British authorities, who struggled to craft a response from the standard set of repressive tools.</para>
</section>
<section xml:id="b-9781474207300-881">
<info xml:id="b-9781474207300-882">
<title xml:id="b-9781474207300-883">“A World Made New”? The Anti-Imperial Foundations of the Postwar Globe</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-884">Where the First World War had strained, transiently, the fabric of imperial control, the Second World War precipitated the terminal crisis of Western empires. If their complete disintegration was not necessarily inevitable, radical alteration in some form was inescapable. The postwar <indexterm class="singular" xml:id="b-9781474207300-IDX-1926">
            <primary>United States</primary>
          </indexterm>United States, now the unquestioned hegemon, was ill-disposed to the persistence of European empire. Its principal rival, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1711">
            <primary>Soviet Union</primary>
          </indexterm>Soviet Union, had been reliably hostile to western imperialism since its birth as an organized state in the 1920s, and devoted much of its international policy to anticolonial agitation and providing many anticolonial movements in the colonies with an ideological springboard. The blueprints for the new postwar world, set down in the <indexterm class="singular" xml:id="b-9781474207300-IDX-149">
            <primary>Atlantic Charter</primary>
          </indexterm>Atlantic Charter, intra-war Allied communiqués, and the establishment of planning meetings for the <indexterm class="singular" xml:id="b-9781474207300-IDX-1885">
            <primary>United Nations</primary>
          </indexterm>United Nations Organization, all tilted the globe away from empire (<link linkend="b-9781474207300-ref75" role="bib">Borgwardt 2005</link>: 14–86). In the 1945 United Nations Charter, the assumed pattern for world organization was the sovereign state—whatever permission existed for empire was in ellipsis, namely, the absence of explicit condemnation. Racial equality, which had been rejected, even in a problematically constrained form, when proposed in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1157">
            <primary>League of Nations</primary>
          </indexterm>League of Nations Covenant, was now a bedrock principle. <indexterm class="singular" xml:id="b-9781474207300-IDX-895">
            <primary>human rights</primary>
          </indexterm>Human rights, their content as yet undefined, were a notional peer to the highest priorities of the new system, alongside sovereignty, peace, and collective security. A dedicated <indexterm class="singular" xml:id="b-9781474207300-IDX-1856">
            <primary>Trusteeship Council</primary>
          </indexterm>Trusteeship Council, successor to the Mandates Commission, was augmented—and less likely to allow the cozy ententes and easy evasions of the 1920s (<link linkend="b-9781474207300-ref251" role="bib">Haas 1967</link>: 292–300). At a grand political and ideological level, the currents of the world no longer ran with <indexterm class="endofrange" startref="b-9781474207300-IDX-706" xml:id="b-9781474207300-IDX-end64"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2064" xml:id="b-9781474207300-IDX-end226"/>empire.</para>
<?page value="164"?>
<para xml:id="b-9781474207300-885">In the immediate postwar years of the late 1940s and early 1950s, conditions for the major imperial powers were austere in the metropole, and often disastrous in those territories in which they were seeking to reestablish control. Dramatic defeats in the Asia-Pacific and <indexterm class="singular" xml:id="b-9781474207300-IDX-1412">
            <primary>North Africa</primary>
          </indexterm>North Africa demonstrated the vulnerability of western armies. Britain’s catastrophic and precipitous defeats in south-east Asia, exemplified by the fall of <indexterm class="singular" xml:id="b-9781474207300-IDX-1665">
            <primary>Singapore</primary>
          </indexterm>Singapore in 1941, shattered any illusion as to white martial and cultural supremacy. So, too, the near wholesale destruction of <indexterm class="singular" xml:id="b-9781474207300-IDX-163">
            <primary>Australia</primary>
          </indexterm>Australia’s air defenses by the technologically superior Mitsubishi Zero, an aircraft that was much more advanced than its western counterpart. The complex and superbly executed surprise attack at <indexterm class="singular" xml:id="b-9781474207300-IDX-1489">
            <primary>Pearl Harbor</primary>
          </indexterm>Pearl Harbor completed a year of unhalted Japanese <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1058">
            <primary>Japan</primary>
            <secondary>military</secondary>
          </indexterm>military triumph. Its cumulative impact vastly exceeded the only major precedent, <indexterm class="singular" xml:id="b-9781474207300-IDX-1054">
            <primary>Japan</primary>
          </indexterm>Japan’s victory over the Russian Imperial <indexterm class="singular" xml:id="b-9781474207300-IDX-1602">
            <primary>Russia</primary>
            <secondary>navy</secondary>
          </indexterm>Navy earlier in the century. The attitudinal consequence of these defeats was compounded in the Pacific theater, as they had been inflicted by a non-European military, and one which proselytized its own self-serving Pan-Asian vision in an attempt to coopt local peoples. The cultural superiority, as expressed by attitudes to “inferior” races, was thus seriously undermined. The Axis-supported <indexterm class="singular" xml:id="b-9781474207300-IDX-955">
            <primary>Indian National Liberation Army</primary>
          </indexterm>Indian National Liberation Army, and Indonesian nationalist groups, gained military and organizational capacity as a direct consequence of the war.</para>
<para xml:id="b-9781474207300-886">In those colonial territories which the western allies managed to hold against the Axis, urgent imperial demand for resources produced chaotic mobilization and local capacity-building. Desperation produced disinhibition, and opened a window for coercing concessions—not least in <indexterm class="singular" xml:id="b-9781474207300-IDX-933">
            <primary>India</primary>
          </indexterm>India, where the war marked the final spasm of British repression: the setting for a dynamic mixture of uneasy cooperation against Fascism, hastily expedited initiatives on imperial reform, and continent-wide activism and rebellion (<link linkend="b-9781474207300-ref333" role="bib">Khan 2015</link>). The August 1942 <indexterm class="singular" xml:id="b-9781474207300-IDX-1547">
            <primary>Quit India Campaign (1942)</primary>
          </indexterm>Quit India campaign, which inaugurated almost population-scale mass resistance and non-cooperation, was the flagship case—one well addressed in the magisterial study of Francis <indexterm class="singular" xml:id="b-9781474207300-IDX-904">
            <primary>Hutchins, Francis</primary>
          </indexterm>Hutchins (<link linkend="b-9781474207300-ref289" role="bib">1973</link>). Despite engaging all of its repressive apparatus, with over 100,000 imprisoned, and the entirety of the <indexterm class="singular" xml:id="b-9781474207300-IDX-954">
            <primary>Indian National Congress</primary>
          </indexterm>Indian National Congress jailed, the British authorities, already at the outer limits of capacity, had little prospect of maintaining the status quo.</para>
<para xml:id="b-9781474207300-887">Above all, the scale of disruption, and the existential quality of the struggle against the Axis, had revealed that even those cultural structures and systems of power which seemed impervious to change could be brought to crisis. <indexterm class="singular" xml:id="b-9781474207300-IDX-982">
            <primary>Indonesia</primary>
          </indexterm>Indonesia’s independence movement was among the first successes—from March 1942 to December 1949, it traversed the distance from precarious and persecuted dissident movement to presidency and parliament. Seizing on the circumstances opened by Japan’s invasion of the archipelago, and an ideological framework that drew on multiple threads of anticolonial thought, pragmatically weaved by Ahmed <indexterm class="singular" xml:id="b-9781474207300-IDX-1759">
            <primary>Sukarno, Ahmed</primary>
          </indexterm>Sukarno, resistance transitioned from cultural and political dissent to full-scale systems of parallel government. Fellow nationalist <indexterm class="endofrange" startref="b-9781474207300-IDX-785" xml:id="b-9781474207300-IDX-end80"/>leader, <?page value="165"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1369">
            <primary>Netherlands</primary>
          </indexterm>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1960">
            <primary>Universal Declaration of Human Rights, UDHR</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-2075">
            <primary>World War II</primary>
          </indexterm>Mohammed <indexterm class="singular" xml:id="b-9781474207300-IDX-857">
            <primary>Hatta, Mohammed</primary>
          </indexterm>Hatta, arguably the co-equal founder of the new Indonesian nation, having experienced Dutch colonialism and Japanese militarism, became an ardent champion of a different course: an Indonesian state, with its citizens protected by the individual freedoms enumerated in the 1948 UDHR (<link linkend="b-9781474207300-ref267" role="bib">Hatta 1960</link>; see also <link linkend="b-9781474207300-ref203" role="bib">Feith and Castles 1970</link>).</para>
</section>
<section xml:id="b-9781474207300-888">
<info xml:id="b-9781474207300-889">
<title xml:id="b-9781474207300-890">The Zenith of Anticolonial Resistance: A World Against Empire, 1945–60</title>
<itermset xml:id="b-9781474207300-IDX-see19">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-806">
              <primary>Great Britain</primary>
              <secondary>empire</secondary>
            </indexterm>
          </itermset>
</info>
<para role="fullOut" xml:id="b-9781474207300-891">While there were innumerable moments and planes of resistance well before 1945, the peak years of successful contestation of imperial control were concentrated into the two decades that followed the Second World War. In three years alone, a major swathe of the world’s colonized population won <indexterm class="singular" xml:id="b-9781474207300-IDX-943">
            <primary>India</primary>
            <secondary>independence</secondary>
          </indexterm>independence, principally in Asia and the Arab world: <indexterm class="singular" xml:id="b-9781474207300-IDX-1777">
            <primary>Syria</primary>
          </indexterm>Syria and <indexterm class="singular" xml:id="b-9781474207300-IDX-1160">
            <primary>Lebanon</primary>
          </indexterm>Lebanon in October 1945, the <indexterm class="singular" xml:id="b-9781474207300-IDX-1505">
            <primary>Philippines</primary>
          </indexterm>Philippines in July 1946, <indexterm class="singular" xml:id="b-9781474207300-IDX-280">
            <primary>Burma</primary>
          </indexterm>Burma (Myanmar) and Ceylon (<indexterm class="singular" xml:id="b-9781474207300-IDX-1728">
            <primary>Sri Lanka</primary>
          </indexterm>Sri Lanka) in early 1948, and the <indexterm class="singular" xml:id="b-9781474207300-IDX-503">
            <primary>Dutch East Indies</primary>
          </indexterm>Dutch East Indies (Indonesia) in December 1949 (<link linkend="b-9781474207300-ref599" role="bib">Young 2001</link>: 159–316). The largest and most traumatic was the conjoined independence and <indexterm class="singular" xml:id="b-9781474207300-IDX-946">
            <primary>India</primary>
            <secondary>partition</secondary>
          </indexterm>partition of British India. Freedom from colonial rule was commingled with immense misery, with intercommunal violence and administrative chaos accompanying the birth of India and <indexterm class="singular" xml:id="b-9781474207300-IDX-1468">
            <primary>Pakistan</primary>
          </indexterm>Pakistan in August 1947. The differences of religious culture and practice, which were at the root of the decision to create a separate Muslim state, led to hundreds of thousands being killed, and still more displaced and injured. Although it heralded the cultural and political disintegration of the British Raj, it was also a demonstration that accession to statehood was not the end of colonially produced violence: imperial rule had lasting political and cultural sequelae, and was not elegantly unstitched, despite the eloquent use of “Partition.”</para>
<para xml:id="b-9781474207300-892">Africa’s surge to independence was concentrated in the decade between 1955 and 1965, with abbreviated transitions from outright imperial administration to full statehood (<link linkend="b-9781474207300-ref64" role="bib">Birmingham 1995</link>). The gradient was especially steep for the <indexterm class="singular" xml:id="b-9781474207300-IDX-206">
            <primary>Belgian Congo</primary>
          </indexterm>Belgian Congo, where the transfer of power in June 1960 was so precipitous and flawed that massive disorder ensued. International intervention, widespread violence, and a legacy of state incapacity demonstrated types of lingering damage that were frankly beyond effective resistance. Marginally less catastrophic was the resentful French withdrawal from <indexterm class="singular" xml:id="b-9781474207300-IDX-841">
            <primary>Guinea</primary>
          </indexterm>Guinea in October 1958. Incensed by the success of nationalist Ahmed Sékou <indexterm class="singular" xml:id="b-9781474207300-IDX-1827">
            <primary>Touré, Ahmed Sékou</primary>
          </indexterm>Touré and his <indexterm class="singular" xml:id="b-9781474207300-IDX-479">
            <primary>Democratic Party, PDG</primary>
          </indexterm>Democratic Party (PDG), who successfully carried a vote for independence, as opposed to autonomy within a greater <indexterm class="singular" xml:id="b-9781474207300-IDX-629">
            <primary>France</primary>
          </indexterm>France, thus administering a slap in the face to the “mother” country, the administration destroyed the territory’s infrastructure, including medical facilities. A capable political movement to resist French imperialism could win statehood, but could not resist the fury of a France culturally repudiated, or its immiserating material <indexterm class="endofrange" startref="b-9781474207300-IDX-1058" xml:id="b-9781474207300-IDX-end119"/>sequelae.</para>
<?page value="166"?>
<para xml:id="b-9781474207300-893">The mood of the anticolonial peak was captured at its midpoint, in the landmark April 1955 Asian-African Conference in Bandung, Indonesia. Assembling almost every nationalist hero, from Jawaharlal <indexterm class="singular" xml:id="b-9781474207300-IDX-1357">
            <primary>Nehru, Jawaharlal</primary>
          </indexterm>Nehru to Gamal Abdel <indexterm class="singular" xml:id="b-9781474207300-IDX-1332">
            <primary>Nasser, Gamal Abdel</primary>
          </indexterm>Nasser (<link linkend="b-9781474207300-fig7_3" role="figure">Figure 7.3</link>), Bandung was the crystallizing moment, when the first, relatively liberal phase of anticolonial nationalism reached its zenith (<link linkend="b-9781474207300-ref322" role="bib">Kahin 1956</link>: 3–28; Burton <link linkend="b-9781474207300-ref95" role="bib">
            <emphasis role="italic">et al.</emphasis> 2006</link>; see also <link linkend="b-9781474207300-ref596" role="bib">Wright, 1956</link>). Much mythologized as the birthplace of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1819">
            <primary>Third World</primary>
          </indexterm>Third World, the actual proceedings of the meeting were more fractious and cautious (<link linkend="b-9781474207300-ref567" role="bib">Vitalis 2013</link>: 261–6). Nevertheless, unalloyed opposition to empire, and the racial discrimination which subtended it, provided a unifying theme for the otherwise fissiparous assembly of nations. All twenty-nine delegations, while divided on much, were unanimous in their condemnation of colonialism “in all its manifestations” (<link linkend="b-9781474207300-ref29" role="bib">Asian-African Conference 1955</link>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-144">
            <primary>Asian-African Conference (1955)</primary>
          </indexterm>). Less prominent was the unanimous support for the 1948 UDHR, recognized as “a common standard of achievement for all peoples and all nations,” an indication of the optimistic, and democratic, disposition of anti-imperialism in the 1950s (<link linkend="b-9781474207300-ref91" role="bib">Burke 2006</link>: 961–5).</para>
<para xml:id="b-9781474207300-894">In retrospect, Bandung was an inflection point. The democratic, rights-oriented, anti-imperialism had crested, and receded into near oblivion by the late 1960s. The <indexterm class="singular" xml:id="b-9781474207300-IDX-896">
            <primary>human rights</primary>
          </indexterm>human rights dimension remained in recession until the <indexterm class="endofrange" startref="b-9781474207300-IDX-1960" xml:id="b-9781474207300-IDX-end208"/>revival <anchor role="objectPointer" xml:id="b-9781474207300-figure7_3"/>
          <?page value="167"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-81">
            <primary>Algeria</primary>
            <secondary>War of Independence</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-696">
            <primary>
              <emphasis role="italic">Front National de Libération</emphasis>, FLN</primary>
          </indexterm>of popular mobilizations in the 1980s and 1990s, this time, directed at casting out endogenous tyrants, or in the evocative phrase of the 1950s, “internal colonialism.” The spirit of the late 1940s and early 1950s persisted for a decade, acquiring the status of a global orthodoxy by the dawn of the 1960s. In December 1960, a General Assembly populated by newly independent states advanced the <indexterm class="singular" xml:id="b-9781474207300-IDX-460">
            <primary>Declaration on Colonialism (1960)</primary>
          </indexterm>Declaration on Colonialism. Proclaiming the sovereign state the default option for ordering the nations of the world, the Declaration was a breviary of Third World aspiration, largely drawn from the language and mood of the epochal Bandung Final Communiqué. A substantial set of Asian and African legations made a conscious attempt to place the Declaration within a universal, democratic tradition, and a kind of collectivist complement to the individual web of freedoms enunciated in the UHDR (<link linkend="b-9781474207300-ref92" role="bib">Burke 2010</link>: 35–58).</para>
<figure label="7.3" xlink:href="b-9781474207300-figure7_3" xlink:role="objectPointer" xml:id="b-9781474207300-fig7_3">
<info xml:id="b-9781474207300-895">
<title xml:id="b-9781474207300-896">Gamal Abdul Nasser of Egypt (center left) talking with Jawaharlal Nehru of India during the Bandung Conference. Credit: Howard Sochurek/The LIFE Picture Collection/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-897">
<imageobject xml:id="b-9781474207300-898">
<imagedata align="center" fileref="images/fig7_3.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-900">The gains achieved through predominantly non-violent strategies had forestalled any widespread embrace of revolutionary warfare for the first two decades of nationalist crusading. The two signal successes of the early phase of resistance, India’s <indexterm class="singular" xml:id="b-9781474207300-IDX-950">
            <primary>Indian Congress Party</primary>
          </indexterm>Congress Party and Ghana’s <indexterm class="singular" xml:id="b-9781474207300-IDX-422">
            <primary>Convention People’s Party (Ghana)</primary>
          </indexterm>Convention People’s Party, had relied on massive popular pressure. Yet, as the cases where non-violence failed began to mount across the 1950s and through 1960s, where mobilization had found an unrelenting escalation in repression, as opposed to reluctantly conceded reforms, philosophical choices which had been mostly deferred became inescapable.</para>
<para xml:id="b-9781474207300-901">The shift in the nature of anticolonial techniques was, in substantial part, determined by the nature of the colonial regimes they were arrayed against, and in particular, the presence and intransigence of a <indexterm class="singular" xml:id="b-9781474207300-IDX-1091">
            <primary>Kenya</primary>
            <secondary>settlers</secondary>
          </indexterm>settler colonial population. Despite its self-cultivated reputation as the most humane of imperial custodians, there were myriad examples where postwar resistance to British rule was met with severe and systematic policies of repression and terrorization. Kenya, with a powerful and uncompromising settler community, and profoundly inequitable land distribution, was perhaps the most grotesque example. In response to the violence and perceived cultural excesses of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1245">
            <primary>Mau Mau</primary>
          </indexterm>Mau-Mau, across 1952–6, a program of mass internment without trial, executions, rape, and torture was enacted. Although only fully appreciated in recent years, with the revelations from Caroline <indexterm class="singular" xml:id="b-9781474207300-IDX-532">
            <primary>Elkins, Caroline</primary>
          </indexterm>Elkins (<link linkend="b-9781474207300-ref184" role="bib">2005a</link>, <link linkend="b-9781474207300-ref185" role="bib">2005b</link>) and David <indexterm class="singular" xml:id="b-9781474207300-IDX-99">
            <primary>Anderson, David</primary>
          </indexterm>Anderson (<link linkend="b-9781474207300-ref22" role="bib">2005</link>), the accession of Jomo <indexterm class="singular" xml:id="b-9781474207300-IDX-1094">
            <primary>Kenyatta, Jomo</primary>
          </indexterm>Kenyatta to power in December 1963, amidst much ceremony, was the capstone atop a foundation of authoritarianism and bloody counterinsurgency.</para>
<para xml:id="b-9781474207300-902">Algeria was still more protracted and polarized, with an escalatory spiral between terror, French imperial repression, and, eventually, reactionary settler colonial counterterror. Fealty to the revolutionary violence exalted by <indexterm class="singular" xml:id="b-9781474207300-IDX-583">
            <primary>Fanon, Frantz</primary>
          </indexterm>Fanon and <indexterm class="singular" xml:id="b-9781474207300-IDX-1627">
            <primary>Sartre, Jean-Paul</primary>
          </indexterm>Sartre, and practiced with bloody success by the FLN was the cardinal rule for this new era (<link linkend="b-9781474207300-ref421" role="bib">Museveni 1971</link>: 1–24). It would find able practitioners, and despicable target regimes, further south—in the desperate wars of national liberation fought in white supremacist Ian <indexterm class="singular" xml:id="b-9781474207300-IDX-1667">
            <primary>Smith, Ian</primary>
          </indexterm>Smith’s <indexterm class="singular" xml:id="b-9781474207300-IDX-1577">
            <primary>Rhodesia</primary>
          </indexterm>Rhodesia, the settler <?page value="168"?>culturally repressive system of apartheid <indexterm class="singular" xml:id="b-9781474207300-IDX-1690">
            <primary>South Africa</primary>
          </indexterm>South Africa, and <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1520">
            <primary>Portugal</primary>
          </indexterm>Portugal’s territories of <indexterm class="singular" xml:id="b-9781474207300-IDX-308">
            <primary>Cape Verde</primary>
          </indexterm>Cape Verde, <indexterm class="singular" xml:id="b-9781474207300-IDX-104">
            <primary>Angola</primary>
          </indexterm>Angola, and <indexterm class="singular" xml:id="b-9781474207300-IDX-1316">
            <primary>Mozambique</primary>
          </indexterm>Mozambique. Here, a collection of protest movements transitioned to armed struggle, with varying degrees of enthusiasm: little in South Africa, rather more in Angola. In Rhodesia, the <indexterm class="singular" xml:id="b-9781474207300-IDX-2095">
            <primary>Zimbabwe African National Union, ZANU</primary>
          </indexterm>Zimbabwe African National Union (ZANU) and <indexterm class="singular" xml:id="b-9781474207300-IDX-2096">
            <primary>Zimbabwean African People’s Union, ZAPU</primary>
          </indexterm>Zimbabwean African People’s Union (ZAPU) carried slow, attrition-based guerrilla struggles against the isolated and archaic Smith regime (<link linkend="b-9781474207300-fig7_4" role="figure">Figure 7.4</link>). From June 1961, in South Africa, after anguished deliberation, Nelson <indexterm class="singular" xml:id="b-9781474207300-IDX-1223">
            <primary>Mandela, Nelson</primary>
          </indexterm>Mandela was authorized by the <indexterm class="singular" xml:id="b-9781474207300-IDX-36">
            <primary>African National Congress, ANC</primary>
          </indexterm>African National Congress (ANC) to operate a dedicated armed wing, <emphasis role="italic">
            <indexterm class="singular" xml:id="b-9781474207300-IDX-1867">
              <primary>
                <emphasis role="italic">Umkhonto we Sizwe</emphasis>
              </primary>
            </indexterm>Umkhonto we Sizwe</emphasis> (Spear of the Nation).</para>
<para xml:id="b-9781474207300-903">Portugal’s African <indexterm class="singular" xml:id="b-9781474207300-IDX-1528">
            <primary>Portugal</primary>
            <secondary>empire</secondary>
          </indexterm>empire, the last bastion of formal imperialism on the continent by the late 1960s, was administered by a metropole that was radically dissimilar to those in <indexterm class="singular" xml:id="b-9781474207300-IDX-630">
            <primary>France</primary>
          </indexterm>France and <indexterm class="singular" xml:id="b-9781474207300-IDX-786">
            <primary>Great Britain</primary>
          </indexterm>Britain. British and French empires had been secured, retained, and eventually—and reluctantly—decolonized, by polities that were notionally committed to universalistic democratic philosophies. There had always been a degree of tension between their self-fashioned identities as democratic standard bearers, and the reality of racism and <anchor role="objectPointer" xml:id="b-9781474207300-figure7_4"/>
          <?page value="169"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-741">
            <primary>Ghana</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1318">
            <primary>Mozambique Liberation Front, FRELIMO</primary>
          </indexterm>authoritarian rule abroad. This kind of contradiction was much less apparent in Portugal, not because of a more enlightened colonial administration, but rather, a more repressive domestic government. <indexterm class="singular" xml:id="b-9781474207300-IDX-1616">
            <primary>Salazar</primary>
          </indexterm>Salazar’s government did not face the perilous asymmetry of ideals that beset French and British imperialisms—it was fascist at home, and somewhat more fascist abroad. Southern Africa became an almost contiguous and continuous war zone, with the <indexterm class="singular" xml:id="b-9781474207300-IDX-38">
            <primary>African Party for the Independence of Guinea-Bissau and Cape Verde, PAIGC</primary>
          </indexterm>African Party for the Independence of Guinea-Bissau and Cape Verde (PAIGC) evicting Portuguese administration from huge tracts of the country—decolonizing the territory by halting increment across the late 1960s. Mozambique’s Liberation Front (FRELIMO) and the <indexterm class="singular" xml:id="b-9781474207300-IDX-1515">
            <primary>Popular Movement for the Liberation of Angola, MPLA</primary>
          </indexterm>Popular Movement for the Liberation of Angola (MPLA) outlived the departure of Portugal in 1975, and engaged in relentless civil and proxy wars well into the 1980s.</para>
<figure label="7.4" xlink:href="b-9781474207300-figure7_4" xlink:role="objectPointer" xml:id="b-9781474207300-fig7_4">
<info xml:id="b-9781474207300-904">
<title xml:id="b-9781474207300-905">Victory of Robert Mugabe in Rhodesia, 1980. A supporter of Robert Mugabe holding a cock, symbol of the Zanu Party. Credit: Keystone-France/Gamma-Keystone via Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-906">
<imageobject xml:id="b-9781474207300-907">
<imagedata align="center" fileref="images/fig7_4.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
</section>
<section xml:id="b-9781474207300-909">
<info xml:id="b-9781474207300-910">
<title xml:id="b-9781474207300-911">The “Political Kingdom” Realized: Discovering the Limits of Sovereignty</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-912">National cultural and political mobilization, which was predicated upon a culturally united people, with single, monolithic purpose, was an exquisitely effective instrument for advancing sovereignty. It was much less adept at cultivating the lasting freedom of the citizens its new national culture would create. Total subordination to the goal of ridding empires too often transmuted into a more permanent total discipline, carried out in the name of development, national integrity, or internal security. Liberation movements, which typically won a period of grace and popularity, conflated party with nation, nation with people, and people with president. New elites ruled, with an inheritance of repressive tools that were transferred along with sovereignty. One of the first beacons of freedom was the first to dim, with Ghanaian independence the paradigmatic case of post-colonial disappointment. Kwame <indexterm class="singular" xml:id="b-9781474207300-IDX-1400">
            <primary>Nkrumah, Kwame</primary>
          </indexterm>Nkrumah, who had exhorted colonized people to focus first upon the “political kingdom” as the gateway to full freedom and welfare, had been celebrated as the liberator of a nation, and the prophet for a continent, in March 1957. Yet his own “political kingdom” started to show a worryingly authoritarian disposition only a handful of years into his tenure.</para>
<para xml:id="b-9781474207300-913">Soviet-style developmentalism, and the still more appealing and still more fraudulent promise of Maoist single-bound leaps into modernity, captivated many among postcolonial elites and western intellectual circles, providing a counterpoint culture to those of the departing colonial powers. Each proposed massive fixed investment and industrialization effort, seeking to “break out” of the impoverishing quicksand of commodity export. Nkrumah became an energetic and outspoken convert. As the first leader to describe “neocolonialism,” in terms highly favorable to his own accumulation of power, the Ghanaian icon embarked on extremely ambitious plans—for electrification, metallurgy, and <indexterm class="endofrange" startref="b-9781474207300-IDX-1520" xml:id="b-9781474207300-IDX-end161"/>all <?page value="170"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-995">
            <primary>International Labor Organization, ILO</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1886">
            <primary>United Nations</primary>
          </indexterm>of the trappings of an industrial economy (<link linkend="b-9781474207300-ref429" role="bib">Nkrumah 1965</link>: i–xx). These were not ephemeral quests, and presumed decades-long servitude, and the coerced sacrifice of individual freedoms reminiscent of imperialist development programs. Methods redolent of the worst features of alien domination were defended vigorously—with hated impositions like labor conscription baldly justified to bodies like the International Labour Organization (ILO) purely on the basis that their extractions were now being directed by a nationalist government, and not an imperialist governor-general (<link linkend="b-9781474207300-ref397" role="bib">Maul 2012</link>: 6–7, 17–27, 179–90, 269–77). The yoke of colonial culture, it seemed, was difficult to discard.</para>
<para xml:id="b-9781474207300-914">Acquisition of political sovereignty and cultural autonomy, momentous achievements, tended to be followed by disappointments as their limits were revealed. Economic agency did not accompany the accession to independence, and indeed, often there was almost no change at all in the material limits placed on the peoples within them. Structural transition from the extractive-type, export-oriented, culture of colonial economies that had been created to serve the greater imperial system was an almost impossible undertaking, one even more fiercely resisted than a shift in political control. Western powers acquiesced to political self-determination by the late 1950s, but demands for economic self-determination, under the banner of “Permanent Sovereignty Over Natural Resources,” were bitterly rejected. Although much of this had been appreciated for decades, and development had been a key pillar in arguments for political <indexterm class="singular" xml:id="b-9781474207300-IDX-472">
            <primary>decolonization</primary>
          </indexterm>decolonization, the magnitude of the challenge exceeded even the most pessimistic forecasts.</para>
<para xml:id="b-9781474207300-915">Resisting colonial head-taxes, launching general strikes, and pressing for self-government had no equivalents in the economic sphere, where former colonies were compelled to remain in the status of grateful supplicants. Imperial authorities could be compelled to leave, but economic resistance to empire was predicated on positive engagement. Any major effort to create economic sovereignty required massive cooperation, and a willingness to extend such cooperation even in circumstances where indigenous governments held control. Despite some piecemeal efforts, this was rarely in evidence. More radical proposals were advanced to decouple the former colonies from the imperial economies they had been culturally deformed to serve. Detailed ideological and theoretical disquisitions were prepared, in various keys: “<indexterm class="singular" xml:id="b-9781474207300-IDX-1359">
            <primary>neocolonialism</primary>
          </indexterm>neocolonialism,” “<indexterm class="singular" xml:id="b-9781474207300-IDX-481">
            <primary>dependency theory</primary>
          </indexterm>dependency theory” in the 1960s, and, later, in the 1970s, an elaborate program for “a New International Economic Order,” proclaimed by the <indexterm class="singular" xml:id="b-9781474207300-IDX-1403">
            <primary>Non-Aligned Movement</primary>
          </indexterm>Non-Aligned Movement and the UN in 1974 (UNGA 1974a, 1974b). Common to all of these exhortatory crusades for economic justice was the assertion of a right to international economic redistribution—as distinct from charitable dispensation. Masters of their own states, postcolonial leaders appealed to the world community as wronged peers, not mendicants. The capitalist culture that had been imposed by the imperialists was nigh impossible to circumvent. Fierce <?page value="171"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-220">
            <primary>Biafra</primary>
          </indexterm>rhetoric from postcolonial leaders could, and did, win General Assembly vote, but delivered little more. Performing the optics of resistance to the “existing unjust international economic order” became an annual mainstay for the postcolonial bloc at the UN, its symbolism increasingly hollow as little was won, and the emancipatory credentials of postcolonial governments continued to corrode with ever longer records in power.</para>
<para xml:id="b-9781474207300-916">Few obvious solutions were available to dependency and economic marginality. Tanzanian President Julius <indexterm class="singular" xml:id="b-9781474207300-IDX-1423">
            <primary>Nyerere, Julius</primary>
          </indexterm>Nyerere’s autarkic self-development, articulated in the February 1967 <indexterm class="singular" xml:id="b-9781474207300-IDX-129">
            <primary>Arusha Declaration (1967)</primary>
          </indexterm>Arusha Declaration, was perhaps the most culturally or ideologically coherent—though its conceptual appeal was matched only by its abysmal consequences for <indexterm class="singular" xml:id="b-9781474207300-IDX-1785">
            <primary>Tanzania</primary>
          </indexterm>Tanzania’s people (TANU 1967). Countering both the global market and Leninist heavy industrialism with the syncretic model of “<indexterm class="singular" xml:id="b-9781474207300-IDX-39">
            <primary>African Socialism</primary>
          </indexterm>African Socialism,” Nyerere claimed to fuse the traditional communalist, agrarian ethos of the continent with features of modern welfare states. Nyerere’s communalistic “Villagized” national development, or <emphasis role="italic">ujamaa</emphasis>, while carried out in the name of authentic traditions of African culture, rested on an assumption of backwardness that licensed the same mass social engineering and wrenching displacement of communities practiced by colonial administrators—with individuals seen through the prism of economic instrumentalism. Unlike the tax resistance of the 1930s against British rule, there was little recourse against zealous Tanzanian party officials loading families into trucks, all in the name of the nation.</para>
</section>
<section xml:id="b-9781474207300-917">
<info xml:id="b-9781474207300-918">
<title xml:id="b-9781474207300-919">Anti-Imperialism or Human Rights? The Collapsing Moral Claims of Postcolonial Nationalism</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-920">By the later 1970s, the whole edifice of nationalist, statist anti-imperialism as an emancipatory project was in crisis. Nyerere’s <emphasis role="italic">ujamaa</emphasis> was, by the standards of most postcolonial rulers, especially in Africa, among the least of the worst human rights abuses. Only a handful of even vaguely democratic governments had survived, with <indexterm class="singular" xml:id="b-9781474207300-IDX-236">
            <primary>Botswana</primary>
          </indexterm>Botswana’s Seretse <indexterm class="singular" xml:id="b-9781474207300-IDX-1100">
            <primary>Khama, Seretse</primary>
          </indexterm>Khama and <indexterm class="singular" xml:id="b-9781474207300-IDX-1638">
            <primary>Senegal</primary>
          </indexterm>Senegal’s Leopold <indexterm class="singular" xml:id="b-9781474207300-IDX-1642">
            <primary>Senghor, Léopold Sédar</primary>
          </indexterm>Senghor standing out amidst a cohort of corrupt and repressive rulers. Two extraordinarily brutal civil wars, both directed against minority populations seeking their own national freedom—the federal government of <indexterm class="singular" xml:id="b-9781474207300-IDX-1393">
            <primary>Nigeria</primary>
          </indexterm>Nigeria’s crushing encirclement of the Biafran secession (1967–70) and <indexterm class="singular" xml:id="b-9781474207300-IDX-1469">
            <primary>Pakistan</primary>
          </indexterm>Pakistan’s genocidal assault on <indexterm class="singular" xml:id="b-9781474207300-IDX-192">
            <primary>Bangladesh</primary>
          </indexterm>Bangladesh (1971)—rendered the last moralistic vestiges of postcolonial nationalism deeply suspect (<link linkend="b-9781474207300-fig7_5" role="figure">Figure 7.5</link>). While opposition to imperialism and support for universal human rights were almost superimposable struggles between 1945 and 1965, increasingly, postcolonial nationalist leaders were emerging as peer-competitive with imperial administrations in their paternalist rhetoric and repressive conduct. <indexterm class="singular" xml:id="b-9781474207300-IDX-983">
            <primary>Indonesia</primary>
          </indexterm>Indonesia’s subversion of <indexterm class="singular" xml:id="b-9781474207300-IDX-2016">
            <primary>West Papua</primary>
          </indexterm>West Papua’s independence movement in the infamous <?page value="172"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure7_5"/>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1758">
            <primary>Sukarno</primary>
          </indexterm>“act of free choice” in July 1969, and its subsequent invasion and annexation of <indexterm class="singular" xml:id="b-9781474207300-IDX-512">
            <primary>East Timor</primary>
          </indexterm>East Timor in December 1975, were quintessentially imperialist. Carried out by the New Order regime of General Suharto, they seemed little different to nineteenth-century territorial seizures. For many, particularly intellectuals, the disastrous second decade of postcolonial rule required an agonizing fractionation of what had actually been the purpose of resistance—opposition to the abuses of empire, or ending the abuses characteristic of imperialism.</para>
<figure label="7.5" xlink:href="b-9781474207300-figure7_5" xlink:role="objectPointer" xml:id="b-9781474207300-fig7_5">
<info xml:id="b-9781474207300-921">
<title xml:id="b-9781474207300-922">Four starving Biafran children sit and lie around a bowl of food in the dirt during the Nigerian-Biafran civil war. Credit: Hulton Archive/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-923">
<imageobject xml:id="b-9781474207300-924">
<imagedata align="center" fileref="images/fig7_5.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-926">Even <indexterm class="singular" xml:id="b-9781474207300-IDX-934">
            <primary>India</primary>
          </indexterm>India, the first of the <indexterm class="singular" xml:id="b-9781474207300-IDX-787">
            <primary>Great Britain</primary>
          </indexterm>great democratic anti-imperial crusades of the twentieth century, had departed from the original vision of indivisible partnership between individual rights and sovereignty. Prime Minister Indira <indexterm class="singular" xml:id="b-9781474207300-IDX-702">
            <primary>Gandhi, Indira</primary>
          </indexterm>Gandhi, after several years of wandering toward authoritarianism suspended democratic rule in June 1975, during which human rights abuses soared, most strikingly in the coercive sterilization program, which partnered an unaccountable state with foreign donors and technocrats. The same society, and a number of the same personnel, who had carried the struggle against Britain, generated the groundswell of protest which restored Indian democracy in March 1977. It would be among the few postcolonial societies to manage such a rapid revival of resistance to dictatorship.</para>
<para xml:id="b-9781474207300-927">At the dawn of the 1980s, the revelation of the depth of the genocide in <indexterm class="singular" xml:id="b-9781474207300-IDX-293">
            <primary>Cambodia</primary>
          </indexterm>Cambodia, and the Stalinist tyranny of General Haile Mengistu <indexterm class="singular" xml:id="b-9781474207300-IDX-1227">
            <primary>Mariam, Haile Mengistu</primary>
          </indexterm>Mariam in <indexterm class="singular" xml:id="b-9781474207300-IDX-548">
            <primary>Ethiopia</primary>
          </indexterm>Ethiopia, who had seized power and enacted a regime of “<indexterm class="singular" xml:id="b-9781474207300-IDX-1568">
            <primary>Red Terror</primary>
          </indexterm>Red Terror” in February <?page value="173"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-37">
            <primary>African National Congress, ANC</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-652">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1371">
            <primary>Netherlands</primary>
          </indexterm>1977, obliterated the last remnants of postcolonial exceptionalism (<link linkend="b-9781474207300-ref158" role="bib">Davey 2015</link>: 220–46). Support for postcolonial citizens, as opposed to lauding the now shop-worn anti-imperialist speechifying of tyrannical postcolonial states, became the default option—now definitively expressed in the language of universal <indexterm class="singular" xml:id="b-9781474207300-IDX-897">
            <primary>human rights</primary>
          </indexterm>human rights. Crucially, it was a language that was open to all: oppressed individuals, minorities, and First Peoples seeking justice within settler colonial states. It held the flexibility to seek more than the end of imperialism, privileging instead the acquisition of <indexterm class="singular" xml:id="b-9781474207300-IDX-672">
            <primary>Freedom Charter (1955)</primary>
          </indexterm>freedom, not the mere absence of alien rule.</para>
<para xml:id="b-9781474207300-928">The first resistance movement to fully reflect the synthesis between transnational human rights activism and older traditions of anti-imperialism, was also one of the oldest and hardest fought—the national, regional, and eventually worldwide battle against <indexterm class="singular" xml:id="b-9781474207300-IDX-1691">
            <primary>South Africa</primary>
          </indexterm>South Africa’s <indexterm class="singular" xml:id="b-9781474207300-IDX-117">
            <primary>apartheid</primary>
          </indexterm>apartheid system. Apartheid, a pathological edge case of settler colonialism and its culture had evolved out of both British settler patterns, and a distinctive Dutch and French colonial tradition, that of the cultural concept of <indexterm class="singular" xml:id="b-9781474207300-IDX-44">
            <primary>Afrikanerdom</primary>
          </indexterm>Afrikanerdom. With the electoral victory of the Afrikaner-based <indexterm class="singular" xml:id="b-9781474207300-IDX-1335">
            <primary>National Party, South Africa</primary>
          </indexterm>National Party in 1948, apartheid was declared South Africa’s guiding policy (<link linkend="b-9781474207300-ref175" role="bib">Dubow 2014</link>: 12–27). The country’s premier resistance movement, the ANC, was confronted with an ever-more elaborate set of repressive laws (<link linkend="b-9781474207300-ref459" role="bib">Posel 1991</link>; <link linkend="b-9781474207300-ref127" role="bib">Clark and Worger 2004</link>). Multiracial and social democratic in orientation, the ANC was skeptical of the racialized nationalism exemplified by <indexterm class="singular" xml:id="b-9781474207300-IDX-1476">
            <primary>Pan-Africanism</primary>
          </indexterm>Pan-Africanism, and had been an early proponent of a human rights approach to opposing settler colonial repression, a vision enunciated in its June 1955 Freedom Charter.</para>
<para xml:id="b-9781474207300-929">ANC operations encompassed an immense range of techniques and guiding ideologies. Developed in response to a <emphasis role="italic">sui generis</emphasis> form of colonialism, which itself was impressively sophisticated in its techniques, South Africa’s freedom movement drew upon essentially every strand in the repertoire of contention: industrial action, mass demonstration, petitioning, consumer boycott, work stay-away, non-violent civil disobedience—followed by non-lethal armed sabotage, and finally, lethal guerrilla warfare. The complexity of the colonial structure, and its astonishing resilience, allowed a depressingly long time horizon for forced experimentation. In essence, the sheer persistence and metamorphism of colonial structures, spanning an era when so many had disintegrated, afforded an unwelcome opportunity for South African liberation movements to pioneer new kinds of resistance <emphasis role="italic">de novo</emphasis>.</para>
<para xml:id="b-9781474207300-930">Apartheid’s durability also meant that South Africa’s freedom struggle was the only major case where an anticolonial movement would remain fully engaged in struggle after the rise of global human rights activism. After brief excursions into the harder edges of Algerian-influenced “National Liberation” philosophy, Stalinism, the more exclusivist culture of Africanist collective sovereignty, and the interiority-focused <indexterm class="singular" xml:id="b-9781474207300-IDX-224">
            <primary>Black Consciousness Movement</primary>
          </indexterm>Black Consciousness Movement of Steve <indexterm class="singular" xml:id="b-9781474207300-IDX-222">
            <primary>Biko, Steve</primary>
          </indexterm>Biko, its closing decade was characterized by the revival of an emphasis <?page value="174"?>on universal human rights as the basis for a new settlement—particularly after the 1983 birth of the <indexterm class="singular" xml:id="b-9781474207300-IDX-1874">
            <primary>United Democratic Front</primary>
          </indexterm>United Democratic Front. Drawing upon a growing reservoir of support from a world-spanning Anti-Apartheid Movement, the final settlement across 1991–3 rested on equal human rights for all South African citizens, a solution which, for all of its flaws, held the country together for the first decade of its transition from racialized dictatorship.</para>
<para xml:id="b-9781474207300-931">The dawn of the 1990s demonstrated the new configurations indigenous peoples had created within the emergent global human rights milieu. Alongside the hopes of South Africa’<indexterm class="singular" xml:id="b-9781474207300-IDX-1606">
            <primary>S Campaign</primary>
          </indexterm>s “miracle” transition, and the independence of its near neighbor <indexterm class="singular" xml:id="b-9781474207300-IDX-1327">
            <primary>Namibia</primary>
          </indexterm>Namibia in 1990, the early years of the decade were dense with events which refocused attention on the plight of colonized peoples. The year 1992 alone witnessed the nation-changing Mabo land rights judgement in <indexterm class="singular" xml:id="b-9781474207300-IDX-164">
            <primary>Australia</primary>
          </indexterm>Australia, renewed attention on the genocidal impact of the Conquest, evident in the events surrounding the quincentennial of Columbus in 1992, and growing recognition of the intersection between environmental destruction and indigenous dispossession, debated at the first <indexterm class="singular" xml:id="b-9781474207300-IDX-505">
            <primary>Earth Summit</primary>
          </indexterm>Earth Summit in Rio.</para>
<para xml:id="b-9781474207300-932">At the June 1993 World Conference on Human Rights, held in Vienna, new agendas coalesced—commingling the wider HRNGO movement and more specific indigenous activist groups (<link linkend="b-9781474207300-fig7_6" role="figure">Figure 7.6</link>). The “s” campaign, which referred to the need to protect the rights of “peoples” in the plural, as opposed to “people,” won substantial traction in an otherwise fractious conference. Alongside the only major success of an otherwise disappointing meeting, the <anchor role="objectPointer" xml:id="b-9781474207300-figure7_6"/>
          <?page value="175"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1380">
            <primary>NGO</primary>
          </indexterm>strengthening of the women’s <indexterm class="singular" xml:id="b-9781474207300-IDX-898">
            <primary>human rights</primary>
          </indexterm>human rights network, indigenous rights activisms found cultural and political affinities with each other, and other marginalized communities in the postcolonial world. With independence achieved, and its limits revealed, the early 1990s were a site for sub-state and transnational resistance-building (<link linkend="b-9781474207300-ref314" role="bib">Jhappan 1992</link>; <link linkend="b-9781474207300-ref132" role="bib">Coates 2004</link>; <link linkend="b-9781474207300-ref161" role="bib">de Costa 2006a</link>). Across the first half of the decade, a deepened connection between the world’s <indexterm class="singular" xml:id="b-9781474207300-IDX-594">
            <primary>First Peoples</primary>
          </indexterm>First Peoples and their shared struggle against settler colonial structures revivified indigenous activism, and placed it within a human rights-based institutional framework. Attitudinal, social, and cultural spheres of resistance were expanded; and, in increments, some useful reforms were won, often by a broad-based activist coalition of human rights, indigenous peoples, and environmental NGOs. Transnational connection of the sort exemplified by the 1990s was certainly not new, the difference was one of scale and persistence, as well as a new lattice-work for institutional foothold (cf. <link linkend="b-9781474207300-ref438" role="bib">Paisley 2006</link>).</para>
<figure label="7.6" xlink:href="b-9781474207300-figure7_6" xlink:role="objectPointer" xml:id="b-9781474207300-fig7_6">
<info xml:id="b-9781474207300-933">
<title xml:id="b-9781474207300-934">UN Human Rights Conference in Vienna. Credit: Leopold Nekula/Sygma via Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-935">
<imageobject xml:id="b-9781474207300-936">
<imagedata align="center" fileref="images/fig7_6.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
</section>
<section xml:id="b-9781474207300-938">
<info xml:id="b-9781474207300-939">
<title xml:id="b-9781474207300-940">Resisting the Nebulous Oppression of the Contemporary World Order, 1989–2016</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-941">As the century closed, and the last formal vestiges of empire were relinquished in <indexterm class="singular" xml:id="b-9781474207300-IDX-885">
            <primary>Hong Kong</primary>
          </indexterm>Hong Kong (1997) and <indexterm class="singular" xml:id="b-9781474207300-IDX-1191">
            <primary>Macau</primary>
          </indexterm>Macau (1999), many of the injustices once properly attributed to empire persisted, even if empire as a recognizable entity had dissolved. Sites and sources of misery were real, but their provenance was vague. Oppressors were abstract, even if the oppressions were not. So, too, the unadorned legacy of empire’s violence and continent-scale social engineering; which bequeathed terrain, mental and national, upon which new actors would carry out massive and grotesque human rights violations, not least in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1278">
            <primary>Middle East</primary>
          </indexterm>Middle East (<link linkend="b-9781474207300-ref263" role="bib">Hardy 2016</link>). Three decades after the disappointments of political self-determination became inescapable, the meaning of resistance was no longer clear, primarily because the injustices were no longer mapped to a physically present alien domination (<link linkend="b-9781474207300-ref262" role="bib">Hardt and Negri 2000</link>). Hands dispensing repression in the most immediate sense were almost always indigenous, not foreign. Material impoverishment was structural, a consequence of economic forces that seemed impossible to avoid—and frequently, had slipped the bonds of any national government, developed or developing.</para>
<para xml:id="b-9781474207300-942">Identifying a means for resisting the negative state of extreme poverty, produced by agents that were distant and opaque, was the kind of challenge difficult to resolve in the fantastical realm of academic symposia, let alone on the ground. Points of direct interface between foreign capital and repression, primarily in mining and extractive industry, could serve as a galvanizing nucleus, but even there, the requirement for technical specialization, and the subterranean quality of foreign control, made recourse to obstructionist protest or disobedience infeasible in a great many cases. Cast in the grim role of supplicants, <?page value="176"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-539">
            <primary>environment</primary>
          </indexterm>for capital, specialist input, and strategic security, the scope for exercising collective agency had narrowed. <indexterm class="singular" xml:id="b-9781474207300-IDX-1618">
            <primary>salt</primary>
          </indexterm>Salt marches and autarkic impulses had no equivalent when the resources at issue were advanced antiretroviral medications and fiber-optic communications infrastructure. One of the few meaningful acts of resistance here was the mandatory licensing of essential medications for domestic manufacture, led by <indexterm class="singular" xml:id="b-9781474207300-IDX-935">
            <primary>India</primary>
          </indexterm>India—a case where global activism compelled transnational pharmaceutical giants and their political patrons to accept limits to their power in 2001.</para>
<para xml:id="b-9781474207300-943">The heroic age of resistance, characterized by bold, imposing national movements, clarity of purpose, and utopian optimism of spirit, was now heritage—not hope. Injustices were exerted by variegated phenomena, and transnational entities that bore only partial resemblance to formal colonialism—and resistance was distributed accordingly. Smaller-scale struggle, fought by increment, and organized at the sub-state and translocal level, represented the face of the approaching millennium. Affinities were intricate, created with peer struggles, and not the automatic association provided by co-nationals. Forums were more dispersed, and resided just as much across borders as within them. National liberation was mostly moribund, replaced by international and transnational activism and advocacy. The high tempo of the crusades of the 1940s, 1950s, and 1960s had a less glamorous afterlife, marked by endless engagement, negotiation, and travel. This was a grinding and attritional process, of calendars punctuated by conferences, countless working groups, programs of action (or inaction), and compromises. The comfort, as modest as it was, could be found in the convergence between anti-imperialism and the expanding armada of movements which fought injustice in the general case: human <indexterm class="singular" xml:id="b-9781474207300-IDX-2033">
            <primary>women</primary>
            <secondary>rights of</secondary>
          </indexterm>rights, women’s rights, environmentalism, and human-centered development. This was the perhaps the single consolatory paradox of the now diffuse cause of global justice—the abuses were wider and more complex, but the catchment for human solidarity, and the mechanisms for connecting with it, had become equally networked and globalized. The struggle for “political kingdom” had become planetary.</para>
</section>
</chapter>
<chapter label="8" xml:id="b-9781474207300-chapter8">
<info xml:id="b-9781474207300-944">
<title xml:id="b-9781474207300-945">
          <?page value="177"?>Race</title>
<author xlink:href="C0005" xlink:role="biblioAuID">
<personname role="first-last">
<firstname>Bruce</firstname> <othername role="middle-initials">S.</othername> <surname>Hall</surname>
          </personname>
        </author>
<pagenums>177–194</pagenums>
<biblioid class="doi">10.5040/9781474207300.ch-008</biblioid>
<mediaobject xml:id="b-9781474207300-946">
<imageobject xml:id="b-9781474207300-947">
<imagedata fileref="pdfs/9781474207300.ch-008.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
<copyright>
          <year>2019</year>
          <holder>Bloomsbury Publishing</holder>
        </copyright>
      </info>
<section xml:id="b-9781474207300-948">
<info xml:id="b-9781474207300-949">
<title xml:id="b-9781474207300-950">Introduction</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-951">The category of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-349">
            <primary>China</primary>
            <secondary>race</secondary>
          </indexterm>race has come to be used more and more often by anglophone historians over the last couple of decades to analyze an increasing number of historical situations outside of the traditional areas where race has long been understood as important (Atlantic <indexterm class="singular" xml:id="b-9781474207300-IDX-1666">
            <primary>slavery</primary>
          </indexterm>slavery and post-slavery, <indexterm class="singular" xml:id="b-9781474207300-IDX-1646">
            <primary>settler colonialism</primary>
          </indexterm>settler colonialism, modern <indexterm class="singular" xml:id="b-9781474207300-IDX-550">
            <primary>eugenics</primary>
          </indexterm>eugenics, etc.). Critics of this increasingly capacious use of race in historical writing fear that deploying race in such diverse contexts dilutes the value of the concept in its modern western “home,” while at the same time imposing a modern western category on histories for which this term had no meaning. Essentially, what is at stake is whether historians want to understand race as the exclusive province of modern western historical formations, or whether the category can be used more analytically than homiletically, as a tool of historical explanation instead of (always) as a tentacle in the web of modern western power. This chapter will examine some of the different ways that race has been used in recent historical writing on twentieth-century colonial and postcolonial settings outside of Europe and North America.</para>
<para xml:id="b-9781474207300-952">One important early work in the effort to isolate a racial dimension from a broader non-western cultural context was Frank <indexterm class="startofrange" xml:id="b-9781474207300-IDX-488">
            <primary>Dikötter, Frank</primary>
          </indexterm>Dikötter’s <link linkend="b-9781474207300-ref166" role="bib">
            <emphasis role="italic">The Discourse of Race in Modern China</emphasis>
          </link> (1992). Dikötter managed to overcome several problems that critics often point to when the language of race is used in seemingly unfamiliar settings. First, he borrowed the sociologist Michael <indexterm class="startofrange" xml:id="b-9781474207300-IDX-194">
            <primary>Banton, Michael</primary>
          </indexterm>Banton’s (<link linkend="b-9781474207300-ref46" role="bib">1987</link>) typology of racial ideas in order to show the different things that race was made to do in various Chinese contexts at different historical moments. For example, early Chinese discourse about race was bound up with theories of Chinese <?page value="178"?>imperial lineage. Later iterations of race were tied to distinctions of physical type, of status hierarchy, of ethnicity. By approaching race as a dynamic tool capable of articulating with other forms of hierarchy and inequality, Dikötter (and Banton) made clear that race was not a single, unchanging idea. It was a way of applying Stuart <indexterm class="singular" xml:id="b-9781474207300-IDX-848">
            <primary>Hall, Stuart</primary>
          </indexterm>Hall’s insight that, in the case of modern <indexterm class="singular" xml:id="b-9781474207300-IDX-788">
            <primary>Great Britain</primary>
          </indexterm>Britain, race is “the modality in which class is ‘lived’, the medium through which class relations are experienced, the form in which it is appropriated and ‘fought through’” (<link linkend="b-9781474207300-ref257" role="bib">Hall 1980</link>: 341). If race could be different things, articulated to different social structures, then it also must necessarily be a set of ideas subject to historical analysis. It was in tracing the change in racial ideas over time in China that Dikötter’s work proved so original—and controversial (<link linkend="b-9781474207300-ref361" role="bib">Liu 2004</link>: 72–3)—largely because he refused to accept a historical process limited to Chinese borrowings of western racial ideas.</para>
<blockquote xml:id="b-9781474207300-953">
<para xml:id="b-9781474207300-954">Chinese reformers in the 1890s were active agents who participated in the invention of their identities. They were not the passive recipients of a “derivative discourse”, but creative individuals who selectively appropriated elements of foreign thought systems in a process of cultural interaction. More important, the reform movement which contributed so much to the invention of racial identities in China was largely the product of complex interactions and features of different indigenous schools of thought, such as New Text Confucianism, statecraft scholarship, classical non-canonical philosophies and Mahayana Buddhism, all of which had virtually nothing to do with Western learning (<link linkend="b-9781474207300-ref167" role="bib">Dikötter 1997</link>: 13–14).</para>
</blockquote>
<para role="fullOut" xml:id="b-9781474207300-955">Dikötter’s book is an intellectual history of racial ideas in China, and as such is limited in some respects. But it showed how one might approach race historically and analytically in ways that opened up new areas for research.</para>
</section>
<section xml:id="b-9781474207300-956">
<info xml:id="b-9781474207300-957">
<title xml:id="b-9781474207300-958">Controversies</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-959">Historians who choose to work on race in fields outside of the modern West often feel the need to defend their analytical choice. By this point, the extent to which this work is controversial is perhaps overstated as more and more historians accept race as a valid analytic in diverse settings, but it has nonetheless become one of the main tropes of this sub-field to defend the choice of analyzing race in histories of premodern and non-western contexts against imagined critics who would insist on understanding race as a modern western phenomenon. It is useful to examine the critique of this use of race, before moving to discuss the historiography itself.</para>
<para xml:id="b-9781474207300-960">The argument that race is quintessentially a modern idea that developed in Europe and the Americas beginning in the eighteenth century is certainly <indexterm class="endofrange" startref="b-9781474207300-IDX-194" xml:id="b-9781474207300-IDX-end13"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-349" xml:id="b-9781474207300-IDX-end29"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-488" xml:id="b-9781474207300-IDX-end39"/>the <?page value="179"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-525">
            <primary>Egypt</primary>
          </indexterm>most stubborn objection to histories of race outside of the modern West. There are any number of originary moments for the emergence of the modern idea of race—in the philosophy of Immanuel <indexterm class="singular" xml:id="b-9781474207300-IDX-1071">
            <primary>Kant, Immanuel</primary>
          </indexterm>Kant, or in the biological typologies of Georges <indexterm class="singular" xml:id="b-9781474207300-IDX-445">
            <primary>Cuvier, Georges</primary>
          </indexterm>Cuvier, or in the early anthropology of Johann Frederick <indexterm class="singular" xml:id="b-9781474207300-IDX-228">
            <primary>Blumenbach, Johann Frederick</primary>
          </indexterm>Blumenbach—but in one way or another, it is understood by many people as a product of the rational sciences (see <link linkend="b-9781474207300-ref46" role="bib">Banton 1987</link>; <link linkend="b-9781474207300-ref261" role="bib">Hannaford 1996</link>). Proof of this is sometimes said to lie in the difficulty of translating these terms into non-European languages, where race, as an idea, is said not to have existed. When Chinese or <indexterm class="singular" xml:id="b-9781474207300-IDX-122">
            <primary>Arabs</primary>
          </indexterm>Arab <indexterm class="singular" xml:id="b-9781474207300-IDX-345">
            <primary>China</primary>
            <secondary>intellectuals</secondary>
          </indexterm>intellectuals—to take just two important examples—embarked on the large-scale translation of important European-language texts into Chinese and Arabic beginning in the second half of the nineteenth century, they encountered the term “race” in the context of the reception of <indexterm class="singular" xml:id="b-9781474207300-IDX-450">
            <primary>Darwin, Charles</primary>
          </indexterm>Darwin, and in the post-Darwinian social science in the works of people like Herbert <indexterm class="singular" xml:id="b-9781474207300-IDX-1726">
            <primary>Spencer, Herbert</primary>
          </indexterm>Spencer, Gustav <indexterm class="singular" xml:id="b-9781474207300-IDX-1149">
            <primary>Le Bon, Gustav</primary>
          </indexterm>Le Bon, and Ernest <indexterm class="singular" xml:id="b-9781474207300-IDX-1571">
            <primary>Renan, Ernest</primary>
          </indexterm>Renan, among others (<link linkend="b-9781474207300-ref166" role="bib">Dikötter 1992</link>: 98–101; <link linkend="b-9781474207300-ref188" role="bib">Elshakry 2014</link>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-535">
            <primary>Elshakry, Marwa</primary>
          </indexterm>). In Arabic and Chinese, translations of the term “race” tended to be some equivalent of “types of people,” “kinds of peoples,” or single words derived from existing terms for peoples, stock, breeding, etc. (<link linkend="b-9781474207300-ref166" role="bib">Dikötter 1992</link>: 105, 109; <link linkend="b-9781474207300-ref189" role="bib">Elshakry 2007</link>: 55–86). As Marwa Elshakry puts it, “Discussing Darwin in Arabic occurred through a process of literally grafting new terms onto older ones” (2014: 17). But the fact that Chinese and Arabic reading publics received these European works, which included ideas about race, does not mean that these cultures had no preexisting racial ideas, or that elements of Egyptian or Chinese social hierarchy cannot be reasonably interpreted using the conceptual tools associated with race. These are, of course, empirical questions. It is clear that Arab and Chinese intellectuals absorbed late nineteenth-century usages of the term race and deployed them in complex ways in their own language and cultural context. How they did so is again a matter of empirical investigation. But the historical complexity of the translation of the term “race” in no way demonstrates that there was no such idea in the non-western societies where these ideas were being received.</para>
<para xml:id="b-9781474207300-961">One of the most popular approaches to the study of race historically has been to trace the genealogy of the word “race” or its cognates in different European languages. Done well, this illustrates the extent to which the meanings of the term “race” have changed over time. But done poorly, it can seem to suggest that the idea of race could only be carried by the term used to refer to it, or by another such as “black” (<link linkend="b-9781474207300-ref46" role="bib">Banton 1987</link>; <link linkend="b-9781474207300-ref524" role="bib">Taine-Cheikh 1989</link>: 90–105; <link linkend="b-9781474207300-ref581" role="bib">Wheeler 2000</link>; <link linkend="b-9781474207300-ref76" role="bib">Boulle 2003</link>: 12; <link linkend="b-9781474207300-ref255" role="bib">Hall 1996</link>: 28). Whether an idea, or a social or cultural formation, is “racial” does not depend upon the terminology, otherwise we are dealing with a form of historical nominalism. As the medievalist David <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1397">
            <primary>Nirenberg, David</primary>
          </indexterm>Nirenberg has written, it is as if, in a European context, one argued “that because the word <emphasis role="italic">Rasse</emphasis> did not enter German until the eighteenth century and the word <emphasis role="italic">Anti-Semitismus</emphasis> until the nineteenth, we need not look for these <?page value="180"?>
          <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1931">
            <primary>United States</primary>
            <secondary>Civil Rights Movement</secondary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1370">
            <primary>Netherlands</primary>
          </indexterm>concepts in the earlier history of German-speaking lands.” As Nirenberg puts it, we should not be surprised that</para>
<blockquote xml:id="b-9781474207300-962">
<para xml:id="b-9781474207300-963">those who define race as the application of eighteenth- and nineteenth-century vocabularies of biological classification to human populations differentiated by skin color are certain that it cannot be found in earlier periods. Such definitions fail to make sense even of modern racial ideologies, which are themselves not only tremendously diverse but also change a great deal over time (2007: 73–4).</para>
</blockquote>
<para xml:id="b-9781474207300-964">It is the purported contrast between “real racism” and some faux version which organizes many critiques of the uses of race in historical writing. This, as Ann <indexterm class="singular" xml:id="b-9781474207300-IDX-1736">
            <primary>Stoler, Ann Laura</primary>
          </indexterm>Stoler points out in making a similar point with respect to European colonial officials in <indexterm class="singular" xml:id="b-9781474207300-IDX-984">
            <primary>Indonesia</primary>
          </indexterm>Indonesia, is usually based on an ideal-typical form of racism rather than real historical manifestations of racial thought in the past. Such a move is especially clear in efforts to contrast contemporary, apparently fuzzier forms of racism in the present of American and European societies with “fuller” or “truer” iteration of race in the past. According to Stoler,</para>
<blockquote xml:id="b-9781474207300-965">
<para xml:id="b-9781474207300-966">[t]he observation that racists in the postmodern era are encouraged not to see themselves as such may capture something significant about how racial discourses operate today, but it again flattens history in the service of a spurious contrast; namely that earlier racisms did nothing of the sort, that those racisms were candidly embraced by their advocates. But this is a caricature of colonial racial sensibilities, not a description of them. Dutch colonials in Indonesia in the late nineteenth and early twentieth century were not alone in adamantly declaring that they did not subscribe to racism and emphatically did subscribe to the equality of human rights (1997: 195).</para>
</blockquote>
<para role="fullOut" xml:id="b-9781474207300-967">Many critiques of efforts to find race in non-western (or pre-modern) contexts are based on these sorts of ahistorical comparisons with some purportedly “truer” form of racism.</para>
<para xml:id="b-9781474207300-968">Objections to the use of race in non-western contexts can have national peculiarities as well. In 1998, Pierre <indexterm class="startofrange" xml:id="b-9781474207300-IDX-240">
            <primary>Bourdieu, Pierre</primary>
          </indexterm>Bourdieu and Loïc <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1998">
            <primary>Wacquant, Loïc</primary>
          </indexterm>Wacquant (<link linkend="b-9781474207300-ref569" role="bib">1999</link>) published an article in which they argued that American and American-trained scholars have imposed a highly ethnocentric model of race drawn from the particular, rigid dichotomy between blacks and whites in the United States, and imposed it as a universal analytic tool on societies which had very different histories and social realities. They cited the example of <indexterm class="singular" xml:id="b-9781474207300-IDX-247">
            <primary>Brazil</primary>
          </indexterm>Brazil, and claimed in a scathing attack on the American political scientist Michael <indexterm class="singular" xml:id="b-9781474207300-IDX-850">
            <primary>Hanchard, Michael</primary>
          </indexterm>Hanchard’s book <emphasis role="italic">Orpheus and Power</emphasis> (<link linkend="b-9781474207300-ref260" role="bib">1994</link>) about Brazilian black consciousness movements (<link linkend="b-9781474207300-fig8_1" role="figure">Figure 8.1</link>), that he “makes the particular history of the US <?page value="181"?>
          <anchor role="objectPointer" xml:id="b-9781474207300-figure8_1"/>Civil <indexterm class="endofrange" startref="b-9781474207300-IDX-1397" xml:id="b-9781474207300-IDX-end145"/>Rights Movement into the universal standard for the struggle of all groups oppressed on grounds of colour (or caste).” Furthermore,</para>
<figure label="8.1" xlink:href="b-9781474207300-figure8_1" xlink:role="objectPointer" xml:id="b-9781474207300-fig8_1">
<info xml:id="b-9781474207300-969">
<title xml:id="b-9781474207300-970">Black Brazilian women protest. Credit: EVARISTO SA/AFP/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-971">
<imageobject xml:id="b-9781474207300-972">
<imagedata align="center" fileref="images/fig8_1.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<blockquote xml:id="b-9781474207300-974">
<para xml:id="b-9781474207300-975">[i]nstead of dissecting the constitution of the Brazilian ethnoracial order according to its own logic, such inquiries are most often content to replace wholesale the national myth of “racial democracy” … by the myth according to which all societies are “racist”, including those within which “<indexterm class="singular" xml:id="b-9781474207300-IDX-1952">
              <primary>United States</primary>
              <secondary>race</secondary>
            </indexterm>race” relations seem at first sight to be less distant and hostile. From being an analytic tool, the concept of racism becomes a mere instrument of accusation; under the guise of science, it is the logic of the trial which asserts itself (and ensures book sales, for lack of success based on intellectual esteem) (<link linkend="b-9781474207300-ref78" role="bib">Bourdieu and Wacquant 1999</link>: 44–5).</para>
</blockquote>
<para role="fullOut" xml:id="b-9781474207300-976">The venom of Bourdieu and Wacquant’s argument can perhaps be understood in part as reflecting a decade of significant anxiety in <indexterm class="startofrange" xml:id="b-9781474207300-IDX-631">
            <primary>France</primary>
          </indexterm>France (and other places) about processes of globalization and apparent <indexterm class="singular" xml:id="b-9781474207300-IDX-93">
            <primary>Americanization</primary>
          </indexterm>Americanization of global cultural and intellectual forms. But their critique of the expansion of the academic deployment of race in different contexts is one that has been repeated often. They argue that the model of race in American scholarship is particular to the United States where race is (purportedly) dichotomous between <indexterm class="endofrange" startref="b-9781474207300-IDX-1931" xml:id="b-9781474207300-IDX-end204"/>black <?page value="182"?>and white, where there is no mixed-race category, where the one-drop rule assigns everyone, with some lineal connection to enslaved Africans, the identity of black. But it is not just an intellectual error; it also is a product of the power of American institutions in the world.</para>
<blockquote xml:id="b-9781474207300-977">
<para xml:id="b-9781474207300-978">The fact that this racial (or racist) sociodicy was able to globalize itself over the recent period, thereby losing its outer characteristics of legitimating discourse for domestic or local usage, is undoubtedly one of the most striking proofs of the symbolic dominion and influence exercised by the USA over every kind of scholarly and, especially, semi-scholarly production, notably through the power of consecration they possess and through the material and symbolic profits that researchers in the dominated countries realize from a more or less assumed or ashamed adherence to the model derived from the USA (<link linkend="b-9781474207300-ref78" role="bib">Bourdieu and Wacquant 1999</link>: 45–6).</para>
</blockquote>
<para role="fullOut" xml:id="b-9781474207300-979">In criticizing the American sociologist Howard <indexterm class="singular" xml:id="b-9781474207300-IDX-2027">
            <primary>Winant, Howard</primary>
          </indexterm>Winant, they write that “the ‘globalization of race’ results, not from a sudden convergence of forms of ethnoracial domination in the various countries, but from the quasi-universalization of the US folk-concept of ‘race’ as a result of the worldwide export of US scholarly categories” (<link linkend="b-9781474207300-ref78" role="bib">Bourdieu and Wacquant 1999</link>: 48).</para>
<para xml:id="b-9781474207300-980">The core of this argument had been put forward earlier by both Bourdieu and Wacquant. Bourdieu’s argument was made in reference to sub-nationalist discourse in southern France (<link linkend="b-9781474207300-ref77" role="bib">Bourdieu 1994</link>: 220). Wacquant addressed himself specifically to race, arguing that academic work on race has consistently confused folk and analytical notions of race.</para>
<blockquote xml:id="b-9781474207300-981">
<para xml:id="b-9781474207300-982">For, with precious few exceptions, students of “race” have accepted lay preconstructions of the phenomenon. They have been content to tackle “race” in the manner in which it has been constituted as a “social problem” in reality itself. Worse yet: they have taken over as tools of analysis the reified products of the ethnoracial struggles of the past. In short, they have failed to establish a clear demarcation between folk and analytic understandings of “race” (1997: 222).</para>
</blockquote>
<para role="fullOut" xml:id="b-9781474207300-983">Wacquant argues that this confusion is intrinsic to the category of race because from its inception, science and common sense have mixed.</para>
<blockquote xml:id="b-9781474207300-984">
<para xml:id="b-9781474207300-985">The result of this ongoing traffic between folk and analytical concepts is that the history of racial domination is inscribed in the scientific unconscious of our disciplines and acts as a powerful censoring mechanism upon all researchers, including those who do not ostensibly study “race”. This is visible in the categories we use, namely, the scientifically inept but <indexterm class="endofrange" startref="b-9781474207300-IDX-631" xml:id="b-9781474207300-IDX-end59"/>socially <?page value="183"?>
            <indexterm class="singular" xml:id="b-9781474207300-IDX-689">
              <primary>Frevre, Gilberto</primary>
            </indexterm>powerful differentiation between “<indexterm class="startofrange" xml:id="b-9781474207300-IDX-1953">
              <primary>United States</primary>
              <secondary>race</secondary>
            </indexterm>race” and “ethnicity”; in how we organize our inquiries by reference to groups as they appear in the official taxonomies of the state; and in the structure of each national social scientific field, wherein “race” is alternately dissolved under another rubric, coupled with germane issues, or set apart for special examination (1997: 223).</para>
</blockquote>
<para xml:id="b-9781474207300-986">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-248">
            <primary>Brazil</primary>
          </indexterm>Brazil is, of course, the home of the largest African-descended population in the Americas, and there is a long tradition of scholarship both inside Brazil and by outsiders (especially Americans) seeking to understand the particularities of the Brazilian racial story, and to find points of comparison and contrast with the situation in the <indexterm class="singular" xml:id="b-9781474207300-IDX-1927">
            <primary>United States</primary>
          </indexterm>United States. In fact, the earliest efforts to think about race comparatively were focused precisely on Brazil. The leading Brazilian sociologist of race Gilberto Freyre was trained in the US under Franz <indexterm class="singular" xml:id="b-9781474207300-IDX-231">
            <primary>Boas, Franz</primary>
          </indexterm>Boas and made much of the difference between the slave systems and the post-emancipation place of blacks in the US and Brazil (see <link linkend="b-9781474207300-ref217" role="bib">Freyre 1986</link>).<footnote label="1" role="end-bk-note" xml:id="b-9781474207300-fn8_1">
            <para xml:id="b-9781474207300-987">The Portuguese <emphasis role="italic">Casa Grande e Senzala</emphasis> was published in 1933.</para>
          </footnote> Frank <indexterm class="singular" xml:id="b-9781474207300-IDX-1781">
            <primary>Tannenbawm, Frank</primary>
          </indexterm>Tannenbawm’s <emphasis role="italic">Slave and Citizen</emphasis> (1946) was another important early work comparing so-called race relations between the US and <indexterm class="singular" xml:id="b-9781474207300-IDX-1144">
            <primary>Latin America</primary>
          </indexterm>Latin America. The comparison has been followed up many times since (see <link linkend="b-9781474207300-ref163" role="bib">Degler 1971</link>). So to suggest that <indexterm class="singular" xml:id="b-9781474207300-IDX-851">
            <primary>Hanchard, Michael</primary>
          </indexterm>Hanchard and other American scholars had blindly applied American-derived models on the Brazilian context is completely incorrect, even if there is much to criticize in some of this scholarship (French 2000).</para>
<para xml:id="b-9781474207300-988">The Bourdieu and Wacquant critique has become somewhat modular in that it has been repeated, in slightly different forms, in a number of other contexts. It is not just American academics importing race that is the problem, but the fact that many marginal groups in societies like Brazil have sought to use more explicitly racial language, often drawn from American examples, in their politics. In <indexterm class="singular" xml:id="b-9781474207300-IDX-936">
            <primary>India</primary>
          </indexterm>India, for example, the effort by <indexterm class="startofrange" xml:id="b-9781474207300-IDX-448">
            <primary>Dalit</primary>
          </indexterm>Dalit (Untouchable) activists to have <indexterm class="startofrange" xml:id="b-9781474207300-IDX-938">
            <primary>India</primary>
            <secondary>caste system</secondary>
          </indexterm>caste discrimination recognized as a form of racism by an important <indexterm class="singular" xml:id="b-9781474207300-IDX-1887">
            <primary>United Nations</primary>
          </indexterm>United Nations conference devoted to racism in Durban, <indexterm class="singular" xml:id="b-9781474207300-IDX-1692">
            <primary>South Africa</primary>
          </indexterm>South Africa in 2001, provoked much debate in India (<link linkend="b-9781474207300-fig8_2" role="figure">Figure 8.2</link>); with many interventions aimed at refuting the idea that race and caste could be understood as closely related. An example of this effort to pour water on the idea that caste was a form of race—or could usefully be analyzed as such—is an article written by Dikankar <indexterm class="startofrange" xml:id="b-9781474207300-IDX-844">
            <primary>Gupta, Dikankar</primary>
          </indexterm>Gupta intended for a sophisticated, but not exclusively academic, audience.</para>
<blockquote xml:id="b-9781474207300-989">
<para xml:id="b-9781474207300-990">Why is caste so often mistaken to be another kind of racism? There are two reasons for this. One is a misreading of Vedic texts inspired by the distinction made by early Indologists between fair Aryans and dark Dravidians. The other reason for equating caste with race comes about because there are some similarities between the ways blacks were treated in the southern United States, or in apartheid South Africa, and the treatment meted out to so-called “untouchables” in caste Hindu society (<link linkend="b-9781474207300-ref250" role="bib">Gupta 2001</link>
            <indexterm class="endofrange" startref="b-9781474207300-IDX-1998" xml:id="b-9781474207300-IDX-end214"/>
            <indexterm class="endofrange" startref="b-9781474207300-IDX-240" xml:id="b-9781474207300-IDX-end17"/>).</para>
</blockquote>
<?page value="184"?>
<figure label="8.2" xml:id="b-9781474207300-fig8_2">
<info xml:id="b-9781474207300-991">
<title xml:id="b-9781474207300-992">A dalit with a poster of Dr Ambedkar in Chennai. Credit: Claude Renault/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-993">
<imageobject xml:id="b-9781474207300-994">
<imagedata align="center" fileref="images/fig8_2.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para role="fullOut" xml:id="b-9781474207300-996">We will leave aside the question of the “misreading” of the Vedic texts—while noting that they can certainly be read in ways that suggest a racial element (<link linkend="b-9781474207300-ref471" role="bib">Robb 1995</link>)—and focus instead on Gupta’s argument about the distinction between Indian caste and US race. Gupta argues that studies have shown that there are overwhelming physical similarities between high and low castes within the same geographical region in India. Conversely, strata based on race are arranged along a continuum of color, whereby whites occupy one end and blacks the other of this hierarchical ladder, with the colors in between positioned accordingly along this scale. The color continuum is, he argues, objective and demonstrable so that there is little point in a black person claiming to be white if the person’s skin color and features do not help to back this claim. To make the claim that caste and race are the same would require one to demonstrate that caste categories are fixed and immutable. But because there is evidence that formerly low castes have become kshatriyas (military elite), and sudras (laborers) have become elite pen-pushers, caste cannot be understood as immutable in the same way as race is.</para>
<para xml:id="b-9781474207300-997">I cite Gupta’s argument at such length because I think it is representative of the kinds of objection that recur in response to work on race in non-western contexts. Race is simple, permanent, and natural; caste by contrast is highly complex, mutable, and requires a particular Indian politics to overcome. That Dalit activists in India have grabbed onto models of emancipatory politics <indexterm class="endofrange" startref="b-9781474207300-IDX-448" xml:id="b-9781474207300-IDX-end36"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-844" xml:id="b-9781474207300-IDX-end91"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-938" xml:id="b-9781474207300-IDX-end98"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1953" xml:id="b-9781474207300-IDX-end207"/>aimed <?page value="185"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-249">
            <primary>Brazil</primary>
          </indexterm>at overcoming racial oppression, whether from the <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1928">
            <primary>United States</primary>
          </indexterm>United States or <indexterm class="singular" xml:id="b-9781474207300-IDX-1693">
            <primary>South Africa</primary>
          </indexterm>South Africa, is viewed with the same suspicion that <indexterm class="singular" xml:id="b-9781474207300-IDX-241">
            <primary>Bourdieu, Pierre</primary>
          </indexterm>Bourdieu and <indexterm class="singular" xml:id="b-9781474207300-IDX-1999">
            <primary>Wacquant, Loïc</primary>
          </indexterm>Wacquant saw self-consciously black Brazilian activists.<footnote label="2" role="end-bk-note" xml:id="b-9781474207300-fn8_2">
            <para xml:id="b-9781474207300-998">For a very different, highly sympathetic take on Dalit and African American racial politics, see Pandey (<link linkend="b-9781474207300-ref443" role="bib">2013</link>).</para>
          </footnote> Taking this critique a little bit further, the fact that their racial ideology is “borrowed” renders it inauthentic, or at least inorganic, when held by non-Europeans (<link linkend="b-9781474207300-ref386" role="bib">Mamdani 2001</link>: 190; <link linkend="b-9781474207300-ref387" role="bib">2009</link>: 147–52). But this is surely a refusal to acknowledge the choices made by subaltern intellectuals in how they represent and position themselves <emphasis role="italic">vis-à-vis</emphasis> other emancipatory struggles, and to fail to recognize the difficulty of subalternized minorities in carving out “a sequestered domain of an autonomous ‘culture’” (<link linkend="b-9781474207300-ref443" role="bib">Pandey 2013</link>: 53). The denial of a racial dimension to caste in India is also part of a contemporary political struggle over the meaning of caste, as the tensions in Indian anticolonial and postcolonial politics around the life and career of the great Dalit intellectual B.R. <indexterm class="singular" xml:id="b-9781474207300-IDX-91">
            <primary>Ambedkar, B. R.</primary>
          </indexterm>Ambedkar (1891–1956) attest (<link linkend="b-9781474207300-ref443" role="bib">Pandey 2013</link>: 61–96). Or, more recently, the caste wars in Bihar in the 1990s.</para>
</section>
<section xml:id="b-9781474207300-999">
<info xml:id="b-9781474207300-1000">
<title xml:id="b-9781474207300-1001">Categories of Practice</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-1002">So far, we have offered a critical review of the kind of argument raised against the use of <indexterm class="singular" xml:id="b-9781474207300-IDX-947">
            <primary>India</primary>
            <secondary>race</secondary>
          </indexterm>race in non-western contexts without saying very much about what criteria should be employed to determine whether race is an appropriate framework in particular situations. This is a more complicated question than it might at first appear to be. Let us begin by looking at a representative definition.</para>
<blockquote xml:id="b-9781474207300-1003">
<para xml:id="b-9781474207300-1004">For the present study I shall define race as “a group of people who are believed to share imagined common characteristics, physical and mental or moral which cannot be changed by human will, because they are thought to be determined by unalterable, stable physical factors: heredity, or external, such as climate or geography.” A belief in the reality of race in itself is always misguided, but it is not necessarily <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1558">
              <primary>racism</primary>
            </indexterm>racism. It becomes racism if the ensuing differences between peoples are the basis for the division of individuals into superior and inferior racial groups (<link linkend="b-9781474207300-ref301" role="bib">Isaac 2004</link>: 34–5).</para>
</blockquote>
<para role="fullOut" xml:id="b-9781474207300-1005">Most definitions of race show two features: that race requires a claim about immutable human difference grounded in biological reproduction, and that racism refers to using race to justify inequalities of some sort on this basis.</para>
<para xml:id="b-9781474207300-1006">The value of such a definition is that it offers a starting point for the recognition of racial arguments, and their relationship to political and social structures. But this is not exactly an analytical framework. What would an analytical framework for race look like? We can usefully turn to debates within sociology in trying to arrive at such a framework. Eduardo <indexterm class="startofrange" xml:id="b-9781474207300-IDX-235">
            <primary>Bonilla-Silva, Eduardo</primary>
          </indexterm>Bonilla-Silva has argued that most social scientific work on race treats it as a purely ideological phenomenon, and that this is reflected in most definitions of racism (<link linkend="b-9781474207300-ref71" role="bib">1996</link>: 465). <?page value="186"?>Instead, Bonilla-Silva proposes an analytic model of race that stresses the reality of the category on group association, identity, and life chances: “After racial categories were used to organize social relations in a society, however, race became an independent element of the operation of the social system” (1996: 473). In his more recent work, Bonilla-Silva has taken this model to make a racial analysis of precisely the opposite kinds of discourse discussed in the definitions: viz. what he calls “color-blind racism,” which he takes to be an ideology of <indexterm class="singular" xml:id="b-9781474207300-IDX-2021">
            <primary>white supremacy</primary>
          </indexterm>white supremacy in the modern United States (2014: 10). By turning around the constructivist approach to race, Bonilla-Silva makes of race a social fact prior to language, and as such racial ideology in his analysis is a rather crude superstructure justifying white privilege.</para>
<para xml:id="b-9781474207300-1007">But Bonilla-Silva’s argument may seem stronger when understood as part of the debates over the “new racisms” that have emerged since the <indexterm class="singular" xml:id="b-9781474207300-IDX-362">
            <primary>Civil Rights Movement</primary>
          </indexterm>Civil Rights era in the United States, and as a consequence of anxieties over non-European immigration in Europe (<link linkend="b-9781474207300-ref40" role="bib">Balibar 1991</link>). Michael <indexterm class="singular" xml:id="b-9781474207300-IDX-1435">
            <primary>Omi, Michael</primary>
          </indexterm>Omi and Howard <indexterm class="singular" xml:id="b-9781474207300-IDX-2028">
            <primary>Winant, Howard</primary>
          </indexterm>Winant’s influential formulation of “racial formation” captures some of the difficulty that historians of race face: “[R]ace is a matter of both social structure and cultural representation. Too often, the attempt is made to understand race simply or primarily in terms of only one of these two analytical dimensions.” What Omi and Winant call “racial projects” connect “what race means in a particular discursive practice and the ways in which both social structures and everyday experiences are racially organized, based upon that meaning” (1994: 56). Because in this diachronic sense, race as a social fact matters in so many places around the world, efforts to define race or racism as a complex of ideas that invoke biological inferiority and immutability very often miss their mark. It is really impossible to make sense of racial phenomena unless the historical specificity of particular instances of race is accounted for (<link linkend="b-9781474207300-ref257" role="bib">Hall 1980</link>). Not only does that mean that there will then be historically specific “racisms” rather than some singular ahistorical form, but that ideas and practices connected to the social fact of race will articulate with other social phenomena differently. Thomas <indexterm class="singular" xml:id="b-9781474207300-IDX-880">
            <primary>Holt, Thomas</primary>
          </indexterm>Holt has argued that “the idea that race is socially constructed implies also that it can and must be constructed differently at different historical moments and in different social contexts” (2000: 21). Holt refuses to be pinned down to a definition of race, insisting instead that we must “adopt a conception of historical transformation, in which we recognize that a new historical construct is never entirely supplanted by the new. Rather the new is grafted onto the old. Thus racism, too, is never entirely new. Shards and fragments of its past incarnations are embedded in the new. Or, if we switch metaphors to an archaeological image, the new is sedimented onto the old, which occasionally seeps or bursts through” (2000: 20).</para>
<para xml:id="b-9781474207300-1008">In 1997, Ann <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1737">
            <primary>Stoler, Ann Laura</primary>
          </indexterm>Stoler published an article which has since become a widely read and important text in the field of race studies. She took account of <indexterm class="endofrange" startref="b-9781474207300-IDX-235" xml:id="b-9781474207300-IDX-end16"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1558" xml:id="b-9781474207300-IDX-end164"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1928" xml:id="b-9781474207300-IDX-end203"/>the <?page value="187"?>state of the field and observed that contemporary scholarship on racism acknowledges that there is no single object called racism, but instead a plurality of racisms which are not rehearsals of one another but distinct systems of practice and belief. “Within this frame, historically different meanings are attached to the concept of ‘race’ and the racisms they entail. Recognition of plurality in part stems from the attribution of racisms’ condition of origin in different events and different contexts” (<link linkend="b-9781474207300-ref510" role="bib">Stoler 1997</link>: 184). Stoler’s intervention was most notable, in my opinion, for its insistence on the “polyvalent mobility” of racism (a term she takes from <indexterm class="startofrange" xml:id="b-9781474207300-IDX-601">
            <primary>Foucault, Michel</primary>
          </indexterm>Foucault), which refers to the ways that racism “may vacillate and be embraced by those opposed to and beleaguered by the state at one moment and become an integral part of the technologies of state rule at another, then the fact that racial discourses contain and coexist with a range of political agendas is not a contradiction but a fundamental historical feature of their non-linear, spiraling political genealogies” (1997: 191). Stoler uses Foucault’s discussion of discourse in the <emphasis role="italic">Archeology of Knowledge</emphasis> as “a field and set of conditions in which it becomes impossible to talk about sexuality, class membership, morality, and childrearing without talking about race” (<link linkend="b-9781474207300-ref211" role="bib">Foucault 1972</link>: 144).</para>
<para xml:id="b-9781474207300-1009">In a critique of Stoler, <indexterm class="singular" xml:id="b-9781474207300-IDX-2000">
            <primary>Wacquant, Loïc</primary>
          </indexterm>Wacquant argues that she overlooks non-discursive practices and institutions. Stoler’s arguments tend to autonomize discourse and endow it with the capacity to act on its own impulses.</para>
<blockquote xml:id="b-9781474207300-1010">
<para xml:id="b-9781474207300-1011">But the conditions of possibility that make up an épistémè do not guarantee its effectiveness. Just as the “conditions of felicity” of performative utterances are institutional factors residing outside of language, discourses do not contain within themselves the social mechanisms that endow them with potency. The most limiting assumption of Stoler’s research program, then, is that we can elucidate “racism” by scanning and probing its discourse, as if some transparent, stable, and immediately elucidable connection obtained between discursive instantiations of “race” and the systems of concrete practices and organizations through which it materializes itself (<link linkend="b-9781474207300-ref569" role="bib">Wacquant 1997</link>: 228).</para>
</blockquote>
<para role="fullOut" xml:id="b-9781474207300-1012">Wacquant is right to insist on an analytics of race that includes its <indexterm class="singular" xml:id="b-9781474207300-IDX-1553">
            <primary>race</primary>
            <secondary>materiality</secondary>
          </indexterm>materiality in concrete practices and institutions. But he argues that the term “racism” no longer plays a useful analytical role, and instead argues for the following corrective:</para>
<blockquote xml:id="b-9781474207300-1013">
<para xml:id="b-9781474207300-1014">These basic mechanisms of ethnoracial subordination enter into mobile combinations in different societies and during different periods with the same society so that at any point each group is confronted with a particular profile of racial domination. These profiles in turn tend to get locked <indexterm class="endofrange" startref="b-9781474207300-IDX-1737" xml:id="b-9781474207300-IDX-end182"/>into <?page value="188"?>systems of racial ruling endowed with their own internal coherence, logic, and inertia. To explain a given racial formation, then, requires that we break it down into its constituent mechanisms and uncover the linkages between them. Such linkages, for example, between stigma and segregation or between idioms of exclusion and discriminatory practices, have to be empirically parsed and analytically reconstructed: they can neither be assumed nor grasped at the level of discourse. Indeed, by properly differentiating its interlocking forms, we will find out that “tactical mobility” is a property not of racial discourse but of the whole complex of relations and technologies through which racial domination operates (1997: 231).</para>
</blockquote>
<para role="fullOut" xml:id="b-9781474207300-1015">The historical profession has plenty of room for different approaches, some focused on intellectual history and others on social history. But historians of <indexterm class="startofrange" xml:id="b-9781474207300-IDX-31">
            <primary>Africa</primary>
            <secondary>race</secondary>
          </indexterm>race should heed Wacquant’s directive and better connect intellectual histories of racial ideas with the materiality of race in different contexts.</para>
<para xml:id="b-9781474207300-1016">We are a long way from having to justify the possibility of finding racial formations in non-western contexts, and can instead identify race in all its manifestations as polyvalent, historically specific, and bound up in practice and institutions. This clearer set of analytic tools allows us to move away from analogies with ideas and situations in the more obviously racially inflected West. Over the last two decades, an increasingly wide range of scholarship has been published which uses race as a key feature in histories of <indexterm class="singular" xml:id="b-9781474207300-IDX-141">
            <primary>Asia</primary>
          </indexterm>Asia and Africa. Some follow a more established path of showing the role of race in the exercise of imperial power in the non-western world. Others have sought to identify non-western traditions of racial thought and practice. The most interesting work, at least in my eyes, are those studies which seek to unravel the complex interplay of ideas and practices around race that have multiple authors, borrow from western and non-western sources alike, which constitute the ground for important political struggles across the world.</para>
</section>
<section xml:id="b-9781474207300-1017">
<info xml:id="b-9781474207300-1018">
<title xml:id="b-9781474207300-1019">Histories of Race</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-1020">The role of race in twentieth-century European and American imperial projects is well known, even if the details of that history sometimes are not. The strand of literature drawing inspiration from Michel Foucault’s nexus of knowledge and power and Edward <indexterm class="singular" xml:id="b-9781474207300-IDX-1613">
            <primary>Said, Edward</primary>
          </indexterm>Said’s <link linkend="b-9781474207300-ref480" role="bib">
            <emphasis role="italic">
              <indexterm class="singular" xml:id="b-9781474207300-IDX-1445">
                <primary>orientalism</primary>
              </indexterm>Orientalism</emphasis>
          </link> (1978) is still influential. On <indexterm class="singular" xml:id="b-9781474207300-IDX-937">
            <primary>India</primary>
          </indexterm>India, a well-developed literature chronicles the colonial construction of knowledge about south Asia in ways that rendered the subcontinent more governable. Ronald <indexterm class="singular" xml:id="b-9781474207300-IDX-917">
            <primary>Inden, Ronald</primary>
          </indexterm>Inden’s <link linkend="b-9781474207300-ref295" role="bib">
            <emphasis role="italic">Imagining India</emphasis>
          </link> (1990) attempts to do for south Asia what Said did for the <indexterm class="singular" xml:id="b-9781474207300-IDX-1279">
            <primary>Middle East</primary>
          </indexterm>Middle East. Thomas <indexterm class="singular" xml:id="b-9781474207300-IDX-1847">
            <primary>Trautmann, Thomas</primary>
          </indexterm>Trautmann has traced the intellectual history of the development of Indology and the idea of <indexterm class="singular" xml:id="b-9781474207300-IDX-130">
            <primary>Aryanism</primary>
          </indexterm>Aryanism (<link linkend="b-9781474207300-ref545" role="bib">Trautmann 1997</link>, <link linkend="b-9781474207300-ref546" role="bib">2006</link>; <link linkend="b-9781474207300-ref42" role="bib">Ballantyne 2002</link>). Bernard <indexterm class="startofrange" xml:id="b-9781474207300-IDX-370">
            <primary>Cohn, Bernard</primary>
          </indexterm>Cohn (<link linkend="b-9781474207300-ref134" role="bib">1987</link>) and Nicholas <indexterm class="startofrange" xml:id="b-9781474207300-IDX-490">
            <primary>Dirks, Nicholas</primary>
          </indexterm>Dirks (<link linkend="b-9781474207300-ref170" role="bib">2001</link>) <indexterm class="endofrange" startref="b-9781474207300-IDX-601" xml:id="b-9781474207300-IDX-end51"/>each <?page value="189"?>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-526">
            <primary>Egypt</primary>
          </indexterm>chronicled ways in which, they argued, British tools to render India legible and hence governable resulted in the invention or increasing importance of distinctions such as those of <indexterm class="singular" xml:id="b-9781474207300-IDX-939">
            <primary>India</primary>
            <secondary>caste system</secondary>
          </indexterm>caste. As Cohn put it in a widely read article on the Indian census, “[c]oncern with counting the characteristics of the Indian population, which may have started as the intellectual concerns of a few British officials or the administrative necessity of knowing the ‘natives’, had become an object to be used in the political, cultural and religious battles at the heart of Punjabi politics which have been crucial down to the present” (<link linkend="b-9781474207300-ref134" role="bib">Cohn 1987</link>: 250). The question in this literature is not so much whether caste in India had taken on a racial dimension, but how to understand the history of that fact and the role of the British colonial state in it. According to Peter <indexterm class="singular" xml:id="b-9781474207300-IDX-1580">
            <primary>Robb, Peter</primary>
          </indexterm>Robb, “the issue is not whether there are ‘race theories’ in India today. Clearly there are; and they are Indian in the sense of being peculiar to the subcontinent, albeit combining Western with indigenous influences … The debate concerns the nature of this mix and its origins, in particular whether there were long-standing Indian theories of race which preceded and merged with imported ones” (1995: 43).</para>
<para xml:id="b-9781474207300-1021">European racial denigrations of Africans have a long history. Philip <indexterm class="singular" xml:id="b-9781474207300-IDX-444">
            <primary>Curtin, Phillip</primary>
          </indexterm>Curtin’s <link linkend="b-9781474207300-ref155" role="bib">
            <emphasis role="italic">The Image of Africa</emphasis>
          </link> (1964) and Abdallah <indexterm class="singular" xml:id="b-9781474207300-IDX-1139">
            <primary>Laroui, Abdallah</primary>
          </indexterm>Laroui’s <link linkend="b-9781474207300-ref349" role="bib">
            <emphasis role="italic">History of the Maghrib</emphasis>
          </link> (1977), originally published in French in 1970, are two early works which detail some of the ways in which different parts of Africa were constructed as places with inferior people in need of European presence. But it was Valentin <indexterm class="singular" xml:id="b-9781474207300-IDX-1319">
            <primary>Mudimbe, Valentin</primary>
          </indexterm>Mudimbe’s publication of <link linkend="b-9781474207300-ref418" role="bib">
            <emphasis role="italic">The Invention of Africa</emphasis>
          </link> (1988) that really grappled with the epistemological implications of the ways in which race was bound up with the development of the idea of Africa. Others have described the history of racialized anthropology and its use in colonial projects in Africa (<link linkend="b-9781474207300-ref28" role="bib">Asad 1973</link>; <link linkend="b-9781474207300-ref174" role="bib">Dubow 1995</link>; <link linkend="b-9781474207300-ref365" role="bib">Lorcin 1995</link>; Trumbull 2009; <link linkend="b-9781474207300-ref141" role="bib">Conklin 2013</link>). But racial discourse was so ubiquitous in colonial rule in Africa that it hardly constitutes a sub-field of its own. Mahmood <indexterm class="singular" xml:id="b-9781474207300-IDX-1220">
            <primary>Mamdani, Mahmood</primary>
          </indexterm>Mamdani’s <link linkend="b-9781474207300-ref384" role="bib">
            <emphasis role="italic">Citizen and Subject</emphasis>
          </link> (1996) provides a nice overview of how race was used by the British in Africa, and by settler colonial states like <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1694">
            <primary>South Africa</primary>
          </indexterm>South Africa, to construct a neotraditional native “personality” that was legally incapable of exercising the rights of full citizenship. <indexterm class="singular" xml:id="b-9781474207300-IDX-390">
            <primary>Comaroff, John &amp; Jean</primary>
          </indexterm>Comaroff and Comaroff’s (<link linkend="b-9781474207300-ref138" role="bib">1991</link>, <link linkend="b-9781474207300-ref139" role="bib">1997</link>) two-volume history of the encounter between Christian missionaries and Tswana people along the South African frontier is a well-known treatment of the racial implications of the impact of European modernity in Africa. While Chloe <indexterm class="singular" xml:id="b-9781474207300-IDX-297">
            <primary>Campbell, Chloe</primary>
          </indexterm>Campbell has demonstrated settler engagement with eugenics in interwar <indexterm class="singular" xml:id="b-9781474207300-IDX-1088">
            <primary>Kenya</primary>
          </indexterm>Kenya (<link linkend="b-9781474207300-ref104" role="bib">Campbell 2007</link>). In places like <indexterm class="singular" xml:id="b-9781474207300-IDX-1749">
            <primary>Sudan</primary>
          </indexterm>Sudan, Heather <indexterm class="singular" xml:id="b-9781474207300-IDX-1655">
            <primary>Sharkey, Heather</primary>
          </indexterm>Sharkey (<link linkend="b-9781474207300-ref487" role="bib">2003</link>) has shown how race was used as a tool in building the colonial regime; many others have shown how the consequences of this were a postcolonial history of racial conflict and ultimately division of the country (see also <link linkend="b-9781474207300-ref315" role="bib">Johnson 2003</link>; <link linkend="b-9781474207300-ref294" role="bib">Idris 2005</link>; <link linkend="b-9781474207300-ref564" role="bib">Vazzadini 2015</link>). Eve <indexterm class="startofrange" xml:id="b-9781474207300-IDX-1849">
            <primary>Troutt Powell, Eve</primary>
          </indexterm>Troutt Powell’s (<link linkend="b-9781474207300-ref548" role="bib">2003</link>) work describes the ways in which Egyptian intellectuals used race in their treatment of Sudan. More recently, she has written about <indexterm class="endofrange" startref="b-9781474207300-IDX-31" xml:id="b-9781474207300-IDX-end4"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-370" xml:id="b-9781474207300-IDX-end32"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-490" xml:id="b-9781474207300-IDX-end40"/>enslaved <?page value="190"?>Sudanese women in Egypt (<link linkend="b-9781474207300-ref549" role="bib">Troutt Powell 2013</link>; see also <link linkend="b-9781474207300-ref357" role="bib">Lewis 1990</link>; <link linkend="b-9781474207300-ref575" role="bib">Walz and Cuno 2011</link>; <link linkend="b-9781474207300-ref183" role="bib">El Hamel 2013</link>).</para>
<para xml:id="b-9781474207300-1022">Another well-known aspect of imperial rule in <indexterm class="singular" xml:id="b-9781474207300-IDX-19">
            <primary>Africa</primary>
          </indexterm>Africa, <indexterm class="singular" xml:id="b-9781474207300-IDX-142">
            <primary>Asia</primary>
          </indexterm>Asia, and parts of <indexterm class="singular" xml:id="b-9781474207300-IDX-1145">
            <primary>Latin America</primary>
          </indexterm>Latin America where the <indexterm class="singular" xml:id="b-9781474207300-IDX-1929">
            <primary>United States</primary>
          </indexterm>United States imposed its control formally and informally, is the extent to which <indexterm class="singular" xml:id="b-9781474207300-IDX-73">
            <primary>Algeria</primary>
            <secondary>violence</secondary>
          </indexterm>violence was used in conquest and to put down any challenges to colonial power. While the fact of the violence is well known, many publications over the last two decades have revealed the hitherto unknown extent of violence, or have shown much more clearly than was known before how much of a role race played in motivating and justifying colonial violence. The publication of Adam <indexterm class="singular" xml:id="b-9781474207300-IDX-875">
            <primary>Hochschild, Adam</primary>
          </indexterm>Hochschild’s <link linkend="b-9781474207300-ref276" role="bib">
            <emphasis role="italic">King <indexterm class="singular" xml:id="b-9781474207300-IDX-1165">
                <primary>Leopold II of Belgium</primary>
              </indexterm>Leopold’s Ghosts</emphasis>
          </link> (1998) brought a well-known story of colonial violence in late nineteenth-century central Africa to a much wider audience. Yet this account of the systematic violence of forced labor in infrastructure-building and collection of wild rubber in King Leopold’s <indexterm class="singular" xml:id="b-9781474207300-IDX-415">
            <primary>Congo Free State</primary>
          </indexterm>Congo Free State offers little analysis of the history of racialized violence in Africa, and offers little connection to the wider story of systematic violence in the early decades of colonial rule in Africa, which was repeated across the continent to varying degrees. Mass—even genocidal—violence accompanied colonial conquest in <indexterm class="singular" xml:id="b-9781474207300-IDX-1786">
            <primary>Tanzania</primary>
          </indexterm>Tanzania and what is today <indexterm class="singular" xml:id="b-9781474207300-IDX-1328">
            <primary>Namibia</primary>
          </indexterm>Namibia, <indexterm class="singular" xml:id="b-9781474207300-IDX-1381">
            <primary>Niger</primary>
          </indexterm>Niger, South Africa, Algeria, and parts of equatorial Africa (see <link linkend="b-9781474207300-ref68" role="bib">Bley 1971</link>; Brower 2009; <link linkend="b-9781474207300-ref525" role="bib">Taithe 2009</link>; <link linkend="b-9781474207300-ref9" role="bib">Adhikari 2010</link>). A more provocative popular book centered on the same violence in central Africa is the Swedish writer Sven <indexterm class="singular" xml:id="b-9781474207300-IDX-1176">
            <primary>Lindqvist, Sven</primary>
          </indexterm>Lindqvist’s <link linkend="b-9781474207300-ref359" role="bib">
            <emphasis role="italic">“Exterminate All the Brutes”</emphasis>
          </link> (1996), which is part travel narrative and part meditation on the meaning of the violence in late-nineteenth-century Africa, and the extent to which violence of this type was didactic and led directly to the <indexterm class="singular" xml:id="b-9781474207300-IDX-1344">
            <primary>Nazis</primary>
          </indexterm>Nazi crimes and the <indexterm class="singular" xml:id="b-9781474207300-IDX-879">
            <primary>holocaust</primary>
          </indexterm>Holocaust. This issue, suggested by Hannah <indexterm class="singular" xml:id="b-9781474207300-IDX-124">
            <primary>Arendt, Hannah</primary>
          </indexterm>Arendt, has been taken up by German academic historians as well (<link linkend="b-9781474207300-ref382" role="bib">Madley 2005</link>; <link linkend="b-9781474207300-ref383" role="bib">Malinowski and Gerwarth 2009</link>; <link linkend="b-9781474207300-ref348" role="bib">Langbehn and Salam 2011</link>; <link linkend="b-9781474207300-ref346" role="bib">Kundrus 2014</link>).</para>
<para xml:id="b-9781474207300-1023">Paul <indexterm class="singular" xml:id="b-9781474207300-IDX-1117">
            <primary>Kramer, Paul</primary>
          </indexterm>Kramer’s work on racialized violence in the American-occupied <indexterm class="singular" xml:id="b-9781474207300-IDX-1506">
            <primary>Philippines</primary>
          </indexterm>Philippines in the first decade of the twentieth century extends Lindqvist and Arendt’s logic to another colonial setting where race has long been recognized as an important dimension of colonialism, arguing that “the intersections of race and empire were contingent, contested, and transnational in scope. Race was the site of intense struggle in Philippine-American colonial history, between Filipinos and Americans, between actors in metropole and colony, between actors inside and outside the colonial state” (<link linkend="b-9781474207300-ref341" role="bib">Kramer 2006</link>: 4). By emphasizing that it was around the issue of race itself that much of the meaning of the conflict in the Philippines took place, Kramer makes a convincing argument about how race was made and re-made in imperial contexts, and how contingent this making and re-making were/are. Instead of a static racial denigration of those targeted by imperial violence, Kramer’s is a dynamic model that is both historical and multivalent. It is made material in the exercise of violence in military conflict and colonial control, and institutionalized in the imperial <indexterm class="endofrange" startref="b-9781474207300-IDX-1694" xml:id="b-9781474207300-IDX-end177"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-1849" xml:id="b-9781474207300-IDX-end192"/>state.</para>
<?page value="191"?>
<para xml:id="b-9781474207300-1024">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-971">
            <primary>Indochina</primary>
          </indexterm>
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1288">
            <primary>miscegenation</primary>
          </indexterm>One of the imperial sites where race was made and re-made in contingent, contested, and transnational ways was around the issue of sex and intimacy. Ann <indexterm class="singular" xml:id="b-9781474207300-IDX-1738">
            <primary>Stoler, Ann Laura</primary>
          </indexterm>Stoler (<link linkend="b-9781474207300-ref511" role="bib">2002</link>) argued in her book about the policing of sex and race in the Dutch <indexterm class="singular" xml:id="b-9781474207300-IDX-1372">
            <primary>Netherlands Indies</primary>
          </indexterm>Indies that the intimate domain figured very prominently in the way that colonial rule worked. Not only was it a preoccupation of those who exercised power in colonial settings, but it was also a domain where the micropolitics of the colonial project played out. Boundaries of intimacy were important and policed, so that intimate relationships, marriage, children, schools, and domestic spaces were all sites at which race played out (<link linkend="b-9781474207300-ref83" role="bib">Briggs 2002</link>; <link linkend="b-9781474207300-ref356" role="bib">Levine 2003</link>). As Emmanuelle <indexterm class="singular" xml:id="b-9781474207300-IDX-1607">
            <primary>Saada, Emmanuelle</primary>
          </indexterm>Saada’s (<link linkend="b-9781474207300-ref479" role="bib">2012</link>) work on so-called “mixed-race” children in the French <indexterm class="singular" xml:id="b-9781474207300-IDX-653">
            <primary>France</primary>
            <secondary>empire</secondary>
          </indexterm>empire suggests, however, sexual boundaries were often transgressed in practice and different French colonies managed the results in widely varying ways. While the “problem”—from the point of view of the colonial state—emerged in all colonies, it was in France’s south-east Asian territories that the issue first arose about what the metropolitan responsibility should be for “mixed-race” children, and it was likewise for “mixed-race” children from this region—but not from others such as the African colonies—that French nationality was eventually offered. Saada tells a complex story, but one that is highly contingent and contested. A number of studies have appeared recently of so-called “mixed-race” populations in parts of sub-Saharan Africa, focused especially on the political mobilization of these “mixed” groups in the last few decades of colonial rule (<link linkend="b-9781474207300-ref316" role="bib">Jones 2013</link>; <link linkend="b-9781474207300-ref311" role="bib">Jean-Baptiste 2014</link>; <link linkend="b-9781474207300-ref354" role="bib">Lee 2014</link>; <link linkend="b-9781474207300-ref177" role="bib">Duke Bryant 2015</link>; <link linkend="b-9781474207300-ref468" role="bib">Ray 2015</link>).</para>
<para xml:id="b-9781474207300-1025">Another theme that has received sustained attention in recent decades is the role of race in the political imaginary of anticolonial nationalist movements in Africa. One of the best studies of this sort is Jonathon <indexterm class="startofrange" xml:id="b-9781474207300-IDX-746">
            <primary>Glassman, Jonathon</primary>
          </indexterm>Glassman’s <link linkend="b-9781474207300-ref233" role="bib">
            <emphasis role="italic">War of Words, War of Stones: Racial Thought and Violence in Colonial <indexterm class="startofrange" xml:id="b-9781474207300-IDX-2090">
                <primary>Zanzibar</primary>
              </indexterm>Zanzibar</emphasis>
          </link> (2011), which seeks to explain how it was that the Arab sultan of Zanzibar on the east African coast, and his elected constitutional government, were overthrown in a bloody revolution one month after independence from <indexterm class="singular" xml:id="b-9781474207300-IDX-789">
            <primary>Great Britain</primary>
          </indexterm>Britain in 1964 by forces that claimed to represent the island’s African racial majority, fighting to redress what they called the centuries-old injustice of Arab rule. The coup was accompanied by pogroms that took the lives of thousands of the islands’ Arab minority (<link linkend="b-9781474207300-fig8_3" role="figure">Figure 8.3</link>). Glassman sees the origin of this violence in the development of competing racial narratives of political identity in the decades before independence. Although he traces the history of some of the central ideas that intersect in the competing racial narratives of mid-twentieth-century Zanzibar, the book is focused analytically on explaining how these forces came together in the specific context of mid-century Zanzibar, and how they influenced political and social organization in that place. Glassman shows just how integral racial thought was to Zanzibari intellectuals in the middle of the twentieth century. It was not a case of mimicry of colonial discourse, as he shows by his detailed reconstruction of conversations and debates from which racial thought emerged.</para>
<?page value="192"?>
<blockquote xml:id="b-9781474207300-1026">
<para xml:id="b-9781474207300-1027">Such a reconstruction reveals that indigenous intellectuals spoke to one another more than they addressed the colonial state or responded to its demands and that their impact on the emergence of racial thought was arguably greater, and certainly more direct, than that of colonial educators … To understand the etiology of racial thought, then, we must abandon the cliché of colonial encounter. It is just as misleading to speak of two discrete spheres of discourse—one colonial, the other indigenous—as it is to speak of the colonial state’s domination of its subjects’ consciousness (<link linkend="b-9781474207300-ref233" role="bib">Glassman 2011</link>: 17–18).</para>
</blockquote>
<para xml:id="b-9781474207300-1028">Glassman places a lot of importance on schooling and school teachers as the intellectuals who helped to fashion racial politics in Zanzibar. He traces the development of the ideological foundations of Zanzibari Arab nationalist thought by examining the writing of the island’s intelligentsia, which celebrated the role of Arabs and Muslims in bringing civilization to the East African region. This intellectual and political project also included justifications for slavery as an educational and civilizing institution for “backward” blacks. Explicit racial nationalism in Zanzibar arose from a group of subaltern intellectuals connected to mainland black laborers on the island. It drew on pan-African rhetoric from <anchor role="objectPointer" xml:id="b-9781474207300-figure8_3"/>
          <?page value="193"?>elsewhere on the continent and in the African diaspora, but combined in the Zanzibari context to form a distinctly racialized anti-Arab politics in which the Arabs represented alien outsider oppressors. The book traces the flow of events and conflict between these political forces, culminating in the violent overthrow of the elected postcolonial government and the bloody pogroms against the island’s Arab population. Glassman attempts to use the racial history he has traced in the intellectual and political realm as a means of understanding the violent actions of mobs in the acts of racialized violence themselves. And as such, it draws on literature about violence that tends to focus on the more and more microscale of the event itself. What is most interesting about Glassman’s book is that it insists on a racial history constructed in the specific context of Zanzibar, but without an overlong focus on the origins of ideas. What matters is how ideas are reconfigured and inhabited to meet particular ends in a place and time. As such, we have a local racial history in a non-western context which refuses to play the genealogical card, refuses to investigate the origins of these ideas, refuses the logic of the trial, and refuses nominalist and diffusionist models of intellectual history. This is in stark contrast to much of the literature on the <indexterm class="singular" xml:id="b-9781474207300-IDX-1604">
            <primary>Rwandan genocide</primary>
          </indexterm>Rwandan genocide that attributes most of the explanatory power of the genocidal violence there to lessons in colonial schoolhouses decades earlier about the racial-civilizational disparities between <indexterm class="singular" xml:id="b-9781474207300-IDX-905">
            <primary>Hutus</primary>
          </indexterm>Hutus and <indexterm class="singular" xml:id="b-9781474207300-IDX-1861">
            <primary>Tutsis</primary>
          </indexterm>Tutsis (<link linkend="b-9781474207300-ref386" role="bib">Mamdani 2001</link>), or downplays the importance of the history of race as a factor leading to the genocidal violence (<link linkend="b-9781474207300-ref516" role="bib">Strauss 2006</link>: 9).</para>
<figure label="8.3" xlink:href="b-9781474207300-figure8_3" xlink:role="objectPointer" xml:id="b-9781474207300-fig8_3">
<info xml:id="b-9781474207300-1029">
<title xml:id="b-9781474207300-1030">An Arab prisoner being questioned and jailed in camps during the Zanzibar revolution by local African revolutionaries led by John Gideon Okello, January 12, 1964. Credit: STRINGER/AFP/Getty Images.</title>
</info>
<mediaobject xml:id="b-9781474207300-1031">
<imageobject xml:id="b-9781474207300-1032">
<imagedata align="center" fileref="images/fig8_3.png" format="image/png" outputformat="web"/>
</imageobject>

</mediaobject>
</figure>
<para xml:id="b-9781474207300-1034">James <indexterm class="startofrange" xml:id="b-9781474207300-IDX-251">
            <primary>Brennan, James</primary>
          </indexterm>Brennan’s history of racial nationalism in the urban setting of Dar es Salaam in <indexterm class="singular" xml:id="b-9781474207300-IDX-1787">
            <primary>Tanzania</primary>
          </indexterm>Tanzania is an example of a study which seeks to ground the production of racial ideas and practices in the colonial configuration of urban space and the role of an intermediary Asian group in becoming scapegoats for an emerging black African Tanzanian nationalism after independence in 1961. Brennan shows that a kind of organic, even subaltern, African nationalism emerged in Dar es Salaam that was aimed primarily at eradicating exploitation. It took as its targets, Asian merchants and landlords who were seen to be exploiters of Africans, even as political leaders preached a multiracial ideology of <indexterm class="singular" xml:id="b-9781474207300-IDX-40">
            <primary>African Socialism</primary>
          </indexterm>African Socialism. According to Brennan,</para>
<blockquote xml:id="b-9781474207300-1035">
<para xml:id="b-9781474207300-1036">African nationalists throughout this period understood nationalism first and foremost to mean the elimination of exploitation. Although the dominance of this discursive theme is partially beholden to international socialist ideology, in Dar es Salaam the discussions of exploitation emerged equally out of idioms of parasitism and witchcraft eradication. Defining exploitation was also a way to define who was a good citizen and who belonged to the nation. At its root, the ideal national citizen was someone who was “African”; someone who was an urban laborer or preferably a rural farmer; and someone who not only refrained from but actively fought exploitation (2012: <indexterm class="endofrange" startref="b-9781474207300-IDX-746" xml:id="b-9781474207300-IDX-end70"/>160).</para>
</blockquote>
<?page value="194"?>
<para role="fullOut" xml:id="b-9781474207300-1037">
          <indexterm class="singular" xml:id="b-9781474207300-IDX-1944">
            <primary>United States</primary>
            <secondary>empire</secondary>
          </indexterm>The power of this racialized nationalism eventually led the Tanzanian government to nationalize housing in 1971, which was aimed at appropriating Asian property, and this accelerated the emigration of Asians from the country (see also <link linkend="b-9781474207300-ref20" role="bib">Aminzade 2013</link>).</para>
<para xml:id="b-9781474207300-1038">In the cases discussed by both Glassman and Brennan, local intellectuals built racialized ideologies around the salience of memories of slavery. They did so with accusations directed at groups who were identified as former slaveholders, or in the Asian case in Dar es Salaam, as exploiters of poor black Tanzanians. The violence in Zanzibar was directed at people identified with the slaveholding class/race, even if many of the victims of the violence were not themselves slaveholders in reality. The accusation of a slaveholding past has also become a powerful mobilizing device in racialized postcolonial conflicts along the African Sahel, from <indexterm class="singular" xml:id="b-9781474207300-IDX-1246">
            <primary>Mauritania</primary>
          </indexterm>Mauritania to <indexterm class="singular" xml:id="b-9781474207300-IDX-1750">
            <primary>Sudan</primary>
          </indexterm>Sudan. In Baz <indexterm class="singular" xml:id="b-9781474207300-IDX-1161">
            <primary>Lecocq, Baz</primary>
          </indexterm>Lecocq’s (<link linkend="b-9781474207300-ref352" role="bib">2010</link>) work on <indexterm class="singular" xml:id="b-9781474207300-IDX-1857">
            <primary>Tuareg</primary>
          </indexterm>Tuareg irredentist politics and rebellions in <indexterm class="singular" xml:id="b-9781474207300-IDX-1216">
            <primary>Mali</primary>
          </indexterm>Mali and <indexterm class="singular" xml:id="b-9781474207300-IDX-1382">
            <primary>Niger</primary>
          </indexterm>Niger, he has shown how the accusation of being an inveterate slaveholder has been used by “black” Malian and Nigerien intellectuals and media to delegitimize the political claims made by Tuareg political groups. Conversely, Tuareg intellectuals have consistently seen “black” Malian and Nigerian state administrators as little more than slaves in disguise. This case makes it especially clear that whatever role European colonial rule played in transforming this region of the world, and whatever racial ideas flowed to Sahelian intellectuals from western sources, the core content of the racialized ideas in these conflicts are local, drawn from a long (and continuing) history of inequality and exploitation within this region. The ideas and the way that they are mobilized is contingent and contested to be sure, but they draw a good part of their strength from the existence of institutional material inequalities that survive changes in political regime and environment (<link linkend="b-9781474207300-ref253" role="bib">Hall 2011</link>).</para>
</section>
<section xml:id="b-9781474207300-1039">
<info xml:id="b-9781474207300-1040">
<title xml:id="b-9781474207300-1041">Conclusion</title>
</info>
<para role="fullOut" xml:id="b-9781474207300-1042">This chapter has sought to explore some of the ways in which historians in the last several decades have written about race in non-western cultural contexts in the twentieth century. The choice was made to revisit some of the conceptual debates over the use of race in such contexts, as a way of showing how these historians have engaged with colleagues in sociology and anthropology in developing more sophisticated frameworks for their work. What remains to be seen is whether this work will have much influence on historians working in more traditional “race” fields of US and European colonial <indexterm class="endofrange" startref="b-9781474207300-IDX-251" xml:id="b-9781474207300-IDX-end18"/>
          <indexterm class="endofrange" startref="b-9781474207300-IDX-2090" xml:id="b-9781474207300-IDX-end230"/>histories.</para>
</section>
</chapter>
<part role="back" xml:id="b-9781474207300-1043">
<info xml:id="b-9781474207300-1044">
<title xml:id="b-9781474207300-1045">Back matter</title>
</info>
<chapter role="notes" xml:id="b-9781474207300-1046">
<info xml:id="b-9781474207300-1047">
<title xml:id="b-9781474207300-1048">
            <?page value="195"?>Notes</title>
<pagenums>195–200</pagenums>
<biblioid class="doi">10.5040/9781474207300.0006</biblioid>
<mediaobject xml:id="b-9781474207300-1049">
<imageobject xml:id="b-9781474207300-1050">
<imagedata fileref="pdfs/9781474207300.0006.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
<copyright>
            <year>2019</year>
            <holder>Bloomsbury Publishing</holder>
          </copyright>
        </info>
<remark condition="hidden">Placeholder for back of book note content</remark>
<?insert item="end-bk-notes" chunk="b-9781474207300-intro1" title="Introduction"?>
<?insert item="end-bk-notes" chunk="b-9781474207300-chapter1" title="Chapter 1"?>
<?page value="196"?>
<?insert item="end-bk-notes" chunk="b-9781474207300-chapter2" title="Chapter 2"?>
<?page value="197"?>
<?page value="198"?>
<?insert item="end-bk-notes" chunk="b-9781474207300-chapter3" title="Chapter 3"?>
<?insert item="end-bk-notes" chunk="b-9781474207300-chapter5" title="Chapter 5"?>
<?page value="199"?>
<?insert item="end-bk-notes" chunk="b-9781474207300-chapter6" title="Chapter 6"?>
<?page value="200"?>
<?insert item="end-bk-notes" chunk="b-9781474207300-chapter8" title="Chapter 8"?>
</chapter>
<bibliography xml:id="b-9781474207300-1051">
<info xml:id="b-9781474207300-1052">
<title xml:id="b-9781474207300-1053">
            <?page value="201"?>Further Reading</title>
<pagenums>201–228</pagenums>
<mediaobject xml:id="b-9781474207300-1054">
<imageobject xml:id="b-9781474207300-1055">
<imagedata fileref="pdfs/9781474207300.0007.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
</info>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref1">
          <author>
            <personname role="last-first">
              <surname>Abernethy</surname> <firstname>David</firstname> <othername role="middle-initials">B.</othername>
            </personname>
          </author> (<pubdate>2000</pubdate>), <title xml:id="b-9781474207300-1057">
            <emphasis role="italic">The Dynamics of Global Dominance:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1058">
            <emphasis role="italic">European Overseas Empires, 1415–1980</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1059">
            <city>New Haven</city>, <state>CT</state>
          </address>: <publishername>Yale University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref2">
          <editor>
            <personname role="last-first">
              <surname>Adamson</surname> <firstname>Joni</firstname>
            </personname>
          </editor>, <editor>
            <personname role="first-last">
              <firstname>Mei</firstname> <othername role="middle">Mei</othername> <surname>Evans</surname>
            </personname>
          </editor>, and <editor>
            <personname role="first-last">
              <firstname>Rachel</firstname> <surname>Stein</surname>
            </personname>
          </editor>, eds (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-1060">
            <emphasis role="italic">The Environmental Justice Reader:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1061">
            <emphasis role="italic">Politics, Poetics, &amp; Pedagogy</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1062">
            <city>Tucson</city>, <state>AZ</state>
          </address>: <publishername>University of Arizona Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref3">
          <author>
            <personname role="last-first">
              <surname>Adas</surname> <firstname>Michael</firstname>
            </personname>
          </author> (<pubdate>1989</pubdate>), <title xml:id="b-9781474207300-1063">
            <emphasis role="italic">Machines as the Measure of Man:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1064">
            <emphasis role="italic">Science, Technology, and Ideologies of Western Dominance</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1065">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref4">
          <author>
            <personname role="last-first">
              <surname>Adas</surname> <firstname>Michael</firstname>
            </personname>
          </author> (<pubdate>1990</pubdate>), <title xml:id="b-9781474207300-1066">
            <emphasis role="italic">Machines as the Measure of Man:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1067">
            <emphasis role="italic">Science, Technology, and Ideologies of Western Dominance</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1068">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref5">
          <bibliomset relation="part" xml:id="b-9781474207300-1069">
            <author>
              <personname role="last-first">
                <surname>Adas</surname> <firstname>Michael</firstname>
              </personname>
            </author> (<pubdate>2004</pubdate>), “<title xml:id="b-9781474207300-1070">Contested Hegemony:</title> <subtitle xml:id="b-9781474207300-1071">The Great War and the Afro-Asian Assault on the Civilizing Mission</subtitle>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1072">
            <title xml:id="b-9781474207300-1073">
              <emphasis role="italic">Decolonization:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1074">
              <emphasis role="italic">Perspectives from Now and Then</emphasis>
            </subtitle>, ed. <editor>
              <personname role="first-last">
                <firstname>Prasenjit</firstname> <surname>Duara</surname>
              </personname>
            </editor>, <pagenums>78–100</pagenums>, <address xml:id="b-9781474207300-1075">
              <city>New York</city>
            </address>: <publishername>Routledge</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref6">
          <author>
            <personname role="last-first">
              <surname>Adas</surname> <firstname>Michael</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-1076">
            <emphasis role="italic">Dominance by Design:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1077">
            <emphasis role="italic">Technological Imperatives and America’s Civilizing Mission</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1078">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref7">
          <author>
            <personname role="last-first">
              <surname>Adas</surname> <firstname>Michael</firstname>
            </personname>
          </author> (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-1079">
            <emphasis role="italic">Dominance by Design:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1080">
            <emphasis role="italic">Technological Imperatives and America’s Civilizing Mission</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1081">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref8">
          <bibliomset relation="article" xml:id="b-9781474207300-1082">
            <author>
              <personname role="last-first">
                <surname>Aderinto</surname> <firstname>Saheed</firstname>
              </personname>
            </author> (<pubdate>2015</pubdate>), “<title xml:id="b-9781474207300-1083">Journey to Work:</title> <subtitle xml:id="b-9781474207300-1084">Transnational Prostitution in Colonial British West Africa</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1085">
            <title xml:id="b-9781474207300-1086">
              <emphasis role="italic">Journal of the History of Sexuality</emphasis>
            </title>, <volumenum>24</volumenum> (<issuenum>1</issuenum>): <pagenums>99–124</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref9">
          <author>
            <personname role="last-first">
              <surname>Adhikari</surname> <firstname>Mohamed</firstname>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-1087">
            <emphasis role="italic">The Anatomy of a South African Genocide:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1088">
            <emphasis role="italic">The Extermination of the Cape San Peoples</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1089">
            <city>Cape Town</city>
          </address>: <publishername>University of Cape Town Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref10">
          <author>
            <personname role="last-first">
              <surname>Afary</surname> <firstname>Janet</firstname>
            </personname>
          </author> (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-1090">
            <emphasis role="italic">Sexual Politics in Modern Iran</emphasis>
          </title>, <address xml:id="b-9781474207300-1091">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref11">
          <bibliomset relation="article" xml:id="b-9781474207300-1092">
            <author>
              <personname role="last-first">
                <surname>Afshari</surname> <firstname>Reza</firstname> <othername role="middle-initials">M.</othername>
              </personname>
            </author> (<pubdate>2007</pubdate>), “<title xml:id="b-9781474207300-1093">On Historiography of Human Rights</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1094">
            <title xml:id="b-9781474207300-1095">
              <emphasis role="italic">Human Rights Quarterly</emphasis>
            </title>, <volumenum>29</volumenum> (<issuenum>1</issuenum>): <pagenums>1–67</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref12">
          <author>
            <personname role="last-first">
              <surname>Agrawal</surname> <firstname>Arun</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-1096">
            <emphasis role="italic">Environmentality:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1097">
            <emphasis role="italic">Technologies of Government and the Making of Subjects</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1098">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref13">
          <bibliomset relation="part" xml:id="b-9781474207300-1099">
            <author>
              <personname role="last-first">
                <surname>Ahram</surname> <firstname>Ariel</firstname> <othername role="middle-initials">I.</othername>
              </personname>
            </author> (<pubdate>2017</pubdate>), “<title xml:id="b-9781474207300-1100">Republic of Iraq</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1101">
            <title xml:id="b-9781474207300-1102">
              <emphasis role="italic">The Government and Politics of the Middle East and North Africa</emphasis>
            </title>, 8th edn, eds <editor>
              <personname role="first-last">
                <firstname>Mark</firstname> <surname>Gasiorowski</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Sean</firstname> <surname>Yom</surname>
              </personname>
            </editor>, <pagenums>235–70</pagenums>, <address xml:id="b-9781474207300-1103">
              <city>Boulder</city>, <state>CO</state>
            </address>: <publishername>Westview Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref14">
          <bibliomset relation="article" xml:id="b-9781474207300-1104">
            <author>
              <personname role="last-first">
                <surname>Aizura</surname> <firstname>Aren</firstname> <othername role="middle-initials">Z.</othername>
              </personname>
            </author> (<pubdate>2010</pubdate>), “<title xml:id="b-9781474207300-1105">Feminine Transformations: Gender Reassignment Surgical Tourism in Thailand</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1106">
            <title xml:id="b-9781474207300-1107">
              <emphasis role="italic">Medical Anthropology</emphasis>
            </title>, <volumenum>29</volumenum> (<issuenum>4</issuenum>): <pagenums>424–43</pagenums>.</bibliomset>
        </bibliomixed>
<?page value="202"?>
<bibliomixed role="article" xml:id="b-9781474207300-ref15">
          <bibliomset relation="article" xml:id="b-9781474207300-1108">
            <author>
              <personname role="last-first">
                <surname>Aldrich</surname> <firstname>Robert</firstname>
              </personname>
            </author> (<pubdate>2002</pubdate>), “<title xml:id="b-9781474207300-1109">Homosexuality in the French Colonies</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1110">
            <title xml:id="b-9781474207300-1111">
              <emphasis role="italic">Journal of Homosexuality</emphasis>
            </title>, <volumenum>41</volumenum> (<issuenum>3/4</issuenum>): <pagenums>201–18</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref16">
          <author>
            <personname role="last-first">
              <surname>Aldrich</surname> <firstname>Robert</firstname>
            </personname>
          </author> (<pubdate>2007</pubdate>), <title xml:id="b-9781474207300-1112">
            <emphasis role="italic">The Age of Empires</emphasis>
          </title>, <address xml:id="b-9781474207300-1113">
            <city>New York</city>
          </address>: <publishername>Thames &amp; Hudson.</publishername>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref17">
          <bibliomset relation="article" xml:id="b-9781474207300-1114">
            <author>
              <personname role="last-first">
                <surname>Alessio</surname> <firstname>Dominic</firstname>
              </personname>
            </author> and <author>
              <personname role="first-last">
                <firstname>Wesley</firstname> <surname>Renfro</surname>
              </personname>
            </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-1115">The Voldemort of Imperial History: Rethinking Empire &amp; U.S. History</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1116">
            <title xml:id="b-9781474207300-1117">
              <emphasis role="italic">International Studies Perspectives</emphasis>
            </title>, <volumenum>17</volumenum>: <pagenums>250–66</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref18">
          <bibliomset relation="article" xml:id="b-9781474207300-1118">
            <author>
              <personname role="last-first">
                <surname>Allman</surname> <firstname>Jean</firstname>
              </personname>
            </author> (<pubdate>1996</pubdate>), “<title xml:id="b-9781474207300-1119">Rounding up Spinsters:</title> <subtitle xml:id="b-9781474207300-1120">Gender Chaos and Unmarried Women in Colonial Asante</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1121">
            <title xml:id="b-9781474207300-1122">
              <emphasis role="italic">Journal of African History</emphasis>
            </title>, <volumenum>37</volumenum> (<issuenum>2</issuenum>): <pagenums>195–214</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref19">
          <author>
            <personname role="last-first">
              <surname>Amadiume</surname> <firstname>Ifi</firstname>
            </personname>
          </author> (<pubdate>1987</pubdate>), <title xml:id="b-9781474207300-1123">
            <emphasis role="italic">Male Daughters, Female Husbands:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1124">
            <emphasis role="italic">Gender and Sex in an African Society</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1125">
            <city>London</city>
          </address>: <publishername>Zed Books</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref20">
          <author>
            <personname role="last-first">
              <surname>Aminzade</surname> <firstname>Ron</firstname>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-1126">
            <emphasis role="italic">Race, Nation, and Citizenship in Post-Colonial Africa:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1127">
            <emphasis role="italic">The Case of Tanzania</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1128">
            <city>New York</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref21">
          <bibliomset relation="part" xml:id="b-9781474207300-1129">
            <author>
              <personname role="last-first">
                <surname>Amster</surname> <firstname>Ellen</firstname>
              </personname>
            </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-1130">The Syphilitic Arab</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1131">
            <title xml:id="b-9781474207300-1132">
              <emphasis role="italic">French Mediterraneans:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1133">
              <emphasis role="italic">Transnational and Imperial Histories</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Patricia</firstname> <surname>Lorcin</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Todd</firstname> <surname>Shephard</surname>
              </personname>
            </editor>, <pagenums>320–46</pagenums>, <address xml:id="b-9781474207300-1134">
              <city>Lincoln</city>, <state>NB</state>
            </address>: <publishername>University of Nebraska Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref22">
          <author>
            <personname role="last-first">
              <surname>Anderson</surname> <firstname>David</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-1135">
            <emphasis role="italic">Histories of the Hanged:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1136">
            <emphasis role="italic">The Dirty War in Kenya and the End of Empire</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1137">
            <city>New York</city>
          </address>: <publishername>W.W. Norton</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref23">
          <bibliomset relation="article" xml:id="b-9781474207300-1138">
            <author>
              <personname role="last-first">
                <surname>Anderson</surname> <firstname>David</firstname> <othername role="middle-initials">M.</othername>
              </personname>
            </author> (<pubdate>2011</pubdate>), “<title xml:id="b-9781474207300-1139">Mau Mau in the High Court and the ‘Lost’ British Empire Archives:</title> <subtitle xml:id="b-9781474207300-1140">Colonial Conspiracy or Bureaucratic Bungle?</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1141">
            <title xml:id="b-9781474207300-1142">
              <emphasis role="italic">Journal of Imperial and Commonwealth History</emphasis>
            </title>, <volumenum>39</volumenum> (<issuenum>5</issuenum>): <pagenums>699–716</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref24">
          <author>
            <personname role="last-first">
              <surname>Andrew</surname> <firstname>Christopher</firstname> <othername role="middle-initials">M.</othername>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname role="initials">A.S.</firstname> <othername role="middle">Kanya</othername> <surname>Forstner</surname>
            </personname>
          </author> (<pubdate>1981</pubdate>), <title xml:id="b-9781474207300-1143">
            <emphasis role="italic">France Overseas:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1144">
            <emphasis role="italic">The Great War and the Climax of French Imperial Expansion</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1145">
            <city>London</city>
          </address>: <publishername>Thames &amp; Hudson</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref25">
          <bibliomset relation="article" xml:id="b-9781474207300-1146">
            <author>
              <personname role="last-first">
                <surname>Appadurai</surname> <firstname>Arjun</firstname>
              </personname>
            </author> (<pubdate>1988</pubdate>), “<title xml:id="b-9781474207300-1147">Putting Hierarchy in its Place</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1148">
            <title xml:id="b-9781474207300-1149">
              <emphasis role="italic">Cultural Anthropology</emphasis>
            </title>, <volumenum>3</volumenum> (<issuenum>1</issuenum>): <pagenums>36–49</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref26">
          <author>
            <personname role="last-first">
              <surname>Arendt</surname> <firstname>Hanna</firstname>
            </personname>
          </author> (<pubdate>1968</pubdate>), <title xml:id="b-9781474207300-1150">
            <emphasis role="italic">Imperialism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1151">
            <emphasis role="italic">Part Two of</emphasis> The Origins of Totalitarianism</subtitle>, <address xml:id="b-9781474207300-1152">
            <city>New York</city>
          </address>: <publishername>Harcourt</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref27">
          <author>
            <personname role="last-first">
              <surname>Arnold</surname> <firstname>David</firstname>
            </personname>
          </author> (<pubdate>2000</pubdate>), <title xml:id="b-9781474207300-1153">
            <emphasis role="italic">Science, Technology and Medicine in Colonial India</emphasis>
          </title>, <address xml:id="b-9781474207300-1154">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref28">
          <editor>
            <personname role="last-first">
              <surname>Asad</surname> <firstname>Talal</firstname>
            </personname>
          </editor>, ed. (<pubdate>1973</pubdate>), <title xml:id="b-9781474207300-1155">
            <emphasis role="italic">Anthropology and the Colonial Encounter</emphasis>
          </title>, <address xml:id="b-9781474207300-1156">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Ithaca Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref29">
          <bibliomset relation="part" xml:id="b-9781474207300-1157">
            <author>
              <orgname>Asian-African Conference</orgname>
            </author> (<pubdate>1955</pubdate>), “<title xml:id="b-9781474207300-1158">Final Communique</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1159">
            <title xml:id="b-9781474207300-1160">
              <emphasis role="italic">Asia-Africa Speak from Bandung</emphasis>
            </title>, ed. <author>
              <orgname>Ministry of Affairs, Republic of Indonesia</orgname>
            </author>, <pagenums>161–9</pagenums>, <address xml:id="b-9781474207300-1161">
              <city>Djakarta</city>
            </address>: <publishername>Ministry of Foreign Affairs</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref30">
          <author>
            <orgname>Augustine of Hippo</orgname>
          </author> ([<pubdate>1631</pubdate>] <date>1912</date>), <title xml:id="b-9781474207300-1162">
            <emphasis role="italic">St. Augustine’s Confessions</emphasis>
          </title>, trans. <author>
            <personname role="first-last">
              <firstname>William</firstname> <surname>Watts</surname>
            </personname>
          </author> (<pubdate>1631</pubdate>), eds <editor>
            <personname role="first-last">
              <firstname role="initials">T.E.</firstname> <surname>Page</surname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname role="initials">W.H.D.</firstname> <surname>Rouse</surname>
            </personname>
          </editor> (<pubdate>1912</pubdate>), <address xml:id="b-9781474207300-1163">
            <city>New York</city>
          </address>: <publishername>Macmillan</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref31">
          <author>
            <personname role="last-first">
              <surname>Austin</surname> <firstname>Gareth</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-1164">
            <emphasis role="italic">Labour, Land, and Capital in Ghana:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1165">
            <emphasis role="italic">From Slavery to Free Labour in Asante, 1807–1956</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1166">
            <city>Rochester</city>, <state>NY</state>
          </address>: <publishername>University of Rochester Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref32">
          <bibliomset relation="article" xml:id="b-9781474207300-1167">
            <author>
              <personname role="last-first">
                <surname>Awondo</surname> <firstname>Patrick</firstname>
              </personname>
            </author>, <author>
              <personname role="first-last">
                <firstname>Peter</firstname> <surname>Geschiere</surname>
              </personname>
            </author>, and <author>
              <personname role="first-last">
                <firstname>Graeme</firstname> <surname>Reid</surname>
              </personname>
            </author> (<pubdate>2012</pubdate>), “<title xml:id="b-9781474207300-1168">Homophobic Africa? Toward a More Nuanced View</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1169">
            <title xml:id="b-9781474207300-1170">
              <emphasis role="italic">African Studies Review</emphasis>
            </title>, <volumenum>55</volumenum> (<issuenum>3</issuenum>): <pagenums>145–68</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref33">
          <bibliomset relation="part" xml:id="b-9781474207300-1171">
            <author>
              <personname role="last-first">
                <surname>Bahba</surname> <firstname>Homi</firstname> <othername role="middle-initials">K.</othername>
              </personname>
            </author> (<pubdate>1994</pubdate>), “<title xml:id="b-9781474207300-1172">Of Mimicry and Man:</title> <subtitle xml:id="b-9781474207300-1173">The Ambivalence of Colonial Discourse</subtitle>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1174">
            <title xml:id="b-9781474207300-1175">
              <emphasis role="italic">The Location of Culture</emphasis>
            </title>, <pagenums>85–90</pagenums>, <address xml:id="b-9781474207300-1176">
              <city>London</city>
            </address>: <publishername>Routledge</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref34">
          <author>
            <personname role="last-first">
              <surname>Bailkin</surname> <firstname>Jordanna</firstname>
            </personname>
          </author> (<pubdate>2012</pubdate>), <title xml:id="b-9781474207300-1177">
            <emphasis role="italic">The Afterlife of Empire</emphasis>
          </title>, <address xml:id="b-9781474207300-1178">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref35">
          <bibliomset relation="part" xml:id="b-9781474207300-1179">
            <author>
              <personname role="last-first">
                <surname>Bakare-Yusuf</surname> <firstname>Bibi</firstname>
              </personname>
            </author> (<pubdate>2004</pubdate>), “‘<title xml:id="b-9781474207300-1180">Yorubas Don’t Do Gender’: A Critical Review of Oyeronke Oyewumi’s <emphasis role="italic">The Invention of Women: Making an African Sense of Western Gender Discourses</emphasis>
            </title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1181">
            <title xml:id="b-9781474207300-1182">
              <emphasis role="italic">African Gender Scholarship:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1183">
              <emphasis role="italic">Concepts, Methodologies, and Paradigms</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Signe</firstname> <surname>Arnfred</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname>Bibi</firstname> <surname>Bakare-Yusuf</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname>Edward</firstname> <othername role="middle">Waswa</othername> <surname>Kisiang’ani</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname>Desiree</firstname> <surname>Lewis</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname>Oyeronke</firstname> <surname>Oyewumi</surname>
              </personname>
            </editor>, and <editor>
              <personname role="first-last">
                <firstname>Filomina</firstname> <othername role="middle">Chioma</othername> <surname>Steady</surname>
              </personname>
            </editor>, <pagenums>61–81</pagenums>, <address xml:id="b-9781474207300-1184">
              <city>Dakar</city>, <country>Senegal</country>
            </address>: <publishername>CODESRIA</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref36">
          <author>
            <personname role="last-first">
              <surname>Baldwin</surname> <firstname>Richard</firstname>
            </personname>
          </author> (<pubdate>2016</pubdate>a), <title xml:id="b-9781474207300-1185">
            <emphasis role="italic">The Great Convergence</emphasis>
          </title>, <address xml:id="b-9781474207300-1186">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Belknap Press of Harvard University Press</publishername>.</bibliomixed>
<?page value="203"?>
<bibliomixed role="article" xml:id="b-9781474207300-ref37">
          <bibliomset relation="article" xml:id="b-9781474207300-1187">
            <author>
              <personname role="last-first">
                <surname>Baldwin</surname> <firstname>Richard</firstname>
              </personname>
            </author> (<pubdate>2016</pubdate>b), “<title xml:id="b-9781474207300-1188">The World Trade Organization and the Future of Multilateralism</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1189">
            <title xml:id="b-9781474207300-1190">
              <emphasis role="italic">Journal of Economic Perspectives</emphasis>
            </title>, <volumenum>30</volumenum> (<issuenum>1</issuenum>): <pagenums>95–116</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="unpublished" xml:id="b-9781474207300-ref38">
          <author>
            <personname role="last-first">
              <surname>Baldwin</surname> <firstname>Richard</firstname>
            </personname>
          </author> (<date>2016</date>c), <title xml:id="b-9781474207300-1191">
            <emphasis role="italic">The Great Convergence:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1192">
            <emphasis role="italic">Information Technology and the New Globalization</emphasis>
          </subtitle>, <confgroup>
            <conftitle>Recorded Presentation</conftitle>
          </confgroup>, <confgroup>
            <confdates>November 15</confdates>
          </confgroup>, <orgname>Peterson Institute for International Economics</orgname>, <link xlink:href="https://piie.com/events/great-convergence-information-technology-and-new-globalization">
            <uri>https://piie.com/events/great-convergence-information-technology-and-new-globalization</uri>
          </link>, accessed <date role="accessed">December 30, 2016</date>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref39">
          <author>
            <personname role="last-first">
              <surname>Balfour</surname> <firstname>Sebastian</firstname>
            </personname>
          </author> (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-1193">
            <emphasis role="italic">Deadly Embrace:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1194">
            <emphasis role="italic">Morocco and the Road to the Spanish Civil War</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1195">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref40">
          <bibliomset relation="part" xml:id="b-9781474207300-1196">
            <author>
              <personname role="last-first">
                <surname>Balibar</surname> <firstname>Etienne</firstname>
              </personname>
            </author> (<pubdate>1991</pubdate>), “<title xml:id="b-9781474207300-1197">Racism and Nationalism</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1198">
            <title xml:id="b-9781474207300-1199">
              <emphasis role="italic">Race, Nation, Class:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1200">
              <emphasis role="italic">Ambiguous Identities</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Etienne</firstname> <surname>Balibar</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Immanuel</firstname> <surname>Wallerstein</surname>
              </personname>
            </editor>, <pagenums>37–67</pagenums>, <address xml:id="b-9781474207300-1201">
              <city>New York</city>
            </address>: Verso.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref41">
          <author>
            <personname role="last-first">
              <surname>Balibar</surname> <firstname>Etienne</firstname>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-1202">
            <emphasis role="italic">We, The People of Europe? Reflections on Transnational Citizenship</emphasis>
          </title>, trans. <author>
            <personname role="first-last">
              <firstname>James</firstname> <surname>Swenson</surname>
            </personname>
          </author>, <address xml:id="b-9781474207300-1203">
            <city>Princeton</city>, <state>NJ</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref42">
          <author>
            <personname role="last-first">
              <surname>Ballantyne</surname> <firstname>Tony</firstname>
            </personname>
          </author> (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-1204">
            <emphasis role="italic">Orientalism and Race:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1205">
            <emphasis role="italic">Aryanism in the British Empire</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1206">
            <city>New York</city>
          </address>: <publishername>Palgrave</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref43">
          <editor>
            <personname role="last-first">
              <surname>Ballantyne</surname> <firstname>Tony</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Antoinette</firstname> <othername role="middle-initials">M.</othername> <surname>Burton</surname>
            </personname>
          </editor>, eds (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-1207">
            <emphasis role="italic">Moving Subjects:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1208">
            <emphasis role="italic">Gender, Mobility, and Intimacy in an Age of Global Empire</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1209">
            <city>Urbana</city>, <state>IL</state>
          </address>: <publishername>University of Illinois Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref44">
          <author>
            <personname role="last-first">
              <surname>Banivanua</surname> <othername role="middle">Mar</othername> <firstname>Tracey</firstname>
            </personname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-1210">
            <emphasis role="italic">Decolonisation and the Pacific:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1211">
            <emphasis role="italic">Indigenous Globalisation and the Ends of Empire</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1212">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref45">
          <author>
            <orgname>Bank for International Settlements</orgname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-1213">
            <emphasis role="italic">Triennial Central Bank Survey Foreign Exchange Turnover in April 2016</emphasis>
          </title>, <link xlink:href="http://www.bis.org/publ/rpfx16fx.pdf">
            <uri>http://www.bis.org/publ/rpfx16fx.pdf</uri>
          </link>, accessed <date role="accessed">December 29, 2016</date>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref46">
          <author>
            <personname role="last-first">
              <surname>Banton</surname> <firstname>Michael</firstname>
            </personname>
          </author> (<pubdate>1987</pubdate>), <title xml:id="b-9781474207300-1214">
            <emphasis role="italic">Racial Theories</emphasis>
          </title>, <address xml:id="b-9781474207300-1215">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref47">
          <author>
            <personname role="last-first">
              <surname>Baptiste</surname> <firstname>Nathalie</firstname>
            </personname>
          </author> and Foreign Policy in Focus (<pubdate>2014</pubdate>), “<title xml:id="b-9781474207300-1216">It’s Not Just Uganda: Behind the Christian Right’s Onslaught in Africa</title>,” <subtitle xml:id="b-9781474207300-1217">
            <emphasis role="italic">The Nation</emphasis>
          </subtitle>, <date>April 4</date>, <link xlink:href="https://www.thenation.com/article/its-not-just-uganda-behind-christian-rights-onslaught-africa/">
            <uri>https://www.thenation.com/article/its-not-just-uganda-behind-christian-rights-onslaught-africa/</uri>
          </link>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref48">
          <bibliomset relation="article" xml:id="b-9781474207300-1218">
            <author>
              <personname role="last-first">
                <surname>Baratieri</surname> <firstname>Daniela</firstname>
              </personname>
            </author> (<pubdate>2014</pubdate>), “‘<title xml:id="b-9781474207300-1219">More than a Tree, Less than a Woman.’ Sex and Empire: The Italian Case</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1220">
            <title xml:id="b-9781474207300-1221">
              <emphasis role="italic">Australian Journal of Politics and History</emphasis>
            </title>, <volumenum>60</volumenum> (<issuenum>3</issuenum>): <pagenums>360–72</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref49">
          <author>
            <personname role="last-first">
              <surname>Barber</surname> <firstname>Noel</firstname>
            </personname>
          </author> (<pubdate>2007</pubdate>), <title xml:id="b-9781474207300-1222">
            <emphasis role="italic">War of the Running Dogs:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1223">
            <emphasis role="italic">Malaya, 1948–1960</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1224">
            <city>London</city>
          </address>: <publishername>Cassell</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref50">
          <bibliomset relation="part" xml:id="b-9781474207300-1225">
            <author>
              <personname role="last-first">
                <surname>Barton</surname> <firstname>Benedict</firstname>
              </personname>
            </author> (<pubdate>1994</pubdate>), “<title xml:id="b-9781474207300-1226">Rituals of Representation: Ethnic Stereotypes and Colonised Peoples at World’s Fairs</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1227">
            <title xml:id="b-9781474207300-1228">
              <emphasis role="italic">Fair Representations:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1229">
              <emphasis role="italic">World’s Fairs and the Modern World</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Robert</firstname> <othername role="middle-initials">W.</othername> <surname>Rydell</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Nancy</firstname> <surname>Gwinn</surname>
              </personname>
            </editor>, <pagenums>28–61</pagenums>, <address xml:id="b-9781474207300-1230">
              <city>Amsterdam</city>
            </address>: <publishername>VU University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref51">
          <author>
            <personname role="last-first">
              <surname>Basalla</surname> <firstname>George</firstname>
            </personname>
          </author> (<pubdate>1989</pubdate>), <title xml:id="b-9781474207300-1231">
            <emphasis role="italic">The Evolution of Technology</emphasis>
          </title>, <address xml:id="b-9781474207300-1232">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref52">
          <author>
            <personname role="last-first">
              <surname>Basu</surname> <firstname>Subho</firstname>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-1233">
            <emphasis role="italic">Does Class Matter? Colonial Capital and Workers’ Resistance in Bengal (1890–1937)</emphasis>
          </title>, <address xml:id="b-9781474207300-1234">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref53">
          <author>
            <personname role="last-first">
              <surname>Baumgart</surname> <firstname>Winfried</firstname>
            </personname>
          </author> (<pubdate>1982</pubdate>), <title xml:id="b-9781474207300-1235">
            <emphasis role="italic">The Idea and Reality of British and French Colonial Expansion, 1880–1914</emphasis>
          </title>, trans. <author>
            <personname role="first-last">
              <firstname>Winfried</firstname> <surname>Baumgart</surname>
            </personname>
          </author> and <editor>
            <personname role="first-last">
              <firstname role="initials">B.</firstname> <surname>Mast</surname>
            </personname>
          </editor>, <address xml:id="b-9781474207300-1236">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref54">
          <author>
            <personname role="last-first">
              <surname>Beckert</surname> <firstname>Sven</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-1237">
            <emphasis role="italic">Empire of Cotton:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1238">
            <emphasis role="italic">A Global History</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1239">
            <city>London</city>
          </address>: <publishername>Penguin Books</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref55">
          <bibliomset relation="article" xml:id="b-9781474207300-1240">
            <author>
              <personname role="last-first">
                <surname>Béliard</surname> <firstname>Yann</firstname>
              </personname>
            </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-1241">A ‘Labour War’ in South Africa: The 1922 Rand Revolution in Sylvia Pankhurst’s Workers’ Dreadnought</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1242">
            <title xml:id="b-9781474207300-1243">
              <emphasis role="italic">Labor History</emphasis>
            </title>, <volumenum>57</volumenum> (February): <pagenums>20–34</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref56">
          <author>
            <personname role="last-first">
              <surname>Bell</surname> <firstname>Roger</firstname> <othername role="middle-initials">J.</othername>
            </personname>
          </author> (<pubdate>1984</pubdate>), <title xml:id="b-9781474207300-1244">
            <emphasis role="italic">Last Among Equals:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1245">
            <emphasis role="italic">Hawaiian Statehood and American Politics</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1246">
            <city>Honolulu</city>, <state>HI</state>
          </address>: <publishername>University of Hawai’i Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref57">
          <author>
            <personname role="last-first">
              <surname>Bender</surname> <othername role="middle">Daniel</othername> <firstname>Eric</firstname>
            </personname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-1247">
            <emphasis role="italic">The Animal Game:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1248">
            <emphasis role="italic">Searching for Wildness at the American Zoo</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1249">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref58">
          <editor>
            <personname role="last-first">
              <surname>Bender</surname> <firstname>Daniel</firstname> <othername role="middle-initials">E.</othername>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Richard</firstname> <othername role="middle-initials">A.</othername> <surname>Greenwald</surname>
            </personname>
          </editor>, eds (<pubdate>2003</pubdate>), <title xml:id="b-9781474207300-1250">
            <emphasis role="italic">Sweatshop USA:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1251">
            <emphasis role="italic">The American Sweatshop in Historical and Global Perspective</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1252">
            <city>New York</city>
          </address>: <publishername>Routledge</publishername>.</bibliomixed>
<?page value="204"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref59">
          <editor>
            <personname role="last-first">
              <surname>Benewick</surname> <firstname>Robert</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Philip</firstname> <surname>Green</surname>
            </personname>
          </editor>, eds (<pubdate>1992</pubdate>), <title xml:id="b-9781474207300-1253">
            <emphasis role="italic">The Routledge Dictionary of Twentieth-Century Political Thinkers</emphasis>
          </title>, <address xml:id="b-9781474207300-1254">
            <city>New York</city>
          </address>: <publishername>Routledge</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref60">
          <author>
            <personname role="last-first">
              <surname>Ben-Ghiat</surname> <firstname>Ruth</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Mia</firstname> <surname>Fuller</surname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-1255">
            <emphasis role="italic">Italian Colonialism</emphasis>
          </title>, <address xml:id="b-9781474207300-1256">
            <city>New York</city>
          </address>: <publishername>Palgrave Macmillan</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref61">
          <bibliomset relation="article" xml:id="b-9781474207300-1257">
            <author>
              <personname role="last-first">
                <surname>Berman</surname> <firstname>Bruce</firstname>
              </personname>
            </author> (<pubdate>1996</pubdate>), “<title xml:id="b-9781474207300-1258">Ethnography as Politics, Politics as Ethnography:</title> <subtitle xml:id="b-9781474207300-1259">Kenyatta, Malinowski, and the Making of Facing Mount Kenya</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1260">
            <title xml:id="b-9781474207300-1261">
              <emphasis role="italic">Canadian Journal of African Studies/Revue Canadienne Des Études Africaines</emphasis>
            </title>, <volumenum>30</volumenum> (<issuenum>3</issuenum>): <pagenums>313–44</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref62">
          <author>
            <personname role="last-first">
              <surname>Bhagwati</surname> <firstname>Jagdish</firstname> <othername role="middle-initials">N.</othername>
            </personname>
          </author> (<pubdate>2005</pubdate>), “<title xml:id="b-9781474207300-1262">A New Vocabulary for Trade</title>,” <subtitle xml:id="b-9781474207300-1263">
            <emphasis role="italic">Wall Street Journal</emphasis>
          </subtitle>, <date>August 4</date>, <link xlink:href="http://www.wsj.com/articles/SB112311935638704645">
            <uri>www.wsj.com/articles/SB112311935638704645</uri>
          </link>, accessed <date role="accessed">December 28, 2016</date>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref63">
          <author>
            <personname role="last-first">
              <surname>Biddle</surname> <othername role="middle">Tammi</othername> <firstname>Davis</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Robert</firstname> <othername role="middle-initials">M.</othername> <surname>Citino</surname>
            </personname>
          </author> (<pubdate>2014</pubdate>), “<title xml:id="b-9781474207300-1264">The Role of Military History in the Contemporary Academy</title>,” <subtitle xml:id="b-9781474207300-1265">
            <emphasis role="italic">A Society for Military History White Paper</emphasis>
          </subtitle>, <pagenums>1–7</pagenums>, <link xlink:href="http://www.smh-hq.org/whitepaper.html">
            <uri>http://www.smh-hq.org/whitepaper.html</uri>
          </link>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref64">
          <author>
            <personname role="last-first">
              <surname>Birmingham</surname> <firstname>David</firstname>
            </personname>
          </author> (<pubdate>1995</pubdate>), <title xml:id="b-9781474207300-1266">
            <emphasis role="italic">The Decolonization of Africa</emphasis>
          </title>, <address xml:id="b-9781474207300-1267">
            <city>Athens</city>, <state>OH</state>
          </address>: <publishername>Ohio University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref65">
          <author>
            <personname role="last-first">
              <surname>Blake</surname> <firstname>Jody</firstname>
            </personname>
          </author> (<pubdate>1999</pubdate>), <title xml:id="b-9781474207300-1268">
            <emphasis role="italic">Le Tumulte Noir:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1269">
            <emphasis role="italic">Modernist Art and Popular Entertainment in Jazz-Age Paris, 1900–1930</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1270">
            <city>University Park</city>, <state>PA</state>
          </address>: <publishername>Pennsylvania State University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref66">
          <bibliomset relation="part" xml:id="b-9781474207300-1271">
            <author>
              <personname role="last-first">
                <surname>Blake</surname> <firstname>Susan</firstname> <othername role="middle-initials">L.</othername>
              </personname>
            </author> (<pubdate>2003</pubdate>), “<title xml:id="b-9781474207300-1272">What ‘Race’ is the Sheik? Rereading a Desert Romance</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1273">
            <title xml:id="b-9781474207300-1274">
              <emphasis role="italic">Doubled Plots:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1275">
              <emphasis role="italic">Romance and History</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Susan</firstname> <surname>Strehle</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Mary</firstname> <othername role="middle">Paniccia</othername> <surname>Carden</surname>
              </personname>
            </editor>, <pagenums>67–85</pagenums>, <address xml:id="b-9781474207300-1276">
              <city>Jackson</city>, <state>MS</state>
            </address>: <publishername>University Press of Mississippi</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref67">
          <bibliomset relation="article" xml:id="b-9781474207300-1277">
            <author>
              <personname role="last-first">
                <surname>Bland</surname> <firstname>Lucy</firstname>
              </personname>
            </author> (<pubdate>2005</pubdate>), “<title xml:id="b-9781474207300-1278">White Women and Men of Colour:</title> <subtitle xml:id="b-9781474207300-1279">Miscegenation Fears in Britain after the Great War</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1280">
            <title xml:id="b-9781474207300-1281">
              <emphasis role="italic">Gender and History</emphasis>
            </title>, <volumenum>17</volumenum> (<issuenum>1</issuenum>): <pagenums>29–61</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref68">
          <author>
            <personname role="last-first">
              <surname>Bley</surname> <firstname>Helmuth</firstname>
            </personname>
          </author> (<pubdate>1971</pubdate>), <title xml:id="b-9781474207300-1282">
            <emphasis role="italic">South-West Africa Under German Rule, 1894–1914</emphasis>
          </title>, <address xml:id="b-9781474207300-1283">
            <city>Evanston</city>, <state>IL</state>
          </address>: <publishername>Northwestern University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref69">
          <author>
            <personname role="last-first">
              <surname>Bloom</surname> <firstname>Joshua</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Waldo</firstname> <othername role="middle-initials">E.</othername> <surname>Martin</surname>
            </personname>
          </author>, Jr. (<pubdate>2012</pubdate>), <title xml:id="b-9781474207300-1284">
            <emphasis role="italic">Black Against Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1285">
            <emphasis role="italic">The History and Politics of the Black Panther Party</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1286">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref70">
          <author>
            <personname role="last-first">
              <surname>Boittin</surname> <othername role="middle">Jennifer</othername> <firstname>Anne</firstname>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-1287">
            <emphasis role="italic">Colonial Metropolis:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1288">
            <emphasis role="italic">The Urban Grounds of Anti-Imperialism and Feminism in Interwar Paris</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1289">
            <city>Lincoln</city>, <state>NB</state>
          </address>: <publishername>University of Nebraska Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref71">
          <bibliomset relation="article" xml:id="b-9781474207300-1290">
            <author>
              <personname role="last-first">
                <surname>Bonilla-Silva</surname> <firstname>Eduardo</firstname>
              </personname>
            </author> (<pubdate>1996</pubdate>), “<title xml:id="b-9781474207300-1291">Rethinking Racism:</title> <subtitle xml:id="b-9781474207300-1292">Toward a Structural Interpretation</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1293">
            <title xml:id="b-9781474207300-1294">
              <emphasis role="italic">American Sociological Review</emphasis>
            </title>, <volumenum>62</volumenum>: <pagenums>465–80</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref72">
          <author>
            <personname role="last-first">
              <surname>Bonilla-Silva</surname> <firstname>Eduardo</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-1295">
            <emphasis role="italic">Racism without Racists:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1296">
            <emphasis role="italic">Color-Blind Racism and the Persistence of Racial Inequality in America</emphasis>
          </subtitle>, 4th edn, <address xml:id="b-9781474207300-1297">
            <city>New York</city>
          </address>: <publishername>Rowman &amp; Littlefield</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref73">
          <bibliomset relation="article" xml:id="b-9781474207300-1298">
            <author>
              <personname role="last-first">
                <surname>Booth</surname> <firstname>Anne</firstname>
              </personname>
            </author> (<pubdate>2012</pubdate>), “<title xml:id="b-9781474207300-1299">Measuring Living Standards in Different Colonial Systems:</title> <subtitle xml:id="b-9781474207300-1300">Some Evidence from South East Asia, 1900–1942</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1301">
            <title xml:id="b-9781474207300-1302">
              <emphasis role="italic">Modern Asian Studies</emphasis>
            </title>, <volumenum>46</volumenum> (<issuenum>5</issuenum>): <pagenums>1145–81</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref74">
          <author>
            <personname role="last-first">
              <surname>Booth</surname> <firstname>Anne</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Kent</firstname> <surname>Deng</surname>
            </personname>
          </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-1303">Japanese Colonialism in Comparative Perspective</title>,” London School of Economics and Political Science, <subtitle xml:id="b-9781474207300-1304">
            <emphasis role="italic">Economic History Working Papers</emphasis>
          </subtitle> #254, <link xlink:href="http://eprints.lse.ac.uk/68883/?from_serp=1">
            <uri>http://eprints.lse.ac.uk/68883/?from_serp=1</uri>
          </link>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref75">
          <author>
            <personname role="last-first">
              <surname>Borgwardt</surname> <firstname>Elizabeth</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-1305">
            <emphasis role="italic">A New Deal for the World</emphasis>
          </title>, <address xml:id="b-9781474207300-1306">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref76">
          <bibliomset relation="part" xml:id="b-9781474207300-1307">
            <author>
              <personname role="last-first">
                <surname>Boulle</surname> <firstname>Pierre</firstname> <othername role="middle-initials">H.</othername>
              </personname>
            </author> (<pubdate>2003</pubdate>), “<title xml:id="b-9781474207300-1308">François Bernier and the Origins of the Modern Concept of Race</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1309">
            <title xml:id="b-9781474207300-1310">
              <emphasis role="italic">The Color of Liberty:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1311">
              <emphasis role="italic">Histories of Race in France</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Sue</firstname> <surname>Peabody</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Tyler</firstname> <surname>Stovall</surname>
              </personname>
            </editor>, <pagenums>11–27</pagenums>, <address xml:id="b-9781474207300-1312">
              <city>Durham</city>, <state>NC</state>
            </address>: <publishername>Duke University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref77">
          <bibliomset relation="part" xml:id="b-9781474207300-1313">
            <author>
              <personname role="last-first">
                <surname>Bourdieu</surname> <firstname>Pierre</firstname>
              </personname>
            </author> (<pubdate>1994</pubdate>), “<title xml:id="b-9781474207300-1314">Identity and Representation:</title> <subtitle xml:id="b-9781474207300-1315">Elements for a Critical Reflection on the Idea of Region</subtitle>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1316">
            <title xml:id="b-9781474207300-1317">
              <emphasis role="italic">Language and Symbolic Power</emphasis>
            </title>, trans. <author>
              <personname role="first-last">
                <firstname>Gino</firstname> <surname>Raymond</surname>
              </personname>
            </author> and <author>
              <personname role="first-last">
                <firstname>Matthew</firstname> <surname>Adamson</surname>
              </personname>
            </author>, <address xml:id="b-9781474207300-1318">
              <city>Cambridge</city>, <state>MA</state>
            </address>: <publishername>Harvard University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref78">
          <bibliomset relation="article" xml:id="b-9781474207300-1319">
            <author>
              <personname role="last-first">
                <surname>Bourdieu</surname> <firstname>Pierre</firstname>
              </personname>
            </author> and <author>
              <personname role="first-last">
                <firstname>Loïc</firstname> <surname>Wacquant</surname>
              </personname>
            </author> (<pubdate>1999</pubdate>), “<title xml:id="b-9781474207300-1320">On the Cunning of Imperialist Reason</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1321">
            <title xml:id="b-9781474207300-1322">
              <emphasis role="italic">Theory, Culture, Society</emphasis>
            </title>, <volumenum>16</volumenum> (<issuenum>1</issuenum>): <pagenums>41–58</pagenums>.</bibliomset>
        </bibliomixed>
<?page value="205"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref79">
          <author>
            <personname role="last-first">
              <surname>Braithwaite</surname> <firstname>Rodric</firstname>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-1323">
            <emphasis role="italic">Afgantsy:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1324">
            <emphasis role="italic">The Russians in Afghanistan, 1979–89</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1325">
            <city>New York</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref80">
          <author>
            <personname role="last-first">
              <surname>Brennan</surname> <firstname>James</firstname>
            </personname>
          </author> (<pubdate>2012</pubdate>), <title xml:id="b-9781474207300-1326">
            <emphasis role="italic">Taifa:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1327">
            <emphasis role="italic">Making Nation and Race in Urban Tanzania</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1328">
            <city>Athens</city>, <state>OH</state>
          </address>: <publishername>Ohio University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref81">
          <editor>
            <personname role="last-first">
              <surname>Breuilly</surname> <firstname>John</firstname>
            </personname>
          </editor>, ed. (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-1329">
            <emphasis role="italic">The Oxford Handbook of the History of Nationalism</emphasis>
          </title>, <address xml:id="b-9781474207300-1330">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref82">
          <author>
            <personname role="last-first">
              <surname>Bricmont</surname> <firstname>Jean</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-1331">
            <emphasis role="italic">Humanitarian Imperialism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1332">
            <emphasis role="italic">Using Human Rights to Sell War</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1333">
            <city>New York</city>
          </address>: <publishername>Monthly Review Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref83">
          <author>
            <personname role="last-first">
              <surname>Briggs</surname> <firstname>Laura</firstname>
            </personname>
          </author> (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-1334">
            <emphasis role="italic">Reproducing Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1335">
            <emphasis role="italic">Race, Sex, Science, and U.S. Imperialism in Puerto Rico</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1336">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref84">
          <author>
            <orgname>British National Archives (n.d.)</orgname>
          </author>, “<title xml:id="b-9781474207300-1337">Jungles Today are Gold Mines Tomorrow</title>,” <link xlink:href="http://www.nationalarchives.gov.uk/education/empire/g2/cs1/g2cs1s4.htm">
            <uri>http://www.nationalarchives.gov.uk/education/empire/g2/cs1/g2cs1s4.htm</uri>
          </link>, accessed <date role="accessed">February 6, 2017</date>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref85">
          <bibliomset relation="article" xml:id="b-9781474207300-1338">
            <author>
              <personname role="last-first">
                <surname>Britton</surname> <firstname>Sarah</firstname>
              </personname>
            </author> (<pubdate>2010</pubdate>), “‘<title xml:id="b-9781474207300-1339">Come and See the Empire by the All Red Route!’: Anti-Imperialism and Exhibitions in Interwar Britain</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1340">
            <title xml:id="b-9781474207300-1341">
              <emphasis role="italic">History Workshop Journal</emphasis>
            </title>, <volumenum>69</volumenum> (<issuenum>1</issuenum>): <pagenums>68–89</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref86">
          <author>
            <personname role="last-first">
              <surname>Brower</surname> <firstname>Benjamin</firstname>
            </personname>
          </author> ([<pubdate>2009</pubdate>] <date>2011</date>), <title xml:id="b-9781474207300-1342">
            <emphasis role="italic">A Desert Named Peace:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1343">
            <emphasis role="italic">The Violence of France’s Empire in the Algerian Sahara, 1844–1902</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1344">
            <city>New York</city>
          </address>: <publishername>Columbia University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref87">
          <bibliomset relation="part" xml:id="b-9781474207300-1345">
            <author>
              <personname role="last-first">
                <surname>Brown</surname> <firstname>Carolyn</firstname>
              </personname>
            </author> (<pubdate>2015</pubdate>), “<title xml:id="b-9781474207300-1346">African Labor in the Making of World War II</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1347">
            <title xml:id="b-9781474207300-1348">
              <emphasis role="italic">Africa and World War II</emphasis>
            </title>, eds <editor>
              <personname role="first-last">
                <firstname>Judith</firstname> <surname>Byfield</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname>Carolyn</firstname> <othername role="middle-initials">A.</othername> <surname>Brown</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname>Timothy</firstname> <surname>Parsons</surname>
              </personname>
            </editor>, and <editor>
              <personname role="first-last">
                <firstname>Admad</firstname> <othername role="middle">Alawad</othername> <surname>Sikainga</surname>
              </personname>
            </editor>, <pagenums>43–70</pagenums>, <address xml:id="b-9781474207300-1349">
              <city>New York</city>
            </address>: <publishername>Cambridge University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref88">
          <author>
            <personname role="last-first">
              <surname>Brubaker</surname> <firstname>Rogers</firstname>
            </personname>
          </author> (<pubdate>1998</pubdate>), <title xml:id="b-9781474207300-1350">
            <emphasis role="italic">Citizenship and Nationhood in France and Germany</emphasis>
          </title>, <address xml:id="b-9781474207300-1351">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref89">
          <author>
            <personname role="last-first">
              <surname>Buergin</surname> <firstname>Rainer</firstname>
            </personname>
          </author>, <author>
            <personname role="first-last">
              <firstname>Jeff</firstname> <surname>Black</surname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Josh</firstname> <surname>Wingrove</surname>
            </personname>
          </author> (<pubdate>2017</pubdate>), “<title xml:id="b-9781474207300-1352">G–20 Drops Anti-Protectionist Pledge as Price of U.S. Assent</title>,” <subtitle xml:id="b-9781474207300-1353">
            <emphasis role="italic">Bloomberg</emphasis>
          </subtitle>, March 18, <link xlink:href="https://www.bloomberg.com/news/articles/2017-03-18/g-20-drops-anti-protectionist-pledge-as-trump-stance-goes-global">
            <uri>https://www.bloomberg.com/news/articles/2017-03-18/g-20-drops-anti-protectionist-pledge-as-trump-stance-goes-global</uri>
          </link>, accessed <date role="accessed">March 28, 2017</date>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref90">
          <author>
            <personname role="last-first">
              <surname>Burbank</surname> <firstname>Jane</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Frederick</firstname> <surname>Cooper</surname>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-1354">
            <emphasis role="italic">Empires in World History:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1355">
            <emphasis role="italic">Power and the Politics of Difference</emphasis>
          </subtitle>. <address xml:id="b-9781474207300-1356">
            <city>Princeton</city>, <state>NJ</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref91">
          <bibliomset relation="article" xml:id="b-9781474207300-1357">
            <author>
              <personname role="last-first">
                <surname>Burke</surname> <firstname>Roland</firstname>
              </personname>
            </author> (<pubdate>2006</pubdate>), “‘<title xml:id="b-9781474207300-1358">The Compelling Dialogue of Freedom’: Human Rights at the 1955 Bandung Conference</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1359">
            <title xml:id="b-9781474207300-1360">
              <emphasis role="italic">Human Rights Quarterly</emphasis>
            </title>, <volumenum>28</volumenum> (<issuenum>4</issuenum>): <pagenums>947–65</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref92">
          <author>
            <personname role="last-first">
              <surname>Burke</surname> <firstname>Roland</firstname>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-1361">
            <emphasis role="italic">Decolonization and the Evolution of International Human Rights</emphasis>
          </title>, <address xml:id="b-9781474207300-1362">
            <city>Philadelphia</city>, <state>PA</state>
          </address>: <publishername>University of Pennsylvania Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref93">
          <editor>
            <personname role="last-first">
              <surname>Burton</surname> <firstname>Antoinette</firstname> <othername role="middle-initials">M.</othername>
            </personname>
          </editor>, ed. (<pubdate>1999</pubdate>), <title xml:id="b-9781474207300-1363">
            <emphasis role="italic">Gender, Sexuality and Colonial Modernities</emphasis>
          </title>, <address xml:id="b-9781474207300-1364">
            <city>London</city>
          </address>: <publishername>Routledge</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref94">
          <author>
            <personname role="last-first">
              <surname>Burton</surname> <firstname>Antoinette</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-1365">
            <emphasis role="italic">The Trouble with Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1366">
            <emphasis role="italic">Challenges to Modern British Imperialism</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1367">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref95">
          <bibliomset relation="article" xml:id="b-9781474207300-1368">
            <author>
              <personname role="last-first">
                <surname>Burton</surname> <firstname role="initials">A.</firstname>
              </personname>
            </author>, <author>
              <personname role="first-last">
                <firstname role="initials">A.</firstname> <surname>Espiritu</surname>
              </personname>
            </author> and <author>
              <personname role="first-last">
                <firstname role="initials">F.C.</firstname> <surname>Wilkins</surname>
              </personname>
            </author> (<pubdate>2006</pubdate>), “<title xml:id="b-9781474207300-1369">The Fate of Nationalisms in the Age of Bandung</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1370">
            <title xml:id="b-9781474207300-1371">
              <emphasis role="italic">Radical History Review</emphasis>
            </title>, <volumenum>95</volumenum>: <pagenums>145–8</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref96">
          <author>
            <personname role="last-first">
              <surname>Bush</surname> <firstname>Barbara</firstname>
            </personname>
          </author> (<pubdate>1999</pubdate>), <title xml:id="b-9781474207300-1372">
            <emphasis role="italic">Imperialism, Race and Resistance:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1373">
            <emphasis role="italic">Africa and Britain, 1919–1945</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1374">
            <city>New York</city>
          </address>: <publishername>Routledge</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref97">
          <bibliomset relation="article" xml:id="b-9781474207300-1375">
            <author>
              <personname role="last-first">
                <surname>Butalia</surname> <firstname>Urvashi</firstname>
              </personname>
            </author> (<pubdate>1993</pubdate>), “<title xml:id="b-9781474207300-1376">Community, State and Gender:</title> <subtitle xml:id="b-9781474207300-1377">On Women’s Agency during Partition</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1378">
            <title xml:id="b-9781474207300-1379">
              <emphasis role="italic">Economic and Political Weekly</emphasis>
            </title>, <volumenum>28</volumenum> (<issuenum>17</issuenum>): <pagenums>12–24</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref98">
          <author>
            <personname role="last-first">
              <surname>Butalia</surname> <firstname>Urvashi</firstname>
            </personname>
          </author> (<pubdate>1998</pubdate>), <title xml:id="b-9781474207300-1380">
            <emphasis role="italic">The Other Side of Silence:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1381">
            <emphasis role="italic">Voices from the Partition of India</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1382">
            <city>New Delhi</city>
          </address>: <publishername>Penguin India</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref99">
          <editor>
            <personname role="last-first">
              <surname>Butler</surname> <firstname>Larry</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Sarah</firstname> <surname>Stockwell</surname>
            </personname>
          </editor>, eds (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-1383">
            <emphasis role="italic">The Wind of Change:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1384">
            <emphasis role="italic">Harold Macmillan and British Decolonization</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1385">
            <city>London</city>
          </address>: <publishername>Palgrave Macmillan</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref100">
          <author>
            <personname role="last-first">
              <surname>Byrne</surname> <othername role="middle">Jeffrey</othername> <firstname>James</firstname>
            </personname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-1386">
            <emphasis role="italic">Mecca of Revolution:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1387">
            <emphasis role="italic">Algeria, Decolonization, and the Third World Order</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1388">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<?page value="206"?>
<bibliomixed role="website" xml:id="b-9781474207300-ref101">
          <author>
            <personname role="first-last">
              <firstname>Cairns</firstname> <surname>Group</surname>
            </personname>
          </author> (n.d.), “<title xml:id="b-9781474207300-1389">Background on the Cairns Group and the WTO Doha Round</title>,” <link xlink:href="http://cairnsgroup.org/Pages/wto_negotiations.aspx">
            <uri>http://cairnsgroup.org/Pages/wto_negotiations.aspx</uri>
          </link>, accessed <date role="accessed">January 22, 2017</date>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref102">
          <author>
            <personname role="last-first">
              <surname>Callwell</surname> <firstname>Charles</firstname> <othername role="middle-initials">E.</othername>
            </personname>
          </author> ([<pubdate>1896</pubdate>] <date>1906</date>), <title xml:id="b-9781474207300-1390">
            <emphasis role="italic">Small Wars:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1391">
            <emphasis role="italic">Their Principles and Practice</emphasis>
          </subtitle>, 3rd edn, <address xml:id="b-9781474207300-1392">
            <city>London</city>
          </address>: <publishername>General Staff, War Office</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref103">
          <author>
            <personname role="last-first">
              <surname>Camiscioli</surname> <firstname>Elisa</firstname>
            </personname>
          </author> (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-1393">
            <emphasis role="italic">Reproducing the French Race:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1394">
            <emphasis role="italic">Immigration, Intimacy, and Embodiment in the Early Twentieth Century</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1395">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref104">
          <author>
            <personname role="last-first">
              <surname>Campbell</surname> <firstname>Chloe</firstname>
            </personname>
          </author> (<pubdate>2007</pubdate>), <title xml:id="b-9781474207300-1396">
            <emphasis role="italic">Race and Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1397">
            <emphasis role="italic">Eugenics in Colonial Kenya</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1398">
            <city>Manchester</city>
          </address>: <publishername>Manchester University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref105">
          <author>
            <personname role="last-first">
              <surname>Carbaugh</surname> <firstname>Robert</firstname> <othername role="middle-initials">J.</othername>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-1399">
            <emphasis role="italic">International Economics</emphasis>
          </title>, <address xml:id="b-9781474207300-1400">
            <city>Boston</city>, <state>MA</state>
          </address>: <publishername>Cengage</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref106">
          <editor>
            <personname role="last-first">
              <surname>Carey</surname> <firstname>Jane</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Jane</firstname> <surname>Lydon</surname>
            </personname>
          </editor>, eds (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-1401">
            <emphasis role="italic">Indigenous Networks:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1402">
            <emphasis role="italic">Mobility, Connections and Exchange</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1403">
            <city>London</city>
          </address>: <publishername>Routledge.</publishername>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref107">
          <author>
            <personname role="last-first">
              <surname>Castells</surname> <firstname>Manuel</firstname>
            </personname>
          </author> (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-1404">
            <emphasis role="italic">Communication Power</emphasis>
          </title>, <address xml:id="b-9781474207300-1405">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref108">
          <author>
            <personname role="last-first">
              <surname>Césaire</surname> <firstname>Aimé</firstname>
            </personname>
          </author> ([<pubdate>1950</pubdate>] <date>2000</date>), <title xml:id="b-9781474207300-1406">
            <emphasis role="italic">Discourse on Colonialism</emphasis>
          </title>, trans. <author>
            <personname role="first-last">
              <firstname role="initials">J.</firstname> <surname>Pinkham</surname>
            </personname>
          </author>, <address xml:id="b-9781474207300-1407">
            <city>New York</city>
          </address>: <publishername>Monthly Review Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref109">
          <author>
            <personname role="last-first">
              <surname>Chakrabarty</surname> <firstname>Dipesh</firstname>
            </personname>
          </author> (<pubdate>1989</pubdate>), <title xml:id="b-9781474207300-1408">
            <emphasis role="italic">Rethinking Working-Class History:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1409">
            <emphasis role="italic">Bengal, 1890–1940</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1410">
            <city>Princeton</city>, <state>NJ</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref110">
          <bibliomset relation="part" xml:id="b-9781474207300-1411">
            <author>
              <personname role="last-first">
                <surname>Chakrabarty</surname> <firstname>Dipesh</firstname>
              </personname>
            </author> (<pubdate>2010</pubdate>), “<title xml:id="b-9781474207300-1412">The Legacies of Bandung:</title> <subtitle xml:id="b-9781474207300-1413">Decolonization and the Politics of Culture</subtitle>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1414">
            <title xml:id="b-9781474207300-1415">
              <emphasis role="italic">Making a World After Empire:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1416">
              <emphasis role="italic">The Bandung Moment and its Political Afterlives</emphasis>
            </subtitle>, ed. <editor>
              <personname role="first-last">
                <firstname>Christopher</firstname> <surname>Lee</surname>
              </personname>
            </editor>, <pagenums>45–68</pagenums>, <address xml:id="b-9781474207300-1417">
              <city>Athens</city>, <state>OH</state>
            </address>: <publishername>Ohio University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref111">
          <author>
            <personname role="last-first">
              <surname>Chandavarkar</surname> <firstname>Rajnarayan</firstname>
            </personname>
          </author> (<pubdate>1994</pubdate>), <title xml:id="b-9781474207300-1418">
            <emphasis role="italic">The Origins of Industrial Capitalism in India:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1419">
            <emphasis role="italic">Business Strategies and the Working Classes in Bombay, 1900–1940</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1420">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref112">
          <author>
            <personname role="last-first">
              <surname>Chang</surname> <firstname>Ha-Joon</firstname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-1421">
            <emphasis role="italic">Bad Samaritans; The Myth of Free Trade and the Secret History of Capitalism</emphasis>
          </title>, <address xml:id="b-9781474207300-1422">
            <city>New York</city>
          </address>: <publishername>Bloomsbury Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref113">
          <bibliomset relation="part" xml:id="b-9781474207300-1423">
            <author>
              <personname role="last-first">
                <surname>Chanock</surname> <firstname>Martin</firstname>
              </personname>
            </author> (<pubdate>1982</pubdate>), “<title xml:id="b-9781474207300-1424">Making Customary Law:</title> <subtitle xml:id="b-9781474207300-1425">Men, Women, and Courts in Colonial Northern Rhodesia</subtitle>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1426">
            <title xml:id="b-9781474207300-1427">
              <emphasis role="italic">African Women and the Law:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1428">
              <emphasis role="italic">Historical Perspectives</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Margaret</firstname> <othername role="middle">Jean</othername> <surname>Hay</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Marcia</firstname> <surname>Wright</surname>
              </personname>
            </editor>, <pagenums>53–67</pagenums>, <address xml:id="b-9781474207300-1429">
              <city>Boston</city>, <state>MA</state>
            </address>: <publishername>Boston University, African Studies Center</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref114">
          <author>
            <personname role="last-first">
              <surname>Charby</surname> <firstname>Jacques</firstname>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-1430">
            <emphasis role="italic">Les Porteurs d’espoir:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1431">
            <emphasis role="italic">Les Réseaux de Soutien au FLN Pendant la Guerre d’Algérie</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1432">
            <city>Les Acteurs Parlent</city>, <state>Paris</state>
          </address>: <publishername>Découverte</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref115">
          <author>
            <personname role="last-first">
              <surname>Chase</surname> <othername role="middle">Paul</othername> <firstname>Wilder</firstname>
            </personname>
          </author> (<pubdate>1992</pubdate>), “<title xml:id="b-9781474207300-1433">The Politics of Morality in Weimar Germany:</title> <subtitle xml:id="b-9781474207300-1434">Public Controversy and Parliamentary Debate over Changes in Moral Behavior in the Twenties</subtitle>,” PhD dissertation, <publishername>State University of New York at Stony Brook</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref116">
          <bibliomset relation="article" xml:id="b-9781474207300-1435">
            <author>
              <personname role="last-first">
                <surname>Chatterjee</surname> <firstname>Partha</firstname>
              </personname>
            </author> (<pubdate>1989</pubdate>), “<title xml:id="b-9781474207300-1436">Colonialism, Nationalism and Colonized Women:</title> <subtitle xml:id="b-9781474207300-1437">The Contest in India</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1438">
            <title xml:id="b-9781474207300-1439">
              <emphasis role="italic">American Ethnologist</emphasis>
            </title>, <volumenum>16</volumenum> (<issuenum>4</issuenum>): <pagenums>662–83</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref117">
          <editor>
            <personname role="last-first">
              <surname>Chaudhuri</surname> <firstname>Nupur</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Margaret</firstname> <surname>Strobel</surname>
            </personname>
          </editor>, eds (<pubdate>1992</pubdate>), <title xml:id="b-9781474207300-1440">
            <emphasis role="italic">Western Women and Imperialism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1441">
            <emphasis role="italic">Complicity and Resistance</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1442">
            <city>Bloomington</city>, <state>IN</state>
          </address>: <publishername>Indiana University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref118">
          <bibliomset relation="part" xml:id="b-9781474207300-1443">
            <author>
              <personname role="last-first">
                <surname>Chi-Minh</surname> <firstname>Ho</firstname>
              </personname>
            </author> (<pubdate>1970</pubdate>), “<title xml:id="b-9781474207300-1444">The Path that Led Me to Leninism</title>” (April <pubdate>1960</pubdate>),</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1445">
            <title xml:id="b-9781474207300-1446">
              <emphasis role="italic">Selected Articles and Speeches, 1920–1967</emphasis>
            </title>, ed. <editor>
              <personname role="first-last">
                <firstname>Jack</firstname> <surname>Woddis</surname>
              </personname>
            </editor>, <pagenums>156–8</pagenums>, <address xml:id="b-9781474207300-1447">
              <city>New York</city>
            </address>: <publishername>International Publishers</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref119">
          <author>
            <personname role="last-first">
              <surname>Chomsky</surname> <firstname>Aviva</firstname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-1448">
            <emphasis role="italic">Linked Labor Histories:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1449">
            <emphasis role="italic">New England, Colombia, and the Making of a Global Working-Class</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1450">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref120">
          <bibliomset relation="article" xml:id="b-9781474207300-1451">
            <author>
              <personname role="last-first">
                <surname>Chow</surname> <firstname>Karen</firstname>
              </personname>
            </author> (<pubdate>1999</pubdate>), “<title xml:id="b-9781474207300-1452">Popular Sexual Knowledges and Women’s Agency in 1920s England: Marie Stopes’s ‘Married Love’ and E. M. Hull’s ‘The Sheik</title>,’ ”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1453">
            <title xml:id="b-9781474207300-1454">
              <emphasis role="italic">Feminist Review</emphasis>
            </title>, <volumenum>63</volumenum> (<issuenum>1</issuenum>): <pagenums>64–87</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref121">
          <author>
            <personname role="last-first">
              <surname>Choy</surname> <othername role="middle">Catherine</othername> <firstname>Ceniza</firstname>
            </personname>
          </author> (<pubdate>2003</pubdate>), <title xml:id="b-9781474207300-1455">
            <emphasis role="italic">Empire of Care:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1456">
            <emphasis role="italic">Nursing and Migration in Filipino American History</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1457">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref122">
          <author>
            <personname role="last-first">
              <surname>Chrisler</surname> <firstname>Matt</firstname>
            </personname>
          </author>, <author>
            <personname role="first-last">
              <firstname>Jaskiran</firstname> <surname>Dhillon</surname>
            </personname>
          </author>, and <author>
            <personname role="first-last">
              <firstname>Audrey</firstname> <surname>Simpson</surname>
            </personname>
          </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-1458">The Standing Rock Syllabus Project</title>,” October 21, <link xlink:href="http://www.publicseminar.org/2016/10/nodapl-syllabus-project/">
            <uri>http://www.publicseminar.org/2016/10/nodapl-syllabus-project/</uri>
          </link>.</bibliomixed>
<?page value="207"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref123">
          <author>
            <personname role="last-first">
              <surname>Chua</surname> <firstname>Amy</firstname>
            </personname>
          </author> (<pubdate>2007</pubdate>), <title xml:id="b-9781474207300-1459">
            <emphasis role="italic">Day of Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1460">
            <emphasis role="italic">How Hyperpowers Rise to Global Dominance—and Why They Fall</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1461">
            <city>New York</city>
          </address>, <publishername>Doubleday</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref124">
          <bibliomset relation="article" xml:id="b-9781474207300-1462">
            <author>
              <personname role="last-first">
                <surname>Citino</surname> <firstname>Robert</firstname> <othername role="middle-initials">M.</othername>
              </personname>
            </author> (<pubdate>2007</pubdate>), “<title xml:id="b-9781474207300-1463">Military Histories Old and New: A Reintroduction</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1464">
            <title xml:id="b-9781474207300-1465">
              <emphasis role="italic">American Historical Review</emphasis>
            </title>, <volumenum>112</volumenum> (<issuenum>4</issuenum>): <pagenums>1070–90</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref125">
          <author>
            <personname role="last-first">
              <surname>Clancy-Smith</surname> <firstname>Julia</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Frances</firstname> <surname>Gouda</surname>
            </personname>
          </author> (<pubdate>1998</pubdate>), <title xml:id="b-9781474207300-1466">
            <emphasis role="italic">Domesticating the Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1467">
            <emphasis role="italic">Race, Gender, and Family Life in French and Dutch Colonialism</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1468">
            <city>Charlottesville</city>, <state>VA</state>
          </address>: <publishername>University Press of Virginia</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref126">
          <bibliomset relation="article" xml:id="b-9781474207300-1469">
            <author>
              <personname role="last-first">
                <surname>Clark</surname> <firstname>Hannah-Louise</firstname>
              </personname>
            </author> (<pubdate>2013</pubdate>), “<title xml:id="b-9781474207300-1470">Civilization and Syphilization:</title> <subtitle xml:id="b-9781474207300-1471">A Doctor and His Disease in Colonial Morocco</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1472">
            <title xml:id="b-9781474207300-1473">
              <emphasis role="italic">Bulletin of the History of Medicine</emphasis>
            </title>, <volumenum>87</volumenum> (<issuenum>1</issuenum>): <pagenums>86–114</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref127">
          <author>
            <personname role="last-first">
              <surname>Clark</surname> <firstname>Nancy</firstname> <othername role="middle-initials">L.</othername>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>William</firstname> <othername role="middle-initials">H.</othername> <surname>Worger</surname>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-1474">
            <emphasis role="italic">South Africa:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1475">
            <emphasis role="italic">The Rise and Fall of Apartheid</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1476">
            <city>London</city>
          </address>: <publishername>Routledge</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref128">
          <bibliomset relation="article" xml:id="b-9781474207300-1477">
            <author>
              <personname role="last-first">
                <surname>Clavin</surname> <firstname>Patricia</firstname>
              </personname>
            </author> (<pubdate>2005</pubdate>), “<title xml:id="b-9781474207300-1478">Defining Transnationalism</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1479">
            <title xml:id="b-9781474207300-1480">
              <emphasis role="italic">Contemporary European History</emphasis>
            </title>, <volumenum>14</volumenum> (<issuenum>4</issuenum>): <pagenums>421–39</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref129">
          <bibliomset relation="part" xml:id="b-9781474207300-1481">
            <author>
              <personname role="last-first">
                <surname>Clavin</surname> <firstname>Patricia</firstname>
              </personname>
            </author> (<pubdate>2011</pubdate>), “<title xml:id="b-9781474207300-1482">Introduction:</title> <subtitle xml:id="b-9781474207300-1483">Conceptualising Internationalism Between the World Wars</subtitle>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1484">
            <title xml:id="b-9781474207300-1485">
              <emphasis role="italic">Internationalism Reconfigured:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1486">
              <emphasis role="italic">Transnational Ideas and Movements Between the World Wars</emphasis>
            </subtitle>, ed. <editor>
              <personname role="first-last">
                <firstname role="initials">D.</firstname> <surname>Laqua</surname>
              </personname>
            </editor>, <pagenums>1–14</pagenums>, <address xml:id="b-9781474207300-1487">
              <city>London</city>
            </address>: <publishername>Palgrave</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref130">
          <bibliomset relation="article" xml:id="b-9781474207300-1488">
            <author>
              <personname role="last-first">
                <surname>Clayton</surname> <firstname>Anthony</firstname>
              </personname>
            </author> (<pubdate>1992</pubdate>), “<title xml:id="b-9781474207300-1489">The Sétif Uprising of May 1945</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1490">
            <title xml:id="b-9781474207300-1491">
              <emphasis role="italic">Small Wars and Insurgencies</emphasis>
            </title>, <volumenum>3</volumenum> (<issuenum>1</issuenum>): <pagenums>1–21</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref131">
          <author>
            <personname role="last-first">
              <surname>Clayton</surname> <firstname>Anthony</firstname>
            </personname>
          </author> (<pubdate>1994</pubdate>), <title xml:id="b-9781474207300-1492">
            <emphasis role="italic">The Wars of French Decolonization</emphasis>
          </title>, <address xml:id="b-9781474207300-1493">
            <city>London</city>
          </address>: <publishername>Routledge</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref132">
          <author>
            <personname role="last-first">
              <surname>Coates</surname> <firstname>Ken</firstname> <othername role="middle-initials">S.</othername>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-1494">
            <emphasis role="italic">A Global History of Indigenous Peoples:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1495">
            <emphasis role="italic">Struggle and Survival</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1496">
            <city>New York</city>
          </address>: <publishername>Palgrave Macmillan</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref133">
          <bibliomset relation="article" xml:id="b-9781474207300-1497">
            <author>
              <personname role="last-first">
                <surname>Cohen-Hattab</surname> <firstname>Kobi</firstname>
              </personname>
            </author> and <author>
              <personname role="first-last">
                <firstname>Yossi</firstname> <surname>Katz</surname>
              </personname>
            </author> (<pubdate>2001</pubdate>), “<title xml:id="b-9781474207300-1498">The Attraction of Palestine:</title> <subtitle xml:id="b-9781474207300-1499">Tourism in the Years 1850–1948</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1500">
            <title xml:id="b-9781474207300-1501">
              <emphasis role="italic">Journal of Historical Geography</emphasis>
            </title>, <volumenum>27</volumenum> (<issuenum>2</issuenum>): <pagenums>166–177</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref134">
          <author>
            <personname role="last-first">
              <surname>Cohn</surname> <firstname>Bernard</firstname> <othername role="middle-initials">S.</othername>
            </personname>
          </author> (<pubdate>1987</pubdate>), <title xml:id="b-9781474207300-1502">
            <emphasis role="italic">An Anthropologist among the Historians and Other Essays</emphasis>
          </title>, <address xml:id="b-9781474207300-1503">
            <city>Delhi</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref135">
          <author>
            <personname role="last-first">
              <surname>Colby</surname> <firstname>Jason</firstname> <othername role="middle-initials">M.</othername>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-1504">
            <emphasis role="italic">The Business of Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1505">
            <emphasis role="italic">United Fruit, Race and U.S. Expansion in Central America</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1506">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref136">
          <author>
            <personname role="last-first">
              <surname>Coleman</surname> <firstname>Kevin</firstname>
            </personname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-1507">
            <emphasis role="italic">A Camera in the Garden of Eden:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1508">
            <emphasis role="italic">The Self-Forging of a Banana Republic</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1509">
            <city>Austin</city>, <state>TX</state>
          </address>: <publishername>University of Texas Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref137">
          <author>
            <personname role="last-first">
              <surname>Collett</surname> <firstname>Nigel</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-1510">
            <emphasis role="italic">The Butcher of Amritsar:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1511">
            <emphasis role="italic">General Reginald Dyer</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1512">
            <city>London</city>
          </address>: <publishername>Bloomsbury</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref138">
          <author>
            <personname role="last-first">
              <surname>Comaroff</surname> <firstname>John</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Jean</firstname> <surname>Comaroff</surname>
            </personname>
          </author> (<pubdate>1991</pubdate>), <title xml:id="b-9781474207300-1513">
            <emphasis role="italic">Of Revelation and Revolution, Vol. 1: Christianity, Colonialism, and Consciousness in South Africa</emphasis>
          </title>, <address xml:id="b-9781474207300-1514">
            <city>Chicago</city>, <state>IL</state>
          </address>: <publishername>University of Chicago Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref139">
          <author>
            <personname role="last-first">
              <surname>Comaroff</surname> <firstname>John</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Jean</firstname> <surname>Comaroff</surname>
            </personname>
          </author> (<pubdate>1997</pubdate>), <title xml:id="b-9781474207300-1515">
            <emphasis role="italic">Of Revelation and Revolution, Vol. 2: The Dialectics of Modernity on a South African Frontier</emphasis>
          </title>, <address xml:id="b-9781474207300-1516">
            <city>Chicago</city>, <state>IL</state>
          </address>: <publishername>University of Chicago Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref140">
          <author>
            <personname role="last-first">
              <surname>Conklin</surname> <firstname>Alice</firstname> <othername role="middle-initials">L.</othername>
            </personname>
          </author> (<pubdate>1997</pubdate>), <title xml:id="b-9781474207300-1517">
            <emphasis role="italic">A Mission to Civilize:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1518">
            <emphasis role="italic">The Republican Idea of Empire in France and West Africa, 1895–1930</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1519">
            <city>Stanford</city>, <state>CA</state>
          </address>: <publishername>Stanford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref141">
          <author>
            <personname role="last-first">
              <surname>Conklin</surname> <firstname>Alice</firstname>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-1520">
            <emphasis role="italic">In the Museum of Man:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1521">
            <emphasis role="italic">Race, Anthropology, and Empire in France, 1850–1950</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1522">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref142">
          <author>
            <personname role="last-first">
              <surname>Connelly</surname> <firstname>Matthew</firstname>
            </personname>
          </author> (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-1523">
            <emphasis role="italic">A Diplomatic Revolution:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1524">
            <emphasis role="italic">Algeria’s Fight for Independence and the Origins of the Post-Cold War Era</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1525">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref143">
          <author>
            <personname role="last-first">
              <surname>Cooper</surname> <firstname>Frederick</firstname>
            </personname>
          </author> (<pubdate>1987</pubdate>), <title xml:id="b-9781474207300-1526">
            <emphasis role="italic">On the African Waterfront:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1527">
            <emphasis role="italic">Urban Disorder and the Transformation of Work in Colonial Mombasa</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1528">
            <city>New Haven</city>, <state>CT</state>
          </address>: <publishername>Yale University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref144">
          <bibliomset relation="article" xml:id="b-9781474207300-1529">
            <author>
              <personname role="last-first">
                <surname>Cooper</surname> <firstname>Frederick</firstname>
              </personname>
            </author> (<pubdate>1996</pubdate>a), “‘<title xml:id="b-9781474207300-1530">Our Strike’: Equality, Anticolonial Politics and the 1947–48 Railway Strike in French West Africa</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1531">
            <title xml:id="b-9781474207300-1532">
              <emphasis role="italic">Journal of African History</emphasis>
            </title>, <volumenum>37</volumenum> (<issuenum>1</issuenum>): <pagenums>81–118</pagenums>.</bibliomset>
        </bibliomixed>
<?page value="208"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref145">
          <author>
            <personname role="last-first">
              <surname>Cooper</surname> <firstname>Frederick</firstname>
            </personname>
          </author> (<pubdate>1996</pubdate>b), <title xml:id="b-9781474207300-1533">
            <emphasis role="italic">Decolonization and African Society:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1534">
            <emphasis role="italic">The Labor Question in French and British Africa</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1535">
            <city>New York</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref146">
          <author>
            <personname role="last-first">
              <surname>Cooper</surname> <firstname>Frederick</firstname>
            </personname>
          </author> (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-1536">
            <emphasis role="italic">Africa Since 1940:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1537">
            <emphasis role="italic">The Past of the Present</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1538">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref147">
          <bibliomset relation="article" xml:id="b-9781474207300-1539">
            <author>
              <personname role="last-first">
                <surname>Cooper</surname> <firstname>Frederick</firstname>
              </personname>
            </author> (<pubdate>2008</pubdate>), “<title xml:id="b-9781474207300-1540">Possibility and Constraint:</title> <subtitle xml:id="b-9781474207300-1541">African Independence in Historical Perspective</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1542">
            <title xml:id="b-9781474207300-1543">
              <emphasis role="italic">Journal of African History</emphasis>
            </title>, <volumenum>49</volumenum>: <pagenums>167–96</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref148">
          <author>
            <personname role="last-first">
              <surname>Cooper</surname> <firstname>Frederick</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-1544">
            <emphasis role="italic">Citizenship between Empire and Nation:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1545">
            <emphasis role="italic">Remaking France and French Africa</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1546">
            <city>Princeton</city>, <state>NJ</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref149">
          <author>
            <personname role="last-first">
              <surname>Cooper</surname> <firstname>Frederick</firstname>
            </personname>
          </author>, <author>
            <personname role="first-last">
              <firstname>Thomas</firstname> <othername role="middle-initials">C.</othername> <surname>Holt</surname>
            </personname>
          </author>, and <author>
            <personname role="first-last">
              <firstname>Rebecca</firstname> <othername role="middle-initials">J.</othername> <surname>Scott</surname>
            </personname>
          </author> (<pubdate>2000</pubdate>), <title xml:id="b-9781474207300-1547">
            <emphasis role="italic">Beyond Slavery:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1548">
            <emphasis role="italic">Explorations of Race, Labor, and Citizenship in Postemancipation Societies</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1549">
            <city>Chapel Hill</city>, <state>NC</state>
          </address>: <publishername>University of North Carolina Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref150">
          <bibliomset relation="part" xml:id="b-9781474207300-1550">
            <author>
              <personname role="last-first">
                <surname>Cooper</surname> <firstname>Nicola</firstname> <othername role="middle-initials">J.</othername>
              </personname>
            </author> (<pubdate>2009</pubdate>), “<title xml:id="b-9781474207300-1551">Gendering the Colonial Enterprise</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1552">
            <title xml:id="b-9781474207300-1553">
              <emphasis role="italic">Empires and Boundaries:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1554">
              <emphasis role="italic">Race, Class, and Gender in Colonial Settings</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Harald</firstname> <surname>Fischer-Tiné</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Susanne</firstname> <surname>Gehrmann</surname>
              </personname>
            </editor>, <pagenums>129–45</pagenums>, <address xml:id="b-9781474207300-1555">
              <city>New York</city>
            </address>: <publishername>Routledge.</publishername>
          </bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref151">
          <editor>
            <personname role="last-first">
              <surname>Cronon</surname> <firstname>William</firstname>
            </personname>
          </editor>, ed. (<pubdate>1995</pubdate>), <title xml:id="b-9781474207300-1556">
            <emphasis role="italic">Uncommon Ground:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1557">
            <emphasis role="italic">Rethinking the Human Place in Nature</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1558">
            <city>New York</city>
          </address>: <publishername>W.W. Norton</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref152">
          <author>
            <personname role="last-first">
              <surname>Crosby</surname> <firstname role="initials">A.</firstname>
            </personname>
          </author> (<pubdate>1986</pubdate>), <title xml:id="b-9781474207300-1559">
            <emphasis role="italic">Ecological Imperialism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1560">
            <emphasis role="italic">The Biological Expansion of Europe</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1561">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref153">
          <bibliomset relation="part" xml:id="b-9781474207300-1562">
            <author>
              <personname role="last-first">
                <surname>Crystal</surname> <firstname>Jill</firstname>
              </personname>
            </author> (<pubdate>2017</pubdate>), “<title xml:id="b-9781474207300-1563">Eastern Arabian States:</title> <subtitle xml:id="b-9781474207300-1564">Kuwait, Bahrain, Qatar, United Arab Emirates, and Oman</subtitle>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1565">
            <title xml:id="b-9781474207300-1566">
              <emphasis role="italic">The Government and Politics of the Middle East and North Africa</emphasis>
            </title>, 8th edn, eds <editor>
              <personname role="first-last">
                <firstname>Mark</firstname> <surname>Gasiorowski</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Sean</firstname> <othername role="middle-initials">L.</othername> <surname>Yom</surname>
              </personname>
            </editor>, <pagenums>337–376</pagenums>, <address xml:id="b-9781474207300-1567">
              <city>Boulder</city>, <state>CO</state>
            </address>: <publishername>Westview Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref154">
          <bibliomset relation="article" xml:id="b-9781474207300-1568">
            <author>
              <personname role="last-first">
                <surname>Curless</surname> <firstname>Gareth</firstname>
              </personname>
            </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-1569">Introduction:</title> <subtitle xml:id="b-9781474207300-1570">Trade Unions in the Global South from Imperialism to the Present Day</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1571">
            <title xml:id="b-9781474207300-1572">
              <emphasis role="italic">Labor History</emphasis>
            </title>, <volumenum>57</volumenum> (<issuenum>1</issuenum>): <pagenums>1–19</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref155">
          <author>
            <personname role="last-first">
              <surname>Curtin</surname> <firstname>Philip</firstname> <othername role="middle-initials">D.</othername>
            </personname>
          </author> (<pubdate>1964</pubdate>), <title xml:id="b-9781474207300-1573">
            <emphasis role="italic">The Image of Africa:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1574">
            <emphasis role="italic">British Ideas and Action, 1780–1850</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1575">
            <city>Madison</city>, <state>WI</state>
          </address>: <publishername>University of Wisconsin Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref156">
          <bibliomset relation="part" xml:id="b-9781474207300-1576">
            <author>
              <personname role="last-first">
                <surname>Curtin</surname> <firstname>Philip</firstname>
              </personname>
            </author> (<pubdate>1992</pubdate>), “<title xml:id="b-9781474207300-1577">Medical Knowledge and Urban Planning in Colonial Tropical Africa</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1578">
            <title xml:id="b-9781474207300-1579">
              <emphasis role="italic">The Social Basis of Health and Healing in Africa</emphasis>
            </title>, eds <editor>
              <personname role="first-last">
                <firstname>Steven</firstname> <surname>Feierman</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>John</firstname> <othername role="middle-initials">M.</othername> <surname>Janzen</surname>
              </personname>
            </editor>, <pagenums>235–255</pagenums>, <address xml:id="b-9781474207300-1580">
              <city>Berkeley</city>, <state>CA</state>
            </address>: <publishername>University of California Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref157">
          <author>
            <personname role="last-first">
              <surname>Dahm</surname> <firstname>Bernhard</firstname>
            </personname>
          </author> (<pubdate>1969</pubdate>), <title xml:id="b-9781474207300-1581">
            <emphasis role="italic">Sukarno and the Struggle for Indonesian Independence</emphasis>
          </title>, <address xml:id="b-9781474207300-1582">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref158">
          <author>
            <personname role="last-first">
              <surname>Davey</surname> <firstname>Eleanor</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-1583">
            <emphasis role="italic">Idealism Beyond Borders:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1584">
            <emphasis role="italic">The French Revolutionary Left and the Rise of Humanitarianism, 1954–1988</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1585">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref159">
          <bibliomset relation="article" xml:id="b-9781474207300-1586">
            <author>
              <personname role="last-first">
                <surname>Davin</surname> <firstname>Anna</firstname>
              </personname>
            </author> (<pubdate>1978</pubdate>), “<title xml:id="b-9781474207300-1587">Imperialism and Motherhood</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1588">
            <title xml:id="b-9781474207300-1589">
              <emphasis role="italic">History Workshop</emphasis>
            </title>, <volumenum>5</volumenum>: <pagenums>9–65</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref160">
          <author>
            <personname role="last-first">
              <surname>Davis</surname> <firstname>Diana</firstname> <othername role="middle-initials">K.</othername>
            </personname>
          </author> (<pubdate>2007</pubdate>), <title xml:id="b-9781474207300-1590">
            <emphasis role="italic">Resurrecting the Granary of Rome:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1591">
            <emphasis role="italic">Environmental History and French Colonial Expansion in North Africa</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1592">
            <city>Athens</city>, <state>OH</state>
          </address>: <publishername>Ohio University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref161">
          <author>
            <personname role="last-first">
              <surname>De</surname> <othername role="middle">Costa</othername> <firstname>Ravi</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>a), <title xml:id="b-9781474207300-1593">
            <emphasis role="italic">A Higher Authority:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1594">
            <emphasis role="italic">Indigenous Transnationalism and Australia</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1595">
            <city>Sydney</city>, <state>NSW</state>
          </address>: <publishername>UNSW Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref162">
          <bibliomset relation="article" xml:id="b-9781474207300-1596">
            <author>
              <personname role="last-first">
                <surname>De</surname> <othername role="middle">Costa</othername> <firstname>Ravi</firstname>
              </personname>
            </author> (<pubdate>2006</pubdate>b), “<title xml:id="b-9781474207300-1597">Identity, Authority, and the Moral Worlds of Indigenous Petitions</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1598">
            <title xml:id="b-9781474207300-1599">
              <emphasis role="italic">Comparative Studies in Society and History</emphasis>
            </title>, <volumenum>48</volumenum> (<issuenum>3</issuenum>): <pagenums>669–98</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref163">
          <author>
            <personname role="last-first">
              <surname>Degler</surname> <firstname>Carl</firstname>
            </personname>
          </author> (<pubdate>1971</pubdate>), <title xml:id="b-9781474207300-1600">
            <emphasis role="italic">Neither Black nor White:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1601">
            <emphasis role="italic">Slavery and Race Relations in Brazil and the United States</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1602">
            <city>New York</city>
          </address>: <publishername>Macmillan</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref164">
          <author>
            <personname role="last-first">
              <surname>De</surname> <othername role="middle">Grazia</othername> <firstname>Victoria</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-1603">
            <emphasis role="italic">Irresistible Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1604">
            <emphasis role="italic">America’s Advance through Twentieth-Century Europe</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1605">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref165">
          <author>
            <personname role="last-first">
              <surname>Derrick</surname> <firstname>Jonathan</firstname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-1606">
            <emphasis role="italic">Africa’s “Agitators”:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1607">
            <emphasis role="italic">Militant Anti-Colonialism in Africa and the West, 1918–1939</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1608">
            <city>New York</city>
          </address>: <publishername>Columbia University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref166">
          <author>
            <personname role="last-first">
              <surname>Dikötter</surname> <firstname>Frank</firstname>
            </personname>
          </author> (<pubdate>1992</pubdate>), <title xml:id="b-9781474207300-1609">
            <emphasis role="italic">The Discourse of Race in Modern China</emphasis>
          </title>, <address xml:id="b-9781474207300-1610">
            <city>Stanford</city>, <state>CA</state>
          </address>: <publishername>Stanford University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref167">
          <bibliomset relation="part" xml:id="b-9781474207300-1611">
            <author>
              <personname role="last-first">
                <surname>Dikötter</surname> <firstname>Frank</firstname>
              </personname>
            </author> (<pubdate>1997</pubdate>), “<title xml:id="b-9781474207300-1612">Racial Discourse in China:</title> <subtitle xml:id="b-9781474207300-1613">Continuities and Permutations</subtitle>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1614">
            <title xml:id="b-9781474207300-1615">
              <emphasis role="italic">The Construction of Racial Identities in China and Japan:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1616">
              <emphasis role="italic">Historical and Contemporary Perspectives</emphasis>
            </subtitle>, ed. <editor>
              <personname role="first-last">
                <firstname>Frank</firstname> <surname>Dikötter</surname>
              </personname>
            </editor>, <pagenums>12–33</pagenums>, <address xml:id="b-9781474207300-1617">
              <city>Honolulu</city>, <state>HI</state>
            </address>: <publishername>University of Hawai’i Press</publishername>.</bibliomset>
        </bibliomixed>
<?page value="209"?>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref168">
          <bibliomset relation="part" xml:id="b-9781474207300-1618">
            <author>
              <personname role="last-first">
                <surname>Dimier</surname> <firstname>Véronique</firstname>
              </personname>
            </author> (<pubdate>2009</pubdate>), “<title xml:id="b-9781474207300-1619">Recycling Empire. French Colonial Administration at the Heart of European Development Policy</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1620">
            <title xml:id="b-9781474207300-1621">
              <emphasis role="italic">The French Colonial Mind:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1622">
              <emphasis role="italic">Mental Maps of Empire and French Colonial Policy Making</emphasis>
            </subtitle>, ed. <editor>
              <personname role="first-last">
                <firstname>Martin</firstname> <surname>Thomas</surname>
              </personname>
            </editor>, <pagenums>251–74</pagenums>, <address xml:id="b-9781474207300-1623">
              <city>Lincoln</city>, <state>NB</state>
            </address>: <publishername>University of Nebraska Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref169">
          <editor>
            <personname role="last-first">
              <surname>Dinius</surname> <firstname>Oliver</firstname> <othername role="middle-initials">J.</othername>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Angela</firstname> <surname>Vergara</surname>
            </personname>
          </editor>, eds (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-1624">
            <emphasis role="italic">Company Towns in the Americas:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1625">
            <emphasis role="italic">Landscape, Power, and Working-Class Communities</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1626">
            <city>Athens</city>, <state>GA</state>
          </address>: <publishername>University of Georgia Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref170">
          <author>
            <personname role="last-first">
              <surname>Dirks</surname> <firstname>Nicholas</firstname>
            </personname>
          </author> (<pubdate>2001</pubdate>), <title xml:id="b-9781474207300-1627">
            <emphasis role="italic">Castes of Mind:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1628">
            <emphasis role="italic">Colonialism and the Making of Modern India</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1629">
            <city>Princeton</city>, <state>NJ</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref171">
          <author>
            <personname role="last-first">
              <surname>Dower</surname> <firstname>John</firstname> <othername role="middle-initials">W.</othername>
            </personname>
          </author> (<pubdate>1986</pubdate>), <title xml:id="b-9781474207300-1630">
            <emphasis role="italic">War without Mercy:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1631">
            <emphasis role="italic">Race and Power in the Pacific War</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1632">
            <city>New York</city>
          </address>: <publishername>Pantheon</publishername>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref172">
          <author>
            <personname role="last-first">
              <surname>Drache</surname> <firstname>Daniel</firstname>
            </personname>
          </author> (<pubdate>2000</pubdate>), “<title xml:id="b-9781474207300-1633">The Short but Significant Life of the International Trade Organization: Lessons for Our Time,” Warwick University’s Centre for the Study of Globalisation and Regionalisation</title>, <subtitle xml:id="b-9781474207300-1634">
            <emphasis role="italic">CSGR Working Paper</emphasis>
          </subtitle> #62/00, November <pubdate>2000</pubdate>, <link xlink:href="http://wrap.warwick.ac.uk/2063/">
            <uri>http://wrap.warwick.ac.uk/2063/</uri>
          </link>, accessed <date role="accessed">December 26, 2016</date>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref173">
          <author>
            <personname role="last-first">
              <surname>Draper</surname> <firstname>Alfred</firstname>
            </personname>
          </author> (<pubdate>1985</pubdate>), <title xml:id="b-9781474207300-1635">
            <emphasis role="italic">The Amritsar Massacre:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1636">
            <emphasis role="italic">Twilight of the Raj</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1637">
            <city>London</city>
          </address>: <publishername>Buchan &amp; Enright</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref174">
          <author>
            <personname role="last-first">
              <surname>Dubow</surname> <firstname>Saul</firstname>
            </personname>
          </author> (<pubdate>1995</pubdate>), <title xml:id="b-9781474207300-1638">
            <emphasis role="italic">Scientific Racism in Modern South Africa</emphasis>
          </title>, <address xml:id="b-9781474207300-1639">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref175">
          <author>
            <personname role="last-first">
              <surname>Dubow</surname> <firstname>Saul</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-1640">
            <emphasis role="italic">Apartheid 1948–1994</emphasis>
          </title>, <address xml:id="b-9781474207300-1641">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref176">
          <author>
            <personname role="last-first">
              <surname>Dueck</surname> <firstname>Jennifer</firstname> <othername role="middle-initials">M.</othername>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-1642">
            <emphasis role="italic">The Claims of Culture at Empire’s End:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1643">
            <emphasis role="italic">Syria and Lebanon under French Rule</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1644">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref177">
          <author>
            <personname role="last-first">
              <surname>Duke</surname> <othername role="middle">Bryant</othername> <firstname>Kelly</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-1645">
            <emphasis role="italic">Education as Politics:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1646">
            <emphasis role="italic">Colonial Schooling and Political Debate in Senegal, 1850s–1914</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1647">
            <city>Madison</city>, <state>WI</state>
          </address>: <publishername>University of Wisconsin Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref178">
          <bibliomset relation="article" xml:id="b-9781474207300-1648">
            <author>
              <personname role="last-first">
                <surname>Dutta</surname> <firstname>Aniruddha</firstname>
              </personname>
            </author> (<pubdate>2012</pubdate>), “<title xml:id="b-9781474207300-1649">An Epistemology of Collusion:</title> <subtitle xml:id="b-9781474207300-1650">Hijras, Kothis and the Historical (Dis)continuity of Gender/Sexual Identities in Eastern India</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1651">
            <title xml:id="b-9781474207300-1652">
              <emphasis role="italic">Gender and History</emphasis>
            </title>, <volumenum>24</volumenum> (<issuenum>3</issuenum>): <pagenums>825–49</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref179">
          <bibliomset relation="article" xml:id="b-9781474207300-1653">
            <editor>
              <personname role="last-first">
                <surname>Eichenberg</surname> <firstname>Julia</firstname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>John</firstname> <othername role="middle">Paul</othername> <surname>Newman</surname>
              </personname>
            </editor>, eds (<pubdate>2010</pubdate>), “<title xml:id="b-9781474207300-1654">Aftershocks: Violence in Dissolving Empires after the First World War</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1655">
            <title xml:id="b-9781474207300-1656">
              <emphasis role="italic">Contemporary European History</emphasis>
            </title>, <volumenum>19</volumenum> (<issuenum>3</issuenum>): <pagenums>183–274</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref180">
          <author>
            <personname role="last-first">
              <surname>Eichengreen</surname> <firstname>Barry</firstname>
            </personname>
          </author> (<pubdate>1986</pubdate>), “<title xml:id="b-9781474207300-1657">The Political Economy of the Smoot-Hawley Tariff</title>,” <subtitle xml:id="b-9781474207300-1658">
            <emphasis role="italic">NBER Working Paper</emphasis>
          </subtitle> #2001, <link xlink:href="http://www.nber.org/papers/w2001">
            <uri>http://www.nber.org/papers/w2001</uri>
          </link>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref181">
          <author>
            <personname role="last-first">
              <surname>Eichengreen</surname> <firstname>Barry</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-1659">
            <emphasis role="italic">Hall of Mirrors, The Great Depression, the Great Recession and the Uses—and Misuses—of History</emphasis>
          </title>, <address xml:id="b-9781474207300-1660">
            <city>New York</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref182">
          <bibliomset relation="article" xml:id="b-9781474207300-1661">
            <author>
              <personname role="last-first">
                <surname>Eldridge</surname> <firstname>Claire</firstname>
              </personname>
            </author> (<pubdate>2013</pubdate>), “<title xml:id="b-9781474207300-1662">Returning to the ‘Return’:</title> <subtitle xml:id="b-9781474207300-1663">
              <emphasis role="italic">Pied-noir</emphasis> Memories of 1962</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1664">
            <title xml:id="b-9781474207300-1665">
              <emphasis role="italic">Revue Européene des Migrations Internationales</emphasis>
            </title>, <volumenum>29</volumenum> (<issuenum>3</issuenum>): <pagenums>121–40</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref183">
          <author>
            <personname role="last-first">
              <surname>El</surname> <othername role="middle">Hamel</othername> <firstname>Chouki</firstname>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-1666">
            <emphasis role="italic">Black Morocco:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1667">
            <emphasis role="italic">A History of Slavery, Race, and Islam</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1668">
            <city>New York</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref184">
          <author>
            <personname role="last-first">
              <surname>Elkins</surname> <firstname>Caroline</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>a), <title xml:id="b-9781474207300-1669">
            <emphasis role="italic">Britain’s Gulag:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1670">
            <emphasis role="italic">The Brutal End of Empire in Kenya</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1671">
            <city>London</city>
          </address>: <publishername>Jonathan Cape</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref185">
          <author>
            <personname role="last-first">
              <surname>Elkins</surname> <firstname>Caroline</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>b), <title xml:id="b-9781474207300-1672">
            <emphasis role="italic">Imperial Reckoning:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1673">
            <emphasis role="italic">The Untold Story of Britain’s Gulag in Kenya</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1674">
            <city>New York</city>
          </address>: <publishername>Henry Holt</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref186">
          <bibliomset relation="article" xml:id="b-9781474207300-1675">
            <author>
              <personname role="last-first">
                <surname>Ellena</surname> <firstname>Liliana</firstname>
              </personname>
            </author> (<pubdate>2004</pubdate>), “<title xml:id="b-9781474207300-1676">Political Imagination, Sexuality and Love in the Eurafrican Debate</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1677">
            <title xml:id="b-9781474207300-1678">
              <emphasis role="italic">European Review of History</emphasis>
            </title>, <volumenum>11</volumenum> (<issuenum>2</issuenum>): <pagenums>241–72</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref187">
          <bibliomset relation="article" xml:id="b-9781474207300-1679">
            <author>
              <personname role="last-first">
                <surname>Elliot-Lynn</surname> <firstname>Sophie</firstname> <othername role="middle-initials">C.</othername>
              </personname>
            </author> (<pubdate>1927</pubdate>), “<title xml:id="b-9781474207300-1680">Private Flying in Africa</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1681">
            <title xml:id="b-9781474207300-1682">
              <emphasis role="italic">Flight</emphasis>
            </title>, June 2: <pagenums>354–5</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref188">
          <author>
            <personname role="last-first">
              <surname>Elshakry</surname> <firstname>Marwa</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-1683">
            <emphasis role="italic">Reading Darwin in Arabic, 1860–1950</emphasis>
          </title>, <address xml:id="b-9781474207300-1684">
            <city>Chicago</city>, <state>IL</state>
          </address>: <publishername>University of Chicago Press</publishername>.</bibliomixed>
<?page value="210"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref189">
          <author>
            <personname role="last-first">
              <surname>El</surname> <othername role="middle">Shakry</othername> <firstname>Omnia</firstname>
            </personname>
          </author> (<pubdate>2007</pubdate>), <title xml:id="b-9781474207300-1685">
            <emphasis role="italic">The Great Social Laboratory:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1686">
            <emphasis role="italic">Subjects of Knowledge in Colonial and Postcolonial Egypt</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1687">
            <city>Stanford</city>, <state>CA</state>
          </address>: <publishername>Stanford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref190">
          <author>
            <personname role="last-first">
              <surname>El-Tayeb</surname> <firstname>Fatima</firstname>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-1688">
            <emphasis role="italic">European Others:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1689">
            <emphasis role="italic">Queering Ethnicity in Postnational Europe</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1690">
            <city>Minneapolis</city>, <state>MN</state>
          </address>: <publishername>University of Minnesota Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref191">
          <bibliomset relation="article" xml:id="b-9781474207300-1691">
            <author>
              <personname role="last-first">
                <surname>El-Tayeb</surname> <firstname>Fatima</firstname>
              </personname>
            </author> (<pubdate>2012</pubdate>), “‘<title xml:id="b-9781474207300-1692">Gays Who Cannot Properly Be Gay’: Queer Muslims in the Neoliberal European City</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1693">
            <title xml:id="b-9781474207300-1694">
              <emphasis role="italic">European Journal of Women’s Studies</emphasis>
            </title>, <volumenum>19</volumenum> (<issuenum>1</issuenum>): <pagenums>79–95</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref192">
          <author>
            <personname role="last-first">
              <surname>Emerson</surname> <firstname>Rupert</firstname>
            </personname>
          </author> (<pubdate>1962</pubdate>), <title xml:id="b-9781474207300-1695">
            <emphasis role="italic">From Empire to Nation</emphasis>
          </title>, <address xml:id="b-9781474207300-1696">
            <city>Boston</city>, <state>MA</state>
          </address>: <publishername>Beacon Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref193">
          <author>
            <personname role="last-first">
              <surname>Enloe</surname> <firstname>Cynthia</firstname> <othername role="middle-initials">H.</othername>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-1697">
            <emphasis role="italic">Bananas, Beaches and Bases:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1698">
            <emphasis role="italic">Making Feminist Sense of International Politics</emphasis>
          </subtitle>, 2nd edn, <address xml:id="b-9781474207300-1699">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref194">
          <author>
            <personname role="last-first">
              <surname>Epprecht</surname> <firstname>Marc</firstname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-1700">
            <emphasis role="italic">Heterosexual Africa? The History of an Idea from the Age of Exploration to the Age of AIDS</emphasis>
          </title>, <address xml:id="b-9781474207300-1701">
            <city>Athens</city>, <state>OH</state>
          </address>: <publishername>Ohio University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref195">
          <author>
            <personname role="last-first">
              <surname>Estienne-Mondet</surname> <firstname>Arlette</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-1702">
            <emphasis role="italic">Ligne de Hoggar</emphasis>
          </title>, <address xml:id="b-9781474207300-1703">
            <city>Paris</city>
          </address>: <publishername>PC Editions</publishername>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref196">
          <author>
            <orgname>European Commission</orgname>
          </author> (<pubdate>2017</pubdate>), <title xml:id="b-9781474207300-1704">
            <emphasis role="italic">Schengen Area</emphasis>
          </title>, <link xlink:href="https://ec.europa.eu/home-affairs/what-we-do/policies/borders-and-visas/schengen_en">
            <uri>https://ec.europa.eu/home-affairs/what-we-do/policies/borders-and-visas/schengen_en</uri>
          </link>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref197">
          <author>
            <orgname>European Initiative on Global Markets</orgname>
          </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-1705">Trade in Europe</title>,” <subtitle xml:id="b-9781474207300-1706">
            <emphasis role="italic">European IGM Economic Experts Panel</emphasis>
          </subtitle>, <link xlink:href="http://www.igmchicago.org/surveys/trade-within-europe">
            <uri>http://www.igmchicago.org/surveys/trade-within-europe</uri>
          </link>, accessed <date role="accessed">December 30, 2016</date>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref198">
          <bibliomset relation="article" xml:id="b-9781474207300-1707">
            <author>
              <personname role="last-first">
                <surname>Evans</surname> <firstname>Martin</firstname>
              </personname>
            </author> (<pubdate>2008</pubdate>), “<title xml:id="b-9781474207300-1708">Opening up the Battlefield:</title> <subtitle xml:id="b-9781474207300-1709">War Studies and the Cultural Turn</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1710">
            <title xml:id="b-9781474207300-1711">
              <emphasis role="italic">Journal of War and Culture Studies</emphasis>
            </title>, <volumenum>1</volumenum> (<issuenum>1</issuenum>): <pagenums>47–51</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref199">
          <author>
            <personname role="last-first">
              <surname>Fall</surname> <firstname>Bernard</firstname>
            </personname>
          </author> (<pubdate>1964</pubdate>), <title xml:id="b-9781474207300-1712">
            <emphasis role="italic">The Two Viet-Nams:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1713">
            <emphasis role="italic">A Political and Military Analysis</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1714">
            <city>New York</city>
          </address>: <publishername>Praeger</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref200">
          <author>
            <personname role="last-first">
              <surname>Fanon</surname> <firstname>Frantz</firstname>
            </personname>
          </author> (<pubdate>1952</pubdate>), <title xml:id="b-9781474207300-1715">
            <emphasis role="italic">Peau noire masques blancs</emphasis>
          </title>, <address xml:id="b-9781474207300-1716">
            <city>Paris</city>
          </address>: <publishername>Seuil</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref201">
          <author>
            <personname role="last-first">
              <surname>Fanon</surname> <firstname>Frantz</firstname>
            </personname>
          </author> (<pubdate>1974</pubdate>), <title xml:id="b-9781474207300-1717">
            <emphasis role="italic">Les damnés de la terre</emphasis>
          </title>, <address xml:id="b-9781474207300-1718">
            <city>Paris</city>
          </address>: <publishername>Maspero</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref202">
          <author>
            <personname role="last-first">
              <surname>Fanon</surname> <firstname>Frantz</firstname>
            </personname>
          </author> ([<pubdate>1961</pubdate>] <date>2004</date>), <title xml:id="b-9781474207300-1719">
            <emphasis role="italic">The Wretched of the Earth</emphasis>
          </title>, <address xml:id="b-9781474207300-1720">
            <city>New York</city>
          </address>: <publishername>Grove Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref203">
          <editor>
            <personname role="last-first">
              <surname>Feith</surname> <firstname>Herbert</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Lance</firstname> <surname>Castles</surname>
            </personname>
          </editor>, eds (<pubdate>1970</pubdate>), <title xml:id="b-9781474207300-1721">
            <emphasis role="italic">Indonesian Political Thinking, 1945–1965</emphasis>
          </title>, <address xml:id="b-9781474207300-1722">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref204">
          <author>
            <personname role="last-first">
              <surname>Ferguson</surname> <firstname>Niall</firstname>
            </personname>
          </author> (<pubdate>2003</pubdate>), <title xml:id="b-9781474207300-1723">
            <emphasis role="italic">Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1724">
            <emphasis role="italic">The Rise and Demise of the British World Order and the Lessons for Global Power</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1725">
            <city>New York</city>
          </address>: <publishername>Basic Books</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref206">
          <author>
            <personname role="last-first">
              <surname>Finch</surname> <firstname>Michael</firstname> <othername role="middle-initials">P.M.</othername>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-1726">
            <emphasis role="italic">A Progressive Occupation? The Gallieni-Lyautey Method and Colonial Pacification in Tonkin and Madagascar, 1885–1900</emphasis>
          </title>, <address xml:id="b-9781474207300-1727">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref205">
          <author>
            <personname role="last-first">
              <surname>Fleming</surname> <firstname>Melissa</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), “<title xml:id="b-9781474207300-1728">Crossings of Mediterranean Sea Exceed 300,000, including 200,000 to Greece</title>,” <link xlink:href="http://www.unhcr.org/en-us/news/latest/2015/8/55e06a5b6/crossings-mediterranean-sea-exceed-300000-including-200000-greece.html">
            <uri>http://www.unhcr.org/en-us/news/latest/2015/8/55e06a5b6/crossings-mediterranean-sea-exceed-300000-including-200000-greece.html</uri>
          </link>, accessed <date role="accessed">September 17, 2017</date>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref207">
          <bibliomset relation="article" xml:id="b-9781474207300-1729">
            <author>
              <personname role="last-first">
                <surname>Flores</surname> <othername role="middle">Alfred</othername> <firstname>Peredo</firstname>
              </personname>
            </author> (<pubdate>2015</pubdate>), “<title xml:id="b-9781474207300-1730">No Walk in the Park: US Empire and the Racialization of Civilian Military Labor in Guam, 1944–1962</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1731">
            <title xml:id="b-9781474207300-1732">
              <emphasis role="italic">American Quarterly</emphasis>
            </title>, <volumenum>67</volumenum> (<issuenum>3</issuenum>): <pagenums>813–35</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref208">
          <bibliomset relation="part" xml:id="b-9781474207300-1733">
            <author>
              <personname role="last-first">
                <surname>Fogarty</surname> <firstname>Richard</firstname> <othername role="middle-initials">S.</othername>
              </personname>
            </author> and <author>
              <personname role="first-last">
                <firstname>Michael</firstname> <othername role="middle-initials">A.</othername> <surname>Osborne</surname>
              </personname>
            </author> (<pubdate>2010</pubdate>), “<title xml:id="b-9781474207300-1734">Eugenics in France and the Colonies</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1735">
            <title xml:id="b-9781474207300-1736">
              <emphasis role="italic">The Oxford Handbook of the History of Eugenics</emphasis>
            </title>, eds <editor>
              <personname role="first-last">
                <firstname>Alison</firstname> <surname>Bashford</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Philippa</firstname> <surname>Levine</surname>
              </personname>
            </editor>, <pagenums>332–46</pagenums>, <address xml:id="b-9781474207300-1737">
              <city>Oxford</city>
            </address>: <publishername>Oxford University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref209">
          <author>
            <personname role="last-first">
              <surname>Fonseca</surname> <firstname role="initials">Q.</firstname> <othername role="middle">Pablo</othername>
            </personname>
          </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-1738">Latin America is the World’s Deadliest Region for Environmental Activists</title>,” <subtitle xml:id="b-9781474207300-1739">
            <emphasis role="italic">Scientific American</emphasis>
          </subtitle>, June 24, <link xlink:href="https://www.scientificamerican.com/article/latin-america-is-the-world-s-deadliest-region-for-environmental-activists/">
            <uri>https://www.scientificamerican.com/article/latin-america-is-the-world-s-deadliest-region-for-environmental-activists/</uri>
          </link>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref210">
          <bibliomset relation="article" xml:id="b-9781474207300-1740">
            <author>
              <personname role="last-first">
                <surname>Ford</surname> <firstname>Caroline</firstname>
              </personname>
            </author> (<pubdate>2008</pubdate>), “<title xml:id="b-9781474207300-1741">Reforestation, Landscape Conservation, and the Anxieties of Empire in French Colonial Algeria</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1742">
            <title xml:id="b-9781474207300-1743">
              <emphasis role="italic">American Historical Review</emphasis>
            </title>, <volumenum>113</volumenum> (<issuenum>2</issuenum>): <pagenums>341–62</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref211">
          <author>
            <personname role="last-first">
              <surname>Foucault</surname> <firstname>Michel</firstname>
            </personname>
          </author> (<pubdate>1972</pubdate>), <title xml:id="b-9781474207300-1744">
            <emphasis role="italic">The Archeology of Knowledge</emphasis>
          </title>, <address xml:id="b-9781474207300-1745">
            <city>New York</city>
          </address>, <publishername>Pantheon</publishername>.</bibliomixed>
<?page value="211"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref212">
          <author>
            <personname role="last-first">
              <surname>Foucault</surname> <firstname>Michel</firstname>
            </personname>
          </author> ([<pubdate>1977</pubdate>] <date>1979</date>), <title xml:id="b-9781474207300-1746">
            <emphasis role="italic">Discipline and Punish:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1747">
            <emphasis role="italic">The Birth of the Modern Prison</emphasis>
          </subtitle>, trans. <address xml:id="b-9781474207300-1748">
            <city>Alan Sheridan</city>, <state>New York</state>
          </address>: <publishername>Vintage Books</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref213">
          <author>
            <personname role="last-first">
              <surname>Frank</surname> <firstname>Dana</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-1749">
            <emphasis role="italic">Bananeras:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1750">
            <emphasis role="italic">Women Transforming the Banana Unions of Latin America</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1751">
            <city>Cambridge</city>
          </address>: <publishername>South End Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref214">
          <bibliomset relation="article" xml:id="b-9781474207300-1752">
            <author>
              <personname role="last-first">
                <surname>Frederiksen</surname> <othername role="middle">Bodil</othername> <firstname>Folke</firstname>
              </personname>
            </author> (<pubdate>2008</pubdate>), “<title xml:id="b-9781474207300-1753">Jomo Kenyatta, Marie Bonaparte and Bronislaw Malinowski on Clitoridectomy and Female Sexuality</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1754">
            <title xml:id="b-9781474207300-1755">
              <emphasis role="italic">History Workshop Journal</emphasis>
            </title>, <volumenum>65</volumenum> (<issuenum>1</issuenum>): <pagenums>23–48</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref215">
          <author>
            <personname role="last-first">
              <surname>Freidberg</surname> <firstname>Susanne</firstname>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-1756">
            <emphasis role="italic">French Beans and Food Scares:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1757">
            <emphasis role="italic">Culture and Commerce in an Anxious Age</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1758">
            <city>New York</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref216">
          <bibliomset relation="article" xml:id="b-9781474207300-1759">
            <author>
              <personname role="last-first">
                <surname>French</surname> <firstname>John</firstname> <othername role="middle-initials">D.</othername>
              </personname>
            </author> (<pubdate>2000</pubdate>), “<title xml:id="b-9781474207300-1760">The Missteps of Anti-Imperialist Reason</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1761">
            <title xml:id="b-9781474207300-1762">
              <emphasis role="italic">Theory, Culture and Society</emphasis>
            </title>, <volumenum>17</volumenum> (<issuenum>1</issuenum>): <pagenums>107–28</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref217">
          <author>
            <personname role="last-first">
              <surname>Freyre</surname> <firstname>Gilberto</firstname>
            </personname>
          </author> (<pubdate>1986</pubdate>), <title xml:id="b-9781474207300-1763">
            <emphasis role="italic">The Masters and the Slaves:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1764">
            <emphasis role="italic">A Study in the Development of Brazilian Civilization</emphasis>
          </subtitle>, trans. <author>
            <personname role="first-last">
              <firstname>Samuel</firstname> <surname>Putnam</surname>
            </personname>
          </author>, <address xml:id="b-9781474207300-1765">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref218">
          <author>
            <personname role="last-first">
              <surname>Friedman</surname> <firstname>Thomas</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-1766">
            <emphasis role="italic">The World is Flat:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1767">
            <emphasis role="italic">A Brief History of the Twenty-First Century</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1768">
            <city>New York</city>
          </address>: <publishername>Farrar, Strauss &amp; Giroux</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref219">
          <author>
            <personname role="last-first">
              <surname>Fromkin</surname> <firstname>David</firstname>
            </personname>
          </author> (<pubdate>1989</pubdate>), <title xml:id="b-9781474207300-1769">
            <emphasis role="italic">A Peace to End All Peace:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1770">
            <emphasis role="italic">The Fall of the Ottoman Empire and the Creation of the Modern Middle East</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1771">
            <city>New York</city>
          </address>: <publishername>Henry Holt</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref220">
          <author>
            <personname role="last-first">
              <surname>Fukuyama</surname> <firstname>Francis</firstname>
            </personname>
          </author> (<pubdate>1992</pubdate>), <title xml:id="b-9781474207300-1772">
            <emphasis role="italic">The End of History and the Last Man</emphasis>
          </title>, <address xml:id="b-9781474207300-1773">
            <city>Toronto</city>
          </address>: <publishername>Maxwell Macmillan</publishername>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref221">
          <author>
            <orgname>G20</orgname>
          </author> (<pubdate>2017</pubdate>), “<title xml:id="b-9781474207300-1774">Communiqué,” March 17, Baden Baden G20 Conference</title>, <link xlink:href="http://www.g20.utoronto.ca/2017/170318-finance-en.html">
            <uri>http://www.g20.utoronto.ca/2017/170318-finance-en.html</uri>
          </link>, accessed <date role="accessed">March 28, 2017</date>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref222">
          <author>
            <personname role="last-first">
              <surname>Gaines</surname> <othername role="middle">Kevin</othername> <firstname>Kelly</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-1775">
            <emphasis role="italic">American Africans in Ghana:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1776">
            <emphasis role="italic">Black Expatriates and the Civil Rights Era</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1777">
            <city>Chapel Hill</city>, <state>NC</state>
          </address>: <publishername>University of North Carolina Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref223">
          <author>
            <personname role="last-first">
              <surname>Galula</surname> <firstname>David</firstname>
            </personname>
          </author> (<pubdate>1964</pubdate>), <title xml:id="b-9781474207300-1778">
            <emphasis role="italic">Counterinsurgency Warfare:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1779">
            <emphasis role="italic">Theory and Practice</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1780">
            <city>Westport</city>, <state>CT</state>
          </address>: <publishername>Praeger</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref224">
          <bibliomset relation="part" xml:id="b-9781474207300-1781">
            <author>
              <personname role="last-first">
                <surname>Gasiorowski</surname> <firstname>Mark</firstname>
              </personname>
            </author> (<pubdate>2017</pubdate>), “<title xml:id="b-9781474207300-1782">Islamic Republic of Iran</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1783">
            <title xml:id="b-9781474207300-1784">
              <emphasis role="italic">The Government and Politics of the Middle East and North Africa</emphasis>
            </title>, 8th edn, eds <editor>
              <personname role="first-last">
                <firstname>Mark</firstname> <surname>Gasiorowski</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Sean</firstname> <surname>Yom</surname>
              </personname>
            </editor>, <pagenums>271–306</pagenums>, <address xml:id="b-9781474207300-1785">
              <city>Boulder</city>, <state>CO</state>
            </address>: <publishername>Westview Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref225">
          <bibliomset relation="article" xml:id="b-9781474207300-1786">
            <author>
              <personname role="last-first">
                <surname>Geiger</surname> <firstname>Susan</firstname>
              </personname>
            </author> (<pubdate>1999</pubdate>), “<title xml:id="b-9781474207300-1787">Women and Gender in African Studies</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1788">
            <title xml:id="b-9781474207300-1789">
              <emphasis role="italic">African Studies Review</emphasis>
            </title>, <volumenum>42</volumenum> (<issuenum>3</issuenum>): <pagenums>21–33</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref226">
          <bibliomset relation="part" xml:id="b-9781474207300-1790">
            <author>
              <personname role="last-first">
                <surname>Gengenbach</surname> <firstname>Heidi</firstname>
              </personname>
            </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-1791">
              <emphasis role="italic">Binding Memories:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1792">
              <emphasis role="italic">Women as Makers and Tellers of History in Magude, Mozambique</emphasis>
            </subtitle>
          </bibliomset>, <bibliomset relation="book" xml:id="b-9781474207300-1793">
            <title xml:id="b-9781474207300-1794">ACLS</title> Humanities E-Book electronic edition, <address xml:id="b-9781474207300-1795">
              <city>New York</city>
            </address>: <publishername>Columbia University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref227">
          <author>
            <personname role="last-first">
              <surname>George</surname> <firstname>Abosede</firstname> <othername role="middle-initials">A.</othername>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-1796">
            <emphasis role="italic">Making Modern Girls:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1797">
            <emphasis role="italic">A History of Girlhood, Labor, and Social Development in Colonial Lagos</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1798">
            <city>Athens</city>, <state>OH</state>
          </address>: <publishername>Ohio University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref228">
          <bibliomset relation="article" xml:id="b-9781474207300-1799">
            <author>
              <personname role="last-first">
                <surname>Germain</surname> <firstname>Felix</firstname>
              </personname>
            </author> (<pubdate>2010</pubdate>), “<title xml:id="b-9781474207300-1800">Jezebels and Victims:</title> <subtitle xml:id="b-9781474207300-1801">Antillean Women in Postwar France, 1946–1974</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1802">
            <title xml:id="b-9781474207300-1803">
              <emphasis role="italic">French Historical Studies</emphasis>
            </title>, <volumenum>33</volumenum> (<issuenum>3</issuenum>): <pagenums>475–95</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref229">
          <bibliomset relation="article" xml:id="b-9781474207300-1804">
            <author>
              <personname role="last-first">
                <surname>Gerwarth</surname> <firstname>Robert</firstname>
              </personname>
            </author> and <author>
              <personname role="first-last">
                <firstname>Erez</firstname> <surname>Manela</surname>
              </personname>
            </author> (<pubdate>2014</pubdate>a), “<title xml:id="b-9781474207300-1805">The Great War as a Global War:</title> <subtitle xml:id="b-9781474207300-1806">Imperial Conflict and the Reconfiguration of World Order, 1911–1923</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1807">
            <title xml:id="b-9781474207300-1808">
              <emphasis role="italic">Diplomatic History</emphasis>
            </title>, <volumenum>38</volumenum> (<issuenum>4</issuenum>): <pagenums>786–800</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref230">
          <editor>
            <personname role="last-first">
              <surname>Gerwarth</surname> <firstname>Robert</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Erez</firstname> <surname>Manela</surname>
            </personname>
          </editor>, eds (<pubdate>2014</pubdate>b), <title xml:id="b-9781474207300-1809">
            <emphasis role="italic">Empires at War, 1911–1923</emphasis>
          </title>, <address xml:id="b-9781474207300-1810">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref231">
          <author>
            <personname role="last-first">
              <surname>Gide</surname> <firstname>André</firstname>
            </personname>
          </author> (<pubdate>1927</pubdate>), <title xml:id="b-9781474207300-1811">
            <emphasis role="italic">Voyage au Congo. carnet de route</emphasis>
          </title>, <address xml:id="b-9781474207300-1812">
            <city>Paris</city>
          </address>: <publishername>Gallimard</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref232">
          <author>
            <personname role="last-first">
              <surname>Gilroy</surname> <firstname>Paul</firstname>
            </personname>
          </author> (<pubdate>1993</pubdate>), <title xml:id="b-9781474207300-1813">
            <emphasis role="italic">The Black Atlantic</emphasis>
          </title>, <address xml:id="b-9781474207300-1814">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref233">
          <author>
            <personname role="last-first">
              <surname>Glassman</surname> <firstname>Jonathon</firstname>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-1815">
            <emphasis role="italic">War of Words, War of Stones:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1816">
            <emphasis role="italic">Racial Thought and Violence in Colonial Zanzibar</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1817">
            <city>Bloomington</city>, <state>IN</state>
          </address>: <publishername>Indiana University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref234">
          <author>
            <personname role="last-first">
              <surname>Go</surname> <firstname>Julian</firstname>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-1818">
            <emphasis role="italic">Patterns of Empire; The British and American Empires, 1688 to Present</emphasis>
          </title>, <address xml:id="b-9781474207300-1819">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<?page value="212"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref235">
          <author>
            <personname role="last-first">
              <surname>Goebel</surname> <firstname>Michael</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-1820">
            <emphasis role="italic">Anti-Imperial Metropolis</emphasis>
          </title>, <address xml:id="b-9781474207300-1821">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref236">
          <bibliomset relation="article" xml:id="b-9781474207300-1822">
            <author>
              <personname role="last-first">
                <surname>Goebel</surname> <firstname>Michael</firstname>
              </personname>
            </author> (<pubdate>2016</pubdate>), “‘<title xml:id="b-9781474207300-1823">The Capital of the Men without a Country’:</title> <subtitle xml:id="b-9781474207300-1824">Migrants and Anticolonialism in Interwar Paris</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1825">
            <title xml:id="b-9781474207300-1826">
              <emphasis role="italic">American Historical Review</emphasis>
            </title>, <volumenum>121</volumenum> (<issuenum>5</issuenum>): <pagenums>1444–67</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref237">
          <bibliomset relation="article" xml:id="b-9781474207300-1827">
            <author>
              <personname role="last-first">
                <surname>Goldthree</surname> <firstname>Reena</firstname> <othername role="middle-initials">N.</othername>
              </personname>
            </author> (<pubdate>2016</pubdate>), “‘<title xml:id="b-9781474207300-1828">Vive La France!’:</title> <subtitle xml:id="b-9781474207300-1829">British Caribbean Soldiers and Interracial Intimacies on the Western Front</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1830">
            <title xml:id="b-9781474207300-1831">
              <emphasis role="italic">Journal of Colonialism and Colonial History</emphasis>
            </title>, <volumenum>17</volumenum> (<issuenum>3</issuenum>).</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref238">
          <bibliomset relation="part" xml:id="b-9781474207300-1832">
            <author>
              <personname role="last-first">
                <surname>Gonzalez</surname> <othername role="middle">Vernadette</othername> <firstname>Vicuña</firstname>
              </personname>
            </author> (<pubdate>2015</pubdate>), “<title xml:id="b-9781474207300-1833">Making Aloha: Lei and the Cultural Labor of Hospitality</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1834">
            <title xml:id="b-9781474207300-1835">
              <emphasis role="italic">Making the Empire Work:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1836">
              <emphasis role="italic">Labor and United States Imperialism</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Daniel</firstname> <othername role="middle-initials">E.</othername> <surname>Bender</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Jana</firstname> <othername role="middle-initials">K.</othername> <surname>Lipman</surname>
              </personname>
            </editor>, <pagenums>161–84</pagenums>, <address xml:id="b-9781474207300-1837">
              <city>New York</city>
            </address>: <publishername>New York University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref239">
          <bibliomset relation="article" xml:id="b-9781474207300-1838">
            <author>
              <personname role="last-first">
                <surname>Gorman</surname> <firstname>Daniel</firstname>
              </personname>
            </author> (<pubdate>2008</pubdate>), “<title xml:id="b-9781474207300-1839">Empire, Internationalism, and the Campaign against the Traffic in Women and Children in the 1920s</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1840">
            <title xml:id="b-9781474207300-1841">
              <emphasis role="italic">Twentieth Century British History</emphasis>
            </title>, <volumenum>19</volumenum> (<issuenum>2</issuenum>): <pagenums>186–216</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref240">
          <author>
            <personname role="last-first">
              <surname>Goscha</surname> <firstname>Christopher</firstname>
            </personname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-1842">
            <emphasis role="italic">Vietnam:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1843">
            <emphasis role="italic">A New History</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1844">
            <city>New York</city>
          </address>: <publishername>Basic Books</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref241">
          <author>
            <personname role="last-first">
              <surname>Grandin</surname> <firstname>Greg</firstname>
            </personname>
          </author> (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-1845">
            <emphasis role="italic">Fordlandia:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1846">
            <emphasis role="italic">The Rise and Fall of Henry Ford’s Forgotten Jungle City</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1847">
            <city>New York</city>
          </address>: <publishername>Metropolitan Books</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref242">
          <author>
            <personname role="last-first">
              <surname>Greenblatt</surname> <firstname>Stephen</firstname>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-1848">
            <emphasis role="italic">Cultural Mobility:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1849">
            <emphasis role="italic">A Manifesto</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1850">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref243">
          <author>
            <personname role="last-first">
              <surname>Greene</surname> <firstname>Julie</firstname>
            </personname>
          </author> (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-1851">
            <emphasis role="italic">The Canal Builders:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1852">
            <emphasis role="italic">Making America’s Empire at the Panama Canal</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1853">
            <city>New York</city>
          </address>: <publishername>Penguin</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref244">
          <author>
            <personname role="last-first">
              <surname>Greenhalgh</surname> <firstname>Paul</firstname>
            </personname>
          </author> (<pubdate>1988</pubdate>), <title xml:id="b-9781474207300-1854">
            <emphasis role="italic">Ephemeral Vistas:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1855">
            <emphasis role="italic">The Expositions Universelles, Great Exhibitions and World’s Fairs, 1851–1939</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1856">
            <city>Manchester</city>
          </address>: <publishername>Manchester University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref245">
          <author>
            <personname role="last-first">
              <surname>Gregory</surname> <firstname>Derek</firstname>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-1857">
            <emphasis role="italic">The Colonial Present:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1858">
            <emphasis role="italic">Afghanistan, Palestine, Iraq</emphasis>
          </subtitle>,<address xml:id="b-9781474207300-1859">
            <city> Oxford</city>
          </address>: <publishername>Blackwell</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref246">
          <author>
            <personname role="last-first">
              <surname>Griffiths</surname> <firstname>Tom</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Libby</firstname> <surname>Robin</surname>
            </personname>
          </author> (<pubdate>1997</pubdate>), <title xml:id="b-9781474207300-1860">
            <emphasis role="italic">Ecology and Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1861">
            <emphasis role="italic">Environmental History of Settler Societies</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1862">
            <city>Seattle</city>, <state>WA</state>
          </address>: <publishername>University of Washington Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref247">
          <author>
            <personname role="last-first">
              <surname>Grimal</surname> <firstname>Henri</firstname>
            </personname>
          </author> (<pubdate>1978</pubdate>), <title xml:id="b-9781474207300-1863">
            <emphasis role="italic">Decolonization:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1864">
            <emphasis role="italic">The British, French, Dutch, and Belgian Empires, 1919–1963</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1865">
            <city>London</city>
          </address>: <publishername>Routledge &amp; Kegan Paul</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref248">
          <author>
            <personname role="last-first">
              <surname>Guevara</surname> <firstname>Che</firstname>
            </personname>
          </author> (<pubdate>1998</pubdate>), <title xml:id="b-9781474207300-1866">
            <emphasis role="italic">Guerilla Warfare</emphasis>
          </title>, <address xml:id="b-9781474207300-1867">
            <city>Lincoln</city>, <state>NE</state>
          </address>: <publishername>University of Nebraska Press</publishername>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref249">
          <author>
            <personname role="last-first">
              <surname>Guly</surname> <firstname>Christopher</firstname>
            </personname>
          </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-1868">Canada Keeps Signing Free Trade Deals, and Few People Seem to Mind</title>,” <subtitle xml:id="b-9781474207300-1869">
            <emphasis role="italic">Los Angeles Times</emphasis>
          </subtitle>, October 30, <link xlink:href="http://www.latimes.com/world/mexico-americas/la-fg-canada-trade-20161030-story.html">
            <uri>http://www.latimes.com/world/mexico-americas/la-fg-canada-trade-20161030-story.html</uri>
          </link>, accessed <date role="accessed">December 31, 2016</date>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref250">
          <author>
            <personname role="last-first">
              <surname>Gupta</surname> <firstname>Dipankar</firstname>
            </personname>
          </author> (<pubdate>2001</pubdate>), “<title xml:id="b-9781474207300-1870">Caste, Race, Politics</title>,” <subtitle xml:id="b-9781474207300-1871">
            <emphasis role="italic">Seminar #508</emphasis>
          </subtitle>, <link xlink:href="http://www.india-seminar.com/2001/508/508%20dipankar%20gupta.htm">
            <uri>http://www.india-seminar.com/2001/508/508%20dipankar%20gupta.htm</uri>
          </link>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref251">
          <bibliomset relation="part" xml:id="b-9781474207300-1872">
            <author>
              <personname role="last-first">
                <surname>Haas</surname> <firstname>Ernst</firstname> <othername role="middle-initials">B.</othername>
              </personname>
            </author> (<pubdate>1967</pubdate>), “<title xml:id="b-9781474207300-1873">The Attempt to Terminate Colonialism:</title> <subtitle xml:id="b-9781474207300-1874">Acceptance of the United Nations Trusteeship System</subtitle>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1875">
            <title xml:id="b-9781474207300-1876">
              <emphasis role="italic">The United Nations Political System</emphasis>
            </title>, ed. <editor>
              <personname role="first-last">
                <firstname>David</firstname> <othername role="middle-initials">A.</othername> <surname>Kay</surname>
              </personname>
            </editor>, <pagenums>281–301</pagenums>, <address xml:id="b-9781474207300-1877">
              <city>New York</city>
            </address>: <publishername>Wiley</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref252">
          <bibliomset relation="article" xml:id="b-9781474207300-1878">
            <author>
              <personname role="last-first">
                <surname>Haberman</surname> <firstname>Clyde</firstname>
              </personname>
            </author> (<pubdate>2014</pubdate>), “<title xml:id="b-9781474207300-1879">Agent Orange’s Long Legacy, for Vietnam and for Veterans</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1880">
            <title>
              <emphasis role="italic">New York Times</emphasis>
            </title>, <date>May 11</date>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref253">
          <author>
            <personname role="last-first">
              <surname>Hall</surname> <firstname>Bruce</firstname> <othername role="middle-initials">S.</othername>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-1881">
            <emphasis role="italic">A History of Race in Muslim West Africa, 1600–1960</emphasis>
          </title>, <address xml:id="b-9781474207300-1882">
            <city>New York</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref254">
          <author>
            <personname role="last-first">
              <surname>Hall</surname> <firstname>Catherine</firstname>
            </personname>
          </author> (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-1883">
            <emphasis role="italic">Civilising Subjects:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1884">
            <emphasis role="italic">Metropole and Colony in the English Imagination, 1830–1867</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1885">
            <city>Chicago</city>, <state>IL</state>
          </address>: <publishername>University of Chicago Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref255">
          <author>
            <personname role="last-first">
              <surname>Hall</surname> <firstname>Kim</firstname> <othername role="middle-initials">F.</othername>
            </personname>
          </author> (<pubdate>1996</pubdate>), <title xml:id="b-9781474207300-1886">
            <emphasis role="italic">Things of Darkness:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1887">
            <emphasis role="italic">Economies of Race and Gender in Early Modern England</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1888">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<?page value="213"?>
<bibliomixed role="article" xml:id="b-9781474207300-ref256">
          <bibliomset relation="article" xml:id="b-9781474207300-1889">
            <author>
              <personname role="last-first">
                <surname>Hall</surname> <firstname>Rachel</firstname> <othername role="middle-initials">A.</othername>
              </personname>
            </author> (<pubdate>2002</pubdate>), “<title xml:id="b-9781474207300-1890">When is a Wife not a Wife? Some Observations on the Immigration Experiences of South Asian Women in West Yorkshire</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1891">
            <title xml:id="b-9781474207300-1892">
              <emphasis role="italic">Contemporary Politics</emphasis>
            </title>, <volumenum>8</volumenum> (<issuenum>1</issuenum>): <pagenums>55–68</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref257">
          <bibliomset relation="part" xml:id="b-9781474207300-1893">
            <author>
              <personname role="last-first">
                <surname>Hall</surname> <firstname>Stuart</firstname>
              </personname>
            </author> (<pubdate>1980</pubdate>), “<title xml:id="b-9781474207300-1894">Race, Articulation and Societies Structures in Dominance</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1895">
            <title xml:id="b-9781474207300-1896">
              <emphasis role="italic">Sociological Theories: Race and Colonialism</emphasis>
            </title>, <pagenums>305–45</pagenums>, <address xml:id="b-9781474207300-1897">
              <city>Paris</city>
            </address>: <publishername>UNESCO</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref258">
          <bibliomset relation="part" xml:id="b-9781474207300-1898">
            <author>
              <personname role="last-first">
                <surname>Hall</surname> <firstname>Stuart</firstname>
              </personname>
            </author> (<pubdate>1997</pubdate>), “<title xml:id="b-9781474207300-1899">The Local and the Global: Globalization and Ethnicity</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1900">
            <title xml:id="b-9781474207300-1901">
              <emphasis role="italic">Dangerous Liaisons</emphasis>: <emphasis role="italic">Gender, Nation, and Postcolonial Perspectives</emphasis>
            </title>, eds <editor>
              <personname role="first-last">
                <firstname role="initials">A.</firstname> <surname>McClintock</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname role="initials">A.</firstname> <surname>Mufi</surname>
              </personname>
            </editor>, and <editor>
              <personname role="first-last">
                <firstname role="initials">E.</firstname> <surname>Shohat</surname>
              </personname>
            </editor>, <pagenums>173–87</pagenums>, <address xml:id="b-9781474207300-1902">
              <city>Minneapolis</city>, <state>MN</state>
            </address>: <publishername>University of Minnesota Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref259">
          <author>
            <personname role="last-first">
              <surname>Hamon</surname> <firstname>Hervé</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Patrick</firstname> <surname>Rotman</surname>
            </personname>
          </author> (<pubdate>1979</pubdate>), <title xml:id="b-9781474207300-1903">
            <emphasis role="italic">Les Porteurs de Valises:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1904">
            <emphasis role="italic">La Résistance Française à la Guerre d’Algérie</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1905">
            <city>Paris</city>
          </address>: <publishername>Albin Michel</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref260">
          <author>
            <personname role="last-first">
              <surname>Hanchard</surname> <firstname>Michael</firstname>
            </personname>
          </author> (<pubdate>1994</pubdate>), <title xml:id="b-9781474207300-1906">
            <emphasis role="italic">Orpheus and Power:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1907">
            <emphasis role="italic">The Movimento Negro of Rio de Janeiro and São Paulo, Brazil, 1945–1988</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1908">
            <city>Princeton</city>, <state>NJ</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref261">
          <author>
            <personname role="last-first">
              <surname>Hannaford</surname> <firstname>Ivan</firstname>
            </personname>
          </author> (<pubdate>1996</pubdate>), <title xml:id="b-9781474207300-1909">
            <emphasis role="italic">Race:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1910">
            <emphasis role="italic">The History of an Idea in the West</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1911">
            <city>Baltimore</city>, <state>MD</state>
          </address>: <publishername>Johns Hopkins University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref262">
          <author>
            <personname role="last-first">
              <surname>Hardt</surname> <firstname>Michael</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Antonio</firstname> <surname>Negri</surname>
            </personname>
          </author> (<pubdate>2000</pubdate>), <title xml:id="b-9781474207300-1912">
            <emphasis role="italic">Empire</emphasis>
          </title>, <address xml:id="b-9781474207300-1913">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref263">
          <author>
            <personname role="last-first">
              <surname>Hardy</surname> <firstname role="initials">R.</firstname>
            </personname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-1914">
            <emphasis role="italic">The Poisoned Well:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1915">
            <emphasis role="italic">Empire and its Legacy in the Middle East</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1916">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref264">
          <author>
            <personname role="last-first">
              <surname>Harper</surname> <firstname>Marjory</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Stephen</firstname> <surname>Constantine</surname>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-1917">
            <emphasis role="italic">Migration and Empire</emphasis>
          </title>, <address xml:id="b-9781474207300-1918">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref265">
          <author>
            <personname role="last-first">
              <surname>Harvey</surname> <firstname>David</firstname>
            </personname>
          </author> (<pubdate>2003</pubdate>), <title xml:id="b-9781474207300-1919">
            <emphasis role="italic">The New Imperialism</emphasis>
          </title>, <address xml:id="b-9781474207300-1920">
            <city>New York</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref266">
          <author>
            <personname role="last-first">
              <surname>Hasegawa</surname> <firstname>Tsuyoshi</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-1921">
            <emphasis role="italic">Racing the Enemy:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1922">
            <emphasis role="italic">Stalin, Truman, and the Surrender of Japan</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1923">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Belknap Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref267">
          <author>
            <personname role="last-first">
              <surname>Hatta</surname> <firstname>Mohammad</firstname>
            </personname>
          </author> (<pubdate>1960</pubdate>), <title xml:id="b-9781474207300-1924">
            <emphasis role="italic">Past and Future</emphasis>
          </title>, <address xml:id="b-9781474207300-1925">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Modern Indonesia Project, Cornell University</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref268">
          <bibliomset relation="article" xml:id="b-9781474207300-1926">
            <author>
              <personname role="last-first">
                <surname>Heffernan</surname> <firstname>Michael</firstname> <othername role="middle-initials">J.</othername>
              </personname>
            </author> (<pubdate>1991</pubdate>), “<title xml:id="b-9781474207300-1927">The Desert in French Orientalist Painting during the Nineteenth Century</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1928">
            <title xml:id="b-9781474207300-1929">
              <emphasis role="italic">Landscape Research</emphasis>
            </title>, <volumenum>16</volumenum> (<issuenum>2</issuenum>): <pagenums>37–42</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref269">
          <author>
            <personname role="last-first">
              <surname>Helleiner</surname> <firstname>Eric</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-1930">
            <emphasis role="italic">Forgotten Foundations of Bretton Woods, International Development and the Making of the Postwar Order</emphasis>
          </title>, <address xml:id="b-9781474207300-1931">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref270">
          <bibliomset relation="article" xml:id="b-9781474207300-1932">
            <author>
              <personname role="last-first">
                <surname>Henderson</surname> <firstname>Ian</firstname>
              </personname>
            </author> (<pubdate>1974</pubdate>), <title xml:id="b-9781474207300-1933">“The Limits of Colonial Power:</title> <subtitle xml:id="b-9781474207300-1934">Race and Labour Problems in Colonial Zambia, 1900–1953,”</subtitle>
          </bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1935">
            <title xml:id="b-9781474207300-1936">
              <emphasis role="italic">Journal of Imperial and Commonwealth History</emphasis>
            </title>, <volumenum>2</volumenum>: <pagenums>294–307</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref271">
          <bibliomset relation="article" xml:id="b-9781474207300-1937">
            <author>
              <personname role="last-first">
                <surname>Henderson</surname> <firstname>Timothy</firstname> <othername role="middle-initials">J.</othername>
              </personname>
            </author> (<pubdate>2011</pubdate>), “<title xml:id="b-9781474207300-1938">Bracero Blacklists:</title> <subtitle xml:id="b-9781474207300-1939">Mexican Migration and the Unraveling of the Good Neighbor Policy</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1940">
            <title xml:id="b-9781474207300-1941">
              <emphasis role="italic">The Latin Americanist</emphasis>
            </title>, <volumenum>55</volumenum> (<issuenum>4</issuenum>): <pagenums>199–217</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref272">
          <author>
            <personname role="last-first">
              <surname>Hitchcock</surname> <firstname>William</firstname> <othername role="middle-initials">I.</othername>
            </personname>
          </author> (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-1942">
            <emphasis role="italic">Liberation:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1943">
            <emphasis role="italic">The Bitter Road to Freedom, Europe 1944–45</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1944">
            <city>New York</city>
          </address>: <publishername>Faber &amp; Faber</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref273">
          <bibliomset relation="article" xml:id="b-9781474207300-1945">
            <author>
              <personname role="last-first">
                <surname>Hoad</surname> <firstname>Neville</firstname>
              </personname>
            </author> (<pubdate>2000</pubdate>), “<title xml:id="b-9781474207300-1946">Arrested Development or the Queerness of Savages:</title> <subtitle xml:id="b-9781474207300-1947">Resisting Evolutionary Narratives of Difference</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1948">
            <title xml:id="b-9781474207300-1949">
              <emphasis role="italic">Postcolonial Studies:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1950">
              <emphasis role="italic">Culture, Politics, Economy</emphasis>
            </subtitle>, <volumenum>3</volumenum> (<issuenum>2</issuenum>): <pagenums>133–58</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref274">
          <author>
            <personname role="last-first">
              <surname>Hoad</surname> <firstname>Neville</firstname>
            </personname>
          </author> (<pubdate>2007</pubdate>), <title xml:id="b-9781474207300-1951">
            <emphasis role="italic">African Intimacies:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1952">
            <emphasis role="italic">Race, Homosexuality, and Globalization</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1953">
            <city>Minneapolis</city>, <state>MN</state>
          </address>: <publishername>University of Minnesota Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref275">
          <editor>
            <personname role="last-first">
              <surname>Hobsbawm</surname> <firstname>Eric</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Terence</firstname> <othername role="middle-initials">O.</othername> <surname>Ranger</surname>
            </personname>
          </editor>, eds (<pubdate>1992</pubdate>), <title xml:id="b-9781474207300-1954">
            <emphasis role="italic">The Invention of Tradition</emphasis>
          </title>, <address xml:id="b-9781474207300-1955">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref276">
          <author>
            <personname role="last-first">
              <surname>Hochschild</surname> <firstname>Adam</firstname>
            </personname>
          </author> (<pubdate>1998</pubdate>), <title xml:id="b-9781474207300-1956">
            <emphasis role="italic">King Leopold’s Ghost:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1957">
            <emphasis role="italic">A Story of Greed, Terror, and Heroism in Colonial Africa</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1958">
            <city>New York</city>
          </address>: <publishername>Houghton Mifflin</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref277">
          <author>
            <personname role="last-first">
              <surname>Hodann</surname> <firstname>Max</firstname>
            </personname>
          </author> ([<pubdate>1932</pubdate>] <date>1975</date>), <title xml:id="b-9781474207300-1959">
            <emphasis role="italic">Sex Life in Europe:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1960">
            <emphasis role="italic">A Biological and Sociological Survey</emphasis>
          </subtitle>, trans. <author>
            <personname role="first-last">
              <firstname role="initials">J.</firstname> <surname>Gibbs</surname>
            </personname>
          </author>, <address xml:id="b-9781474207300-1961">
            <city>New York</city>
          </address>: <publishername>AMS Press</publishername>.</bibliomixed>
<?page value="214"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref278">
          <editor>
            <personname role="last-first">
              <surname>Hoffman</surname> <firstname>Stefan-Ludwig</firstname>
            </personname>
          </editor>, ed. (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-1962">
            <emphasis role="italic">Human Rights in the Twentieth Century</emphasis>
          </title>, <address xml:id="b-9781474207300-1963">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref279">
          <editor>
            <personname role="last-first">
              <surname>Höhn</surname> <firstname>Maria</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Seungsook</firstname> <surname>Moon</surname>
            </personname>
          </editor>, eds (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-1964">
            <emphasis role="italic">Over There:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1965">
            <emphasis role="italic">Living with the U.S. Military Empire from World War Two to the Present</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1966">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref280">
          <author>
            <personname role="last-first">
              <surname>Holt</surname> <firstname>Thomas</firstname>
            </personname>
          </author> (<pubdate>2000</pubdate>), <title xml:id="b-9781474207300-1967">
            <emphasis role="italic">Problem of Race in the 21st Century</emphasis>
          </title>, <address xml:id="b-9781474207300-1968">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref281">
          <author>
            <personname role="last-first">
              <surname>Hopkins</surname> <firstname>Anthony</firstname> <othername role="middle-initials">G.</othername>
            </personname>
          </author> (<pubdate>1973</pubdate>), <title xml:id="b-9781474207300-1969">
            <emphasis role="italic">An Economic History of West Africa</emphasis>
          </title>, <address xml:id="b-9781474207300-1970">
            <city>London</city>
          </address>: <publishername>Longman Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref282">
          <bibliomset relation="article" xml:id="b-9781474207300-1971">
            <author>
              <personname role="last-first">
                <surname>Horak</surname> <firstname>Roman</firstname>
              </personname>
            </author> (<pubdate>2013</pubdate>), “‘<title xml:id="b-9781474207300-1972">We Have Become Niggers!’: Josephine Baker as a Threat to Viennese Culture</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1973">
            <title xml:id="b-9781474207300-1974">
              <emphasis role="italic">Culture Unbound:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1975">
              <emphasis role="italic">Journal of Current Cultural Research</emphasis>
            </subtitle>, <volumenum>5</volumenum> (<issuenum>4</issuenum>): <pagenums>515–30</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref283">
          <author>
            <personname role="last-first">
              <surname>Horne</surname> <firstname>Alistair</firstname>
            </personname>
          </author> ([<pubdate>1977</pubdate>] <date>2006</date>), <title xml:id="b-9781474207300-1976">
            <emphasis role="italic">A Savage War of Peace, Algeria 1954–1962</emphasis>
          </title>, <address xml:id="b-9781474207300-1977">
            <city>New York</city>
          </address>: <publishername>Macmillan</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref284">
          <author>
            <personname role="last-first">
              <surname>Howard</surname> <firstname>Michael</firstname>
            </personname>
          </author> (<pubdate>1976</pubdate>), <title xml:id="b-9781474207300-1978">
            <emphasis role="italic">War in European History</emphasis>
          </title>, <address xml:id="b-9781474207300-1979">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref285">
          <author>
            <personname role="last-first">
              <surname>Hull</surname> <firstname>Isabel</firstname> <othername role="middle-initials">V.</othername>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-1980">
            <emphasis role="italic">Absolute Destruction:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1981">
            <emphasis role="italic">Military Culture and the Practices of War in Imperial Germany</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1982">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref286">
          <author>
            <personname role="last-first">
              <surname>Hull</surname> <othername role="middle">Edith</othername> <firstname>Maud</firstname>
            </personname>
          </author> (<pubdate>1919</pubdate>), <title xml:id="b-9781474207300-1983">
            <emphasis role="italic">The Sheik</emphasis>
          </title>, <address xml:id="b-9781474207300-1984">
            <city>London</city>
          </address>: <publishername>E. Nast &amp; Grayson</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref287">
          <author>
            <personname role="last-first">
              <surname>Hunt</surname> <firstname>Michael</firstname> <othername role="middle-initials">H.</othername>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Steven</firstname> <othername role="middle-initials">I.</othername> <surname>Levine</surname>
            </personname>
          </author> (<pubdate>2012</pubdate>), <title xml:id="b-9781474207300-1985">
            <emphasis role="italic">Arc of Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-1986">
            <emphasis role="italic">America’s Wars in Asia from the Philippines to Vietnam</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-1987">
            <city>Chapel Hill</city>, <state>NC</state>
          </address>: <publishername>University of North Carolina Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref288">
          <bibliomset relation="article" xml:id="b-9781474207300-1988">
            <author>
              <personname role="last-first">
                <surname>Hunt</surname> <othername role="middle">Nancy</othername> <firstname>Rose</firstname>
              </personname>
            </author> (<pubdate>1988</pubdate>), “‘<title xml:id="b-9781474207300-1989">Le Bebe En Brousse’: European Women, African Birth Spacing and Colonial Intervention in Breast Feeding in the Belgian Congo</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-1990">
            <title xml:id="b-9781474207300-1991">
              <emphasis role="italic">International Journal of African Historical Studies</emphasis>
            </title>, <volumenum>21</volumenum> (<issuenum>3</issuenum>): <pagenums>401–32</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref289">
          <author>
            <personname role="last-first">
              <surname>Hutchins</surname> <firstname>Francis</firstname>
            </personname>
          </author> (<pubdate>1973</pubdate>), <title xml:id="b-9781474207300-1992">
            <emphasis role="italic">India’s Revolution</emphasis>
          </title>, <address xml:id="b-9781474207300-1993">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref291">
          <bibliomset relation="part" xml:id="b-9781474207300-1994">
            <author>
              <personname role="last-first">
                <surname>Hyde</surname> <firstname>David</firstname>
              </personname>
            </author> (<pubdate>2015</pubdate>), “<title xml:id="b-9781474207300-1995">East African Railways and Harbours 1945–60: From ‘Crisis of Accumulation’ to Labour Resistance</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-1996">
            <title xml:id="b-9781474207300-1997">
              <emphasis role="italic">Subversions of Colonial Cultures:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-1998">
              <emphasis role="italic">Commodities and Anti-Commodities in Global History</emphasis>
            </subtitle>, ed. <editor>
              <personname role="first-last">
                <firstname>Matt</firstname> <surname>Harro</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Sandip</firstname> <surname>Hazareesingh</surname>
              </personname>
            </editor>, <pagenums>147–69</pagenums>, <address xml:id="b-9781474207300-1999">
              <city>Basingstoke</city>
            </address>: <publishername>Palgrave Macmillan</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref292">
          <bibliomset relation="article" xml:id="b-9781474207300-2000">
            <author>
              <personname role="last-first">
                <surname>Hyde</surname> <firstname>David</firstname>
              </personname>
            </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-2001">The East African Railway Strike, 1959–60: Labour’s Challenge of Inter-Territorialism</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2002">
            <title xml:id="b-9781474207300-2003">
              <emphasis role="italic">Labor History</emphasis>
            </title>, <volumenum>57</volumenum> (<issuenum>1</issuenum>): <pagenums>71–91</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref293">
          <bibliomset relation="article" xml:id="b-9781474207300-2004">
            <author>
              <personname role="last-first">
                <surname>Hyslop</surname> <firstname>Jonathan</firstname>
              </personname>
            </author> (<pubdate>1995</pubdate>), “<title xml:id="b-9781474207300-2005">White Working-Class Women and the Invention of Apartheid: ‘Purified’ Afrikaner Nationalist Agitation for Legislation Against ‘Mixed’ Marriages, 1934–9</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2006">
            <title xml:id="b-9781474207300-2007">
              <emphasis role="italic">Journal of African History</emphasis>
            </title>, <volumenum>36</volumenum> (<issuenum>1</issuenum>): <pagenums>57–81</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref294">
          <author>
            <personname role="last-first">
              <surname>Idris</surname> <othername role="middle">Amir</othername> <firstname>Hasan</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-2008">
            <emphasis role="italic">Conflict and Politics of Identity in Sudan</emphasis>
          </title>, <address xml:id="b-9781474207300-2009">
            <city>New York</city>
          </address>: <publishername>Palgrave Macmillan</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref295">
          <author>
            <personname role="last-first">
              <surname>Inden</surname> <firstname>Ronald</firstname>
            </personname>
          </author> (<pubdate>1990</pubdate>), <title xml:id="b-9781474207300-2010">
            <emphasis role="italic">Imagining India</emphasis>
          </title>, <address xml:id="b-9781474207300-2011">
            <city>Bloomington</city>, <state>IN</state>
          </address>: <publishername>Indiana University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref296">
          <author>
            <personname role="last-first">
              <surname>Inglis</surname> <firstname>Amirah</firstname>
            </personname>
          </author> (<pubdate>1975</pubdate>), <title xml:id="b-9781474207300-2012">
            <emphasis role="italic">The White Women’s Protection Ordinance:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2013">
            <emphasis role="italic">Sexual Anxiety and Politics in Papua</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2014">
            <city>New York</city>
          </address>: <publishername>St. Martin’s Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref297">
          <bibliomset relation="article" xml:id="b-9781474207300-2015">
            <author>
              <personname role="last-first">
                <surname>Irwin</surname> <firstname>Douglas</firstname> <othername role="middle-initials">A.</othername>
              </personname>
            </author> (<pubdate>1998</pubdate>), “<title xml:id="b-9781474207300-2016">The Smoot-Hawley Tariff:</title> <subtitle xml:id="b-9781474207300-2017">A Quantitative Assessment</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2018">
            <title xml:id="b-9781474207300-2019">
              <emphasis role="italic">Review of Economics and Statistics</emphasis>
            </title>, <volumenum>80</volumenum> (<issuenum>2</issuenum>): <pagenums>326–34</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref298">
          <author>
            <personname role="last-first">
              <surname>Irwin</surname> <firstname>Douglas</firstname> <othername role="middle-initials">A.</othername>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-2020">
            <emphasis role="italic">Peddling Protectionism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2021">
            <emphasis role="italic">Smoot-Hawley and the Great Depression</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2022">
            <city>Princeton</city>, <state>NJ</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref299">
          <author>
            <personname role="last-first">
              <surname>Irwin</surname> <firstname>Douglas</firstname> <othername role="middle-initials">A.</othername>
            </personname>
          </author> (<pubdate>2012</pubdate>), <title xml:id="b-9781474207300-2023">
            <emphasis role="italic">Trade Policy Disaster:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2024">
            <emphasis role="italic">Lessons from the 1930s</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2025">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>MIT Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref300">
          <author>
            <personname role="last-first">
              <surname>Irwin</surname> <firstname>Douglas</firstname> <othername role="middle-initials">A.</othername>
            </personname>
          </author>, <author>
            <personname role="first-last">
              <firstname>Petros</firstname> <othername role="middle-initials">C.</othername> <surname>Mavroidis</surname>
            </personname>
          </author>, and <author>
            <personname role="first-last">
              <firstname>Alan</firstname> <othername role="middle-initials">O.</othername> <surname>Sykes</surname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-2026">
            <emphasis role="italic">The Genesis of the GATT</emphasis>
          </title>, <address xml:id="b-9781474207300-2027">
            <city>New York</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref301">
          <author>
            <personname role="last-first">
              <surname>Isaac</surname> <firstname>Benjamin</firstname>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-2028">
            <emphasis role="italic">The Invention of Racism in Classical Antiquity</emphasis>
          </title>, <address xml:id="b-9781474207300-2029">
            <city>Princeton</city>, <state>NJ</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<?page value="215"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref302">
          <author>
            <personname role="last-first">
              <surname>Isaacman</surname> <firstname>Allen</firstname> <othername role="middle-initials">F.</othername>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Barbara</firstname> <othername role="middle-initials">S.</othername> <surname>Isaacman</surname>
            </personname>
          </author> (<pubdate>1976</pubdate>), <title xml:id="b-9781474207300-2030">
            <emphasis role="italic">The Tradition of Resistance in Mozambique:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2031">
            <emphasis role="italic">The Zambesi Valley, 1850–1921</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2032">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref303">
          <author>
            <personname role="last-first">
              <surname>Isaacman</surname> <firstname>Allen</firstname> <othername role="middle-initials">F.</othername>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Barbara</firstname> <othername role="middle-initials">S.</othername> <surname>Isaacman</surname>
            </personname>
          </author> (<pubdate>1983</pubdate>), <title xml:id="b-9781474207300-2033">
            <emphasis role="italic">Mozambique:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2034">
            <emphasis role="italic">From Colonialism to Revolution, 1900–1982</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2035">
            <city>Aldershot</city>
          </address>: <publishername>Gower</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref304">
          <author>
            <personname role="last-first">
              <surname>Isaacman</surname> <firstname>Allen</firstname> <othername role="middle-initials">F.</othername>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Barbara</firstname> <othername role="middle-initials">S.</othername> <surname>Isaacman</surname>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-2036">
            <emphasis role="italic">Dams, Displacement and the Delusion of Development:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2037">
            <emphasis role="italic">Cahora Bassa and its Legacies in Mozambique, 1965–2007</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2038">
            <city>Athens</city>, <state>OH</state>
          </address>: <publishername>Ohio University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref305">
          <bibliomset relation="part" xml:id="b-9781474207300-2039">
            <author>
              <personname role="last-first">
                <surname>Jaakson</surname> <firstname>Reiner</firstname>
              </personname>
            </author> (<pubdate>2004</pubdate>), “<title xml:id="b-9781474207300-2040">Globalisation and Neocolonialist Tourism</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2041">
            <title xml:id="b-9781474207300-2042">
              <emphasis role="italic">Tourism and Postcolonialism:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2043">
              <emphasis role="italic">Contested Discourses, Identities and Representations</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Michael</firstname> <othername role="middle-initials">C.</othername> <surname>Hall</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Hazel</firstname> <surname>Tucker</surname>
              </personname>
            </editor>, <pagenums>169–83</pagenums>, <address xml:id="b-9781474207300-2044">
              <city>London</city>
            </address>: <publishername>Routledge</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref306">
          <bibliomset relation="article" xml:id="b-9781474207300-2045">
            <author>
              <personname role="last-first">
                <surname>Jackson</surname> <firstname>Peter</firstname> <othername role="middle-initials">A.</othername>
              </personname>
            </author> (<pubdate>1997</pubdate>), “<title xml:id="b-9781474207300-2046">Thai Research on Male Homosexuality and Transgenderism and the Cultural Limits of Foucaultian Analysis</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2047">
            <title xml:id="b-9781474207300-2048">
              <emphasis role="italic">Journal of the History of Sexuality</emphasis>
            </title>, <volumenum>8</volumenum> (<issuenum>1</issuenum>): <pagenums>52–85</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref307">
          <bibliomset relation="article" xml:id="b-9781474207300-2049">
            <author>
              <personname role="last-first">
                <surname>Jackson</surname> <firstname>Will</firstname>
              </personname>
            </author> (<pubdate>2013</pubdate>), “<title xml:id="b-9781474207300-2050">Dangers to the Colony:</title> <subtitle xml:id="b-9781474207300-2051">Loose Women and the ‘Poor White’ Problem in Kenya</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2052">
            <title xml:id="b-9781474207300-2053">
              <emphasis role="italic">Journal of Colonialism and Colonial History</emphasis>
            </title>, <volumenum>14</volumenum> (<issuenum>2</issuenum>).</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref308">
          <bibliomset relation="article" xml:id="b-9781474207300-2054">
            <author>
              <personname role="last-first">
                <surname>James</surname> <firstname>Leslie</firstname>
              </personname>
            </author> and <author>
              <personname role="first-last">
                <firstname>Daniel</firstname> <surname>Whittall</surname>
              </personname>
            </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-2055">Ambiguity and Imprint:</title> <subtitle xml:id="b-9781474207300-2056">British Racial Logics, Colonial Commissions of Enquiry, and the Creolization of Britain in the 1930s and 1940s</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2057">
            <title xml:id="b-9781474207300-2058">
              <emphasis role="italic">Callaloo</emphasis>
            </title>, <volumenum>39</volumenum> (<issuenum>1</issuenum>): <pagenums>166–84</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref309">
          <author>
            <personname role="last-first">
              <surname>Jarboe</surname> <othername role="middle">Andrew</othername> <firstname>Tait</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Richard</firstname> <othername role="middle-initials">S.</othername> <surname>Fogarty</surname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-2059">
            <emphasis role="italic">Empires in World War I:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2060">
            <emphasis role="italic">Shifting Frontiers and Imperial Dynamics in a Global Conflict</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2061">
            <city>London</city>
          </address>: <publishername>I.B. Tauris</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref310">
          <bibliomset relation="article" xml:id="b-9781474207300-2062">
            <author>
              <personname role="last-first">
                <surname>Jean-Baptiste</surname> <firstname>Rachel</firstname>
              </personname>
            </author> (<pubdate>2008</pubdate>), “‘<title xml:id="b-9781474207300-2063">These Laws Should Be Made by Us’: Customary Marriage Law, Codification and Political Authority in Twentieth-Century Colonial Gabon</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2064">
            <title xml:id="b-9781474207300-2065">
              <emphasis role="italic">Journal of African History</emphasis>
            </title>, <volumenum>49</volumenum> (<issuenum>3</issuenum>): <pagenums>217–40</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref311">
          <author>
            <personname role="last-first">
              <surname>Jean-Baptiste</surname> <firstname>Rachel</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-2066">
            <emphasis role="italic">Conjugal Rights:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2067">
            <emphasis role="italic">Marriage, Sexuality, and Urban Life in Colonial Libreville, Gabon</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2068">
            <city>Athens</city>, <state>OH</state>
          </address>: <publishername>Ohio University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref312">
          <bibliomset relation="article" xml:id="b-9781474207300-2069">
            <author>
              <personname role="last-first">
                <surname>Jenkinson</surname> <firstname>Jacqueline</firstname>
              </personname>
            </author> (<pubdate>2012</pubdate>), “‘<title xml:id="b-9781474207300-2070">All in the Same Uniform’? The Participation of Black Colonial Residents in the British Armed Forces in the First World War</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2071">
            <title xml:id="b-9781474207300-2072">
              <emphasis role="italic">Journal of Imperial and Commonwealth History</emphasis>
            </title>, <volumenum>40</volumenum> (<issuenum>2</issuenum>): <pagenums>207–30</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref313">
          <author>
            <personname role="last-first">
              <surname>Jennings</surname> <firstname>Eric</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-2073">
            <emphasis role="italic">Free French Africa in World War II:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2074">
            <emphasis role="italic">The African Resistance</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2075">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref314">
          <bibliomset relation="article" xml:id="b-9781474207300-2076">
            <author>
              <personname role="last-first">
                <surname>Jhappan</surname> <firstname>Radha</firstname>
              </personname>
            </author> (<pubdate>1992</pubdate>), “<title xml:id="b-9781474207300-2077">Global Community? Supranational Strategies of Canada’s Aboriginal Peoples</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2078">
            <title xml:id="b-9781474207300-2079">
              <emphasis role="italic">Journal of Indigenous Studies</emphasis>
            </title>, <volumenum>3</volumenum> (<issuenum>1</issuenum>): <pagenums>59–90</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref315">
          <author>
            <personname role="last-first">
              <surname>Johnson</surname> <firstname>Douglas</firstname>
            </personname>
          </author> (<pubdate>2003</pubdate>), <title xml:id="b-9781474207300-2080">
            <emphasis role="italic">The Root Causes of Sudan’s Civil War</emphasis>
          </title>, <address xml:id="b-9781474207300-2081">
            <city>Bloomington</city>, <state>IN</state>
          </address>: <publishername>Indiana University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref316">
          <author>
            <personname role="last-first">
              <surname>Jones</surname> <firstname>Hilary</firstname>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-2082">
            <emphasis role="italic">The Métis of Senegal:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2083">
            <emphasis role="italic">Urban Life and Politics in French West Africa</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2084">
            <city>Bloomington</city>, <state>IN</state>
          </address>: <publishername>Indiana University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref317">
          <author>
            <personname role="last-first">
              <surname>Jones</surname> <firstname>James</firstname> <othername role="middle-initials">A.</othername>
            </personname>
          </author> (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-2085">
            <emphasis role="italic">Industrial Labor in the Colonial World:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2086">
            <emphasis role="italic">Workers of the Chemin de Fer Dakar-Niger, 1881–1963</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2087">
            <city>Portsmouth</city>, <state>NH</state>
          </address>: <publishername>Heinemann</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref318">
          <author>
            <personname role="last-first">
              <surname>Jones</surname> <firstname>Reece</firstname>
            </personname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-2088">
            <emphasis role="italic">Violent Borders:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2089">
            <emphasis role="italic">Refugees and the Right to Move</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2090">
            <city>New York</city>
          </address>: Verso.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref319">
          <author>
            <personname role="last-first">
              <surname>Joshi</surname> <firstname>Chitra</firstname>
            </personname>
          </author> (<pubdate>2003</pubdate>), <title xml:id="b-9781474207300-2091">
            <emphasis role="italic">Lost Worlds:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2092">
            <emphasis role="italic">Indian Labour and its Forgotten Histories</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2093">
            <city>Delhi</city>
          </address>: <publishername>Permanent Black</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref320">
          <author>
            <personname role="last-first">
              <surname>Judd</surname> <firstname>Denis</firstname>
            </personname>
          </author> (<pubdate>1996</pubdate>), <title xml:id="b-9781474207300-2094">
            <emphasis role="italic">Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2095">
            <emphasis role="italic">The British Imperial Experience from 1765 to the Present</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2096">
            <city>New York</city>
          </address>: <publishername>Basic Books</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref321">
          <author>
            <personname role="last-first">
              <surname>Jung</surname> <firstname>Moon-Kie</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2097">
            <emphasis role="italic">Reworking Race:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2098">
            <emphasis role="italic">The Making of Hawaii’s Interracial Labor Movement</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2099">
            <city>New York</city>
          </address>: <publishername>Columbia University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref322">
          <author>
            <personname role="last-first">
              <surname>Kahin</surname> <othername role="middle">George</othername> <firstname>McTurnan</firstname>
            </personname>
          </author> (<pubdate>1956</pubdate>), <title xml:id="b-9781474207300-2100">
            <emphasis role="italic">The Asian-African Conference: Bandung, Indonesia, April 1955</emphasis>
          </title>, <address xml:id="b-9781474207300-2101">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<?page value="216"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref323">
          <author>
            <personname role="last-first">
              <surname>Karnow</surname> <firstname>Stanley</firstname>
            </personname>
          </author> (<pubdate>1983</pubdate>), <title xml:id="b-9781474207300-2102">
            <emphasis role="italic">Vietnam, a History</emphasis>
          </title>, <address xml:id="b-9781474207300-2103">
            <city>New York</city>
          </address>: <publishername>Viking Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref324">
          <editor>
            <personname role="last-first">
              <surname>Karsch-Haack</surname> <firstname>Ferdinand</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>René</firstname> <surname>Stelter</surname>
            </personname>
          </editor>, eds (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-2104">
            <emphasis role="italic">Uranos:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2105">
            <emphasis role="italic">Unabhägige uranische Monatsschrift für Wissenschaft, Polemik, Belletristik, Kunst</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2106">
            <city>Hamburg</city>
          </address>: <publishername>MännerschwarmSkript Verlag</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref325">
          <author>
            <personname role="last-first">
              <surname>Keegan</surname> <firstname>John</firstname>
            </personname>
          </author> ([<pubdate>1976</pubdate>] <date>1978</date>), <title xml:id="b-9781474207300-2107">
            <emphasis role="italic">The Face of Battle</emphasis>
          </title>, <address xml:id="b-9781474207300-2108">
            <city>New York</city>
          </address>: <publishername>Penguin</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref326">
          <bibliomset relation="article" xml:id="b-9781474207300-2109">
            <author>
              <personname role="last-first">
                <surname>Keese</surname> <firstname>Alexander</firstname>
              </personname>
            </author> (<pubdate>2013</pubdate>), “<title xml:id="b-9781474207300-2110">Searching for the Reluctant Hands:</title> <subtitle xml:id="b-9781474207300-2111">Obsession, Ambivalence and the Practice of Organising Involuntary Labour in Colonial Cuanza-Sul and Malange Districts, Angola, 1926–1945</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2112">
            <title xml:id="b-9781474207300-2113">
              <emphasis role="italic">Journal of Imperial and Commonwealth History</emphasis>
            </title>, <volumenum>41</volumenum> (<issuenum>2</issuenum>): <pagenums>238–58</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref327">
          <bibliomset relation="part" xml:id="b-9781474207300-2114">
            <author>
              <personname role="last-first">
                <surname>Kendall</surname> <firstname>Kathryn</firstname>
              </personname>
            </author> (<pubdate>1999</pubdate>), “<title xml:id="b-9781474207300-2115">Women in Lesotho and the (Western) Construction of Homophobia</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2116">
            <title xml:id="b-9781474207300-2117">
              <emphasis role="italic">Female Desires:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2118">
              <emphasis role="italic">Same-Sex Relations and Transgender Practices across Cultures</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Evelyn</firstname> <surname>Blackwood</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Saskia</firstname> <surname>Wieringa</surname>
              </personname>
            </editor>, <pagenums>157–80</pagenums>, <address xml:id="b-9781474207300-2119">
              <city>New York</city>
            </address>: <publishername>Columbia University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref328">
          <author>
            <personname role="last-first">
              <surname>Kennedy</surname> <firstname>Dane</firstname>
            </personname>
          </author> (<pubdate>1987</pubdate>), <title xml:id="b-9781474207300-2120">
            <emphasis role="italic">Islands of White:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2121">
            <emphasis role="italic">Settler Society and Culture in Kenya and Southern Rhodesia</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2122">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref329">
          <author>
            <personname role="last-first">
              <surname>Keynes</surname> <othername role="middle">John</othername> <firstname>Maynard</firstname>
            </personname>
          </author> (<pubdate>1920</pubdate>), <title xml:id="b-9781474207300-2123">
            <emphasis role="italic">The Economic Consequences of the Peace</emphasis>
          </title>, <address xml:id="b-9781474207300-2124">
            <city>New York</city>
          </address>: <publishername>Harcourt, Brace &amp; Howe</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref330">
          <author>
            <personname role="last-first">
              <surname>Khalidi</surname> <firstname>Rashid</firstname>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-2125">
            <emphasis role="italic">Resurrecting Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2126">
            <emphasis role="italic">Western Footprints and America’s Perilous Path in the Middle East</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2127">
            <city>Boston</city>, <state>MA</state>
          </address>: <publishername>Beacon Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref331">
          <author>
            <personname role="last-first">
              <surname>Khalidi</surname> <firstname>Walid</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2128">
            <emphasis role="italic">All That Remains:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2129">
            <emphasis role="italic">The Palestinian Villages Occupied and Depopulated by Israel in 1948</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2130">
            <city>Washington</city>, <state>DC</state>
          </address>: <publishername>Institute for Palestine Studies</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref332">
          <author>
            <personname role="last-first">
              <surname>Khan</surname> <firstname>Yasmin</firstname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-2131">
            <emphasis role="italic">The Great Partition:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2132">
            <emphasis role="italic">The Making of India and Pakistan</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2133">
            <city>New Haven</city>, <state>CT</state>
          </address>: <publishername>Yale University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref333">
          <author>
            <personname role="last-first">
              <surname>Khan</surname> <firstname>Yasmin</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-2134">
            <emphasis role="italic">India at War</emphasis>
          </title>, <address xml:id="b-9781474207300-2135">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref334">
          <bibliomset relation="article" xml:id="b-9781474207300-2136">
            <author>
              <personname role="last-first">
                <surname>Kholoussy</surname> <firstname>Hanan</firstname>
              </personname>
            </author> (<pubdate>2010</pubdate>), “<title xml:id="b-9781474207300-2137">Monitoring and Medicalising Male Sexuality in Semi-Colonial Egypt</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2138">
            <title xml:id="b-9781474207300-2139">
              <emphasis role="italic">Gender and History</emphasis>
            </title>, <volumenum>22</volumenum> (<issuenum>3</issuenum>): <pagenums>677–91</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref335">
          <bibliomset relation="part" xml:id="b-9781474207300-2140">
            <author>
              <personname role="last-first">
                <surname>Khor</surname> <firstname>Denise</firstname>
              </personname>
            </author> (<pubdate>2014</pubdate>), “<title xml:id="b-9781474207300-2141">Hawaii’s Theaters, Labor Strikes, and Counterpublic Culture, 1909–1934</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2142">
            <title xml:id="b-9781474207300-2143">
              <emphasis role="italic">The Rising Tide of Color:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2144">
              <emphasis role="italic">Race, State Violence, and Radical Movements across the Pacific</emphasis>
            </subtitle>, ed. <editor>
              <personname role="first-last">
                <firstname>Moon-Ho</firstname> <surname>Jung</surname>
              </personname>
            </editor>, <pagenums>102–27</pagenums>, <address xml:id="b-9781474207300-2145">
              <city>Seattle</city>, <state>WA</state>
            </address>: <publishername>University of Washington Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref336">
          <author>
            <personname role="last-first">
              <surname>Kiernan</surname> <firstname>Victor</firstname> <othername role="middle-initials">G.</othername>
            </personname>
          </author> (<pubdate>1998</pubdate>), <title xml:id="b-9781474207300-2146">
            <emphasis role="italic">Colonial Empires and Armies: 1815–1960</emphasis>
          </title>, <address xml:id="b-9781474207300-2147">
            <city>Stroud</city>
          </address>: <publishername>Sutton Publishing</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref337">
          <author>
            <personname role="last-first">
              <surname>Kilcullen</surname> <firstname>David</firstname>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-2148">
            <emphasis role="italic">Counterinsurgency</emphasis>
          </title>, <address xml:id="b-9781474207300-2149">
            <city>New York</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref338">
          <author>
            <personname role="last-first">
              <surname>Killingray</surname> <firstname>David</firstname>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-2150">
            <emphasis role="italic">Fighting for Britain:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2151">
            <emphasis role="italic">African Soldiers in the Second World War</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2152">
            <city>Woodbridge</city>
          </address>: <publishername>James Currey</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref339">
          <author>
            <personname role="last-first">
              <surname>Kincaid</surname> <firstname>Jamaica</firstname>
            </personname>
          </author> (<pubdate>1988</pubdate>), <title xml:id="b-9781474207300-2153">
            <emphasis role="italic">A Small Place</emphasis>
          </title>, <address xml:id="b-9781474207300-2154">
            <city>New York</city>
          </address>: <publishername>Penguin</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref340">
          <author>
            <personname role="last-first">
              <surname>Klose</surname> <firstname>Fabian</firstname>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-2155">
            <emphasis role="italic">Human Rights in the Shadow of Colonial Violence</emphasis>
          </title>, trans. <author>
            <personname role="first-last">
              <firstname>Dona</firstname> <surname>Geyer</surname>
            </personname>
          </author>, <address xml:id="b-9781474207300-2156">
            <city>Philadelphia</city>, <state>PA</state>
          </address>: <publishername>University of Pennsylvania Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref341">
          <author>
            <personname role="last-first">
              <surname>Kramer</surname> <firstname>Paul</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2157">
            <emphasis role="italic">The Blood of Government:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2158">
            <emphasis role="italic">Race, Empire, the United States, and the Philippines</emphasis>
          </subtitle>, <author>
            <personname role="first-last">
              <firstname>Chapel</firstname> <surname>Hill</surname>
            </personname>
          </author>, <address xml:id="b-9781474207300-2159">
            <city>NC</city>
          </address>: <publishername>University of North Carolina Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref342">
          <author>
            <personname role="last-first">
              <surname>Krikler</surname> <firstname>Jeremy</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-2160">
            <emphasis role="italic">White Rising:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2161">
            <emphasis role="italic">The 1922 Insurrection and Racial Killing in South Africa</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2162">
            <city>Manchester</city>
          </address>: <publishername>Manchester University Press</publishername>.</bibliomixed>
<bibliomixed role="series" xml:id="b-9781474207300-ref343">
          <author>
            <personname role="last-first">
              <surname>Kristol</surname> <firstname>Irving</firstname>
            </personname>
          </author> (<pubdate>1997</pubdate>), “<title xml:id="b-9781474207300-2163">The Emerging American Imperium</title>,” <subtitle xml:id="b-9781474207300-2164">
            <emphasis role="italic">Wall Street Journal</emphasis>
          </subtitle>, <date>August 18</date>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref344">
          <author>
            <personname role="last-first">
              <surname>Kuklick</surname> <firstname>Henrika</firstname>
            </personname>
          </author> (<pubdate>1991</pubdate>), <title xml:id="b-9781474207300-2165">
            <emphasis role="italic">The Savage Within:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2166">
            <emphasis role="italic">The Social History of British Anthropology, 1885–1945</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2167">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref345">
          <author>
            <personname role="last-first">
              <surname>Kumar</surname> <firstname>Amitava</firstname>
            </personname>
          </author> (<pubdate>2000</pubdate>), <title xml:id="b-9781474207300-2168">
            <emphasis role="italic">Passport Photos</emphasis>
          </title>, <address xml:id="b-9781474207300-2169">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref346">
          <bibliomset relation="part" xml:id="b-9781474207300-2170">
            <author>
              <personname role="last-first">
                <surname>Kundrus</surname> <firstname>Birthe</firstname>
              </personname>
            </author> (<pubdate>2014</pubdate>), “<title xml:id="b-9781474207300-2171">Colonialism, Imperialism, National Socialism. How Imperial was the Third Reich?</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2172">
            <title xml:id="b-9781474207300-2173">
              <emphasis role="italic">German Colonialism in a Global Age</emphasis>
            </title>, eds <editor>
              <personname role="first-last">
                <firstname>Bradley</firstname> <surname>Naranch</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Geoff</firstname> <surname>Eley</surname>
              </personname>
            </editor>, <pagenums>330–46</pagenums>, <address xml:id="b-9781474207300-2174">
              <city>Durham</city>, <state>NC</state>
            </address>: <publishername>Duke University Press</publishername>.</bibliomset>
        </bibliomixed>
<?page value="217"?>
<bibliomixed role="article" xml:id="b-9781474207300-ref347">
          <bibliomset relation="article" xml:id="b-9781474207300-2175">
            <author>
              <personname role="last-first">
                <surname>Lal</surname> <firstname>Vinay</firstname>
              </personname>
            </author> (<pubdate>1993</pubdate>), “<title xml:id="b-9781474207300-2176">The Incident of the Crawling Lane:</title> <subtitle xml:id="b-9781474207300-2177">Women in the Punjab Disturbances of 1919</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2178">
            <title xml:id="b-9781474207300-2179">
              <emphasis role="italic">Genders</emphasis>
            </title>, <volumenum>16</volumenum>: <pagenums>35–60</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref348">
          <editor>
            <personname role="last-first">
              <surname>Langbehn</surname> <firstname>Volker</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Mohammad</firstname> <surname>Salam</surname>
            </personname>
          </editor>, eds (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-2180">
            <emphasis role="italic">German Colonialism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2181">
            <emphasis role="italic">Race, the Holocaust, and Postwar Germany</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2182">
            <city>New York</city>
          </address>: <publishername>Columbia University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref349">
          <author>
            <personname role="last-first">
              <surname>Laroui</surname> <firstname>Abdallah</firstname>
            </personname>
          </author> (<pubdate>1977</pubdate>), <title xml:id="b-9781474207300-2183">
            <emphasis role="italic">The History of the Maghrib:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2184">
            <emphasis role="italic">An Interpretive Essay</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2185">
            <city>Princeton</city>, <state>NJ</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref350">
          <author>
            <personname role="last-first">
              <surname>Lawrence</surname> <othername role="middle">Mark</othername> <firstname>Atwood</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-2186">
            <emphasis role="italic">Assuming the Burden:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2187">
            <emphasis role="italic">Europe and the American Commitment to War in Vietnam</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2188">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref351">
          <bibliomset relation="article" xml:id="b-9781474207300-2189">
            <author>
              <personname role="last-first">
                <surname>Lazer</surname> <firstname>David</firstname>
              </personname>
            </author> (<pubdate>1999</pubdate>), “<title xml:id="b-9781474207300-2190">The Free Trade Epidemic of the 1860s and Other Outbreaks of Economic Discrimination</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2191">
            <title xml:id="b-9781474207300-2192">
              <emphasis role="italic">World Politics</emphasis>
            </title>, <volumenum>51</volumenum> (<issuenum>4</issuenum>): <pagenums>447–83</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref352">
          <author>
            <personname role="last-first">
              <surname>Lecocq</surname> <firstname>Baz</firstname>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-2193">
            <emphasis role="italic">Disputed Desert:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2194">
            <emphasis role="italic">Decolonization, Competing Nationalisms and Tuareg Rebellions in Northern Mali</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2195">
            <city>Leiden</city>
          </address>: <publishername>Brill</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref353">
          <bibliomset relation="article" xml:id="b-9781474207300-2196">
            <author>
              <personname role="last-first">
                <surname>Lee</surname> <firstname>Christopher</firstname>
              </personname>
            </author> (<pubdate>2011</pubdate>), “<title xml:id="b-9781474207300-2197">
              <emphasis role="italic">Jus Soli</emphasis> and <emphasis role="italic">Jus Sanguinis</emphasis> in the Colonies: The Interwar Politics of Race, Culture, and Multiracial Legal Status in British Africa</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2198">
            <title xml:id="b-9781474207300-2199">
              <emphasis role="italic">Law and History Review</emphasis>
            </title>, <volumenum>29</volumenum> (<issuenum>2</issuenum>): <pagenums>497–522</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref354">
          <author>
            <personname role="last-first">
              <surname>Lee</surname> <firstname>Christopher</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-2200">
            <emphasis role="italic">Unreasonable Histories:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2201">
            <emphasis role="italic">Nativism, Multiracial Lives, and the Genealogical Imagination in British Africa</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2202">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref355">
          <author>
            <personname role="last-first">
              <surname>Legge</surname> <firstname>John</firstname> <othername role="middle">David</othername>
            </personname>
          </author> (<pubdate>1972</pubdate>), <title xml:id="b-9781474207300-2203">
            <emphasis role="italic">Sukarno:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2204">
            <emphasis role="italic">A Political Biography</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2205">
            <city>New York</city>
          </address>: <publishername>Praeger</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref356">
          <author>
            <personname role="last-first">
              <surname>Levine</surname> <firstname>Philippa</firstname>
            </personname>
          </author> (<pubdate>2003</pubdate>), <title xml:id="b-9781474207300-2206">
            <emphasis role="italic">Prostitution, Race and Politics:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2207">
            <emphasis role="italic">Policing Venereal Disease in the British Empire</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2208">
            <city>London</city>
          </address>: <publishername>Routledge</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref357">
          <author>
            <personname role="last-first">
              <surname>Lewis</surname> <firstname>Bernard</firstname>
            </personname>
          </author> (<pubdate>1990</pubdate>), <title xml:id="b-9781474207300-2209">
            <emphasis role="italic">Race and Slavery in the Middle East:</emphasis> <phrase>
              <emphasis role="italic">An Historical Enquiry</emphasis>
            </phrase>
          </title>, <address xml:id="b-9781474207300-2210">
            <city>New York</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref358">
          <author>
            <personname role="last-first">
              <surname>Limoncelli</surname> <firstname>Stephanie</firstname> <othername role="middle-initials">A.</othername>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-2211">
            <emphasis role="italic">The Politics of Trafficking:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2212">
            <emphasis role="italic">The First International Movement to Combat the Sexual Exploitation of Women</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2213">
            <city>Palo Alto</city>, <state>CA</state>
          </address>: <publishername>Stanford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref359">
          <author>
            <personname role="last-first">
              <surname>Lindqvist</surname> <firstname>Sven</firstname>
            </personname>
          </author> (<pubdate>1996</pubdate>), <title xml:id="b-9781474207300-2214">
            <emphasis role="italic">“Exterminate All the Brutes,”</emphasis>
          </title> trans. <othercredit class="translator">
            <personname role="first-last">
              <firstname>Joan</firstname> <surname>Tate</surname>
            </personname>
          </othercredit>, <address xml:id="b-9781474207300-2215">
            <city>New York</city>
          </address>: <publishername>The New Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref360">
          <author>
            <personname role="last-first">
              <surname>Lipman</surname> <firstname>Jana</firstname> <othername role="middle-initials">K.</othername>
            </personname>
          </author> (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-2216">
            <emphasis role="italic">Guantánamo:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2217">
            <emphasis role="italic">A Working-Class History Between Empire and Revolution</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2218">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref361">
          <author>
            <personname role="last-first">
              <surname>Liu</surname> <firstname>Lydia</firstname> <othername role="middle-initials">H.</othername>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-2219">
            <emphasis role="italic">The Clash of Empires:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2220">
            <emphasis role="italic">The Invention of China in Modern World Making</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2221">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref362">
          <author>
            <personname role="last-first">
              <surname>Locher-Scholten</surname> <firstname>Elspeth</firstname>
            </personname>
          </author> (<pubdate>2000</pubdate>), <title xml:id="b-9781474207300-2222">
            <emphasis role="italic">Women and the Colonial State:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2223">
            <emphasis role="italic">Essays on Gender and Modernity in the Netherlands Indies, 1900–1942</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2224">
            <city>Amsterdam</city>
          </address>: <publishername>Amsterdam University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref363">
          <author>
            <personname role="last-first">
              <surname>Logevall</surname> <firstname>Frederik</firstname>
            </personname>
          </author> (<pubdate>2012</pubdate>), <title xml:id="b-9781474207300-2225">
            <emphasis role="italic">Embers of War:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2226">
            <emphasis role="italic">The Fall of an Empire and the Making of America’s Vietnam</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2227">
            <city>New York</city>
          </address>: <publishername>Random House</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref364">
          <author>
            <personname role="last-first">
              <surname>Loh Kok Wah</surname> <firstname>Francis</firstname>
            </personname>
          </author> (<pubdate>1988</pubdate>), <title xml:id="b-9781474207300-2228">
            <emphasis role="italic">Beyond the Tin Mines:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2229">
            <emphasis role="italic">Coolies, Squatters and New Villagers in the Kinta Valley, Malaysia, c. 1880–1980</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2230">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref365">
          <author>
            <personname role="last-first">
              <surname>Lorcin</surname> <firstname>Patricia</firstname> <othername role="middle-initials">M.E.</othername>
            </personname>
          </author> ([<pubdate>1995</pubdate>] <date>2014</date>), <title xml:id="b-9781474207300-2231">
            <emphasis role="italic">Imperial Identities:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2232">
            <emphasis role="italic">Stereotyping, Prejudice, and Race in Colonial Algeria</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2233">
            <city>Lincoln</city>, <state>NE</state>
          </address>: <publishername>University of Nebraska Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref366">
          <bibliomset relation="article" xml:id="b-9781474207300-2234">
            <author>
              <personname role="last-first">
                <surname>Lorcin</surname> <firstname>Patricia</firstname> <othername role="middle-initials">M.E.</othername>
              </personname>
            </author> (<pubdate>2002</pubdate>), “<title xml:id="b-9781474207300-2235">Rome and France in Africa: Recovering Colonial Algeria’s Latin Past</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2236">
            <title xml:id="b-9781474207300-2237">
              <emphasis role="italic">French Historical Studies</emphasis>
            </title>, <volumenum>25</volumenum> (<issuenum>2</issuenum>): <pagenums>295–329</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref367">
          <bibliomset relation="article" xml:id="b-9781474207300-2238">
            <author>
              <personname role="last-first">
                <surname>Lorcin</surname> <firstname>Patricia</firstname> <othername role="middle-initials">M.E.</othername>
              </personname>
            </author> (<pubdate>2013</pubdate>a), “<title xml:id="b-9781474207300-2239">Imperial Nostalgia; Colonial Nostalgia: Differences of Theory, Similarities of Practice?</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2240">
            <title xml:id="b-9781474207300-2241">
              <emphasis role="italic">Historical Reflections/Reflexions Historiques</emphasis>
            </title>, <volumenum>39</volumenum> (<issuenum>3</issuenum>): <pagenums>97–111</pagenums>
          </bibliomset>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref368">
          <bibliomset relation="part" xml:id="b-9781474207300-2242">
            <author>
              <personname role="last-first">
                <surname>Lorcin</surname> <firstname>Patricia</firstname> <othername role="middle-initials">M.E.</othername>
              </personname>
            </author> (<pubdate>2013</pubdate>b), “<title xml:id="b-9781474207300-2243">
              <emphasis role="italic">Pax Romana</emphasis> Transposed: Rome as an Exemplar for Western Imperialism</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2244">
            <title xml:id="b-9781474207300-2245">
              <emphasis role="italic">The Routledge History of Western Empires</emphasis>
            </title>, eds <editor>
              <personname role="first-last">
                <firstname>Robert</firstname> <surname>Aldrich</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Kirsten</firstname> <surname>McKenzie</surname>
              </personname>
            </editor>, <address xml:id="b-9781474207300-2246">
              <city>409–23</city>
            </address>, <address xml:id="b-9781474207300-2247">
              <city>London</city>
            </address>: <publishername>Routledge</publishername>
          </bibliomset>.</bibliomixed>
<?page value="218"?>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref369">
          <bibliomset relation="part" xml:id="b-9781474207300-2248">
            <author>
              <personname role="last-first">
                <surname>Lorcin</surname> <firstname>Patricia</firstname> <othername role="middle-initials">M.E.</othername>
              </personname>
            </author> (<pubdate>2014</pubdate>), “<title xml:id="b-9781474207300-2249">France’s Nostalgias of Empire</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2250">
            <title xml:id="b-9781474207300-2251">
              <emphasis role="italic">France Since the 1970s:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2252">
              <emphasis role="italic">History, Politics and Memory in an Age of Uncertainty</emphasis>
            </subtitle>, ed. <editor>
              <personname role="first-last">
                <firstname>Emile</firstname> <surname>Chabal</surname>
              </personname>
            </editor>, <pagenums>143–72</pagenums>, <address xml:id="b-9781474207300-2253">
              <city>London</city>
            </address>: <publishername>Bloomsbury</publishername>
          </bibliomset>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref370">
          <author>
            <personname role="last-first">
              <surname>Lorcin</surname> <firstname>Patricia</firstname> <othername role="middle-initials">M.E.</othername>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Todd</firstname> <surname>Shepard</surname>
            </personname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-2254">
            <emphasis role="italic">French Mediterraneans:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2255">
            <emphasis role="italic">Transnational and Imperial Histories</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2256">
            <city>Lincoln</city>, <state>NE</state>
          </address>: <publishername>University of Nebraska Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref371">
          <bibliomset relation="article" xml:id="b-9781474207300-2257">
            <author>
              <personname role="last-first">
                <surname>Love</surname> <firstname>Joseph</firstname> <othername role="middle-initials">L.</othername>
              </personname>
            </author> (<pubdate>1980</pubdate>), “<title xml:id="b-9781474207300-2258">Raúl Prebish and the Origins of the Doctrine of Unequal Exchange</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2259">
            <title xml:id="b-9781474207300-2260">
              <emphasis role="italic">Latin American Research Review</emphasis>
            </title>, <volumenum>15</volumenum> (<issuenum>3</issuenum>): <pagenums>45–72</pagenums>
          </bibliomset>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref372">
          <author>
            <personname role="last-first">
              <surname>Lugard</surname> <firstname>Frederick</firstname> <othername role="middle">John Dealtry (Baron)</othername>
            </personname>
          </author> (<pubdate>1922</pubdate>), <title xml:id="b-9781474207300-2261">
            <emphasis role="italic">The Dual Mandate in British Tropical Africa</emphasis>
          </title>, <address xml:id="b-9781474207300-2262">
            <city>Edinburgh</city>
          </address>: <publishername>William Blackwood</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref373">
          <bibliomset relation="article" xml:id="b-9781474207300-2263">
            <author>
              <personname role="last-first">
                <surname>Lynn</surname> <firstname>John</firstname> <othername role="middle-initials">A.</othername>
              </personname>
            </author> (<pubdate>1997</pubdate>), “<title xml:id="b-9781474207300-2264">The Embattled Future of Academic Military History</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2265">
            <title xml:id="b-9781474207300-2266">
              <emphasis role="italic">Journal of Military History</emphasis>
            </title>, <volumenum>61</volumenum> (<issuenum>4</issuenum>): <pagenums>777–89</pagenums>
          </bibliomset>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref374">
          <bibliomset relation="article" xml:id="b-9781474207300-2267">
            <author>
              <personname role="last-first">
                <surname>Lynn</surname> <firstname>John</firstname> <othername role="middle-initials">A.</othername>
              </personname>
            </author> (<pubdate>2007</pubdate>), “<title xml:id="b-9781474207300-2268">Breaching the Walls of Academe: The Purposes, Problems, and Prospects of Military History</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2269">
            <title xml:id="b-9781474207300-2270">
              <emphasis role="italic">Academic Questions</emphasis>
            </title>, <volumenum>21</volumenum> (<issuenum>1</issuenum>): <pagenums>18–36</pagenums>
          </bibliomset>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref375">
          <bibliomset relation="article" xml:id="b-9781474207300-2271">
            <author>
              <personname role="last-first">
                <surname>Lyth</surname> <firstname>Peter</firstname> <othername role="middle-initials">J.</othername>
              </personname>
            </author> and <author>
              <personname role="first-last">
                <firstname>Marc</firstname> <othername role="middle-initials">L.J.</othername> <surname>Dierikx</surname>
              </personname>
            </author> (<pubdate>1994</pubdate>), “<title xml:id="b-9781474207300-2272">From Privilege to Popularity: The Growth of Air Travel Since 1945</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2273">
            <title xml:id="b-9781474207300-2274">
              <emphasis role="italic">Journal of Transport History</emphasis>
            </title>, <volumenum>15</volumenum> (<issuenum>2</issuenum>): <pagenums>97–116</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref376">
          <author>
            <personname role="last-first">
              <surname>Maathai</surname> <firstname>Wangari</firstname>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-2275">
            <emphasis role="italic">The Green Belt Movement:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2276">
            <emphasis role="italic">Sharing the Approach and the Experience</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2277">
            <city>New York</city>
          </address>: <publishername>Lantern Books</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref377">
          <author>
            <personname role="last-first">
              <surname>Maathai</surname> <firstname>Wangari</firstname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-2278">
            <emphasis role="italic">Unbowed:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2279">
            <emphasis role="italic">A Memoir</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2280">
            <city>New York</city>
          </address>: <publishername>Knopf Doubleday</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref378">
          <bibliomset relation="article" xml:id="b-9781474207300-2281">
            <author>
              <personname role="last-first">
                <surname>Macharia</surname> <firstname>Keguro</firstname>
              </personname>
            </author> (<pubdate>2014</pubdate>), “<title xml:id="b-9781474207300-2282">African Queer Studies</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2283">
            <title xml:id="b-9781474207300-2284">
              <emphasis role="italic">Gukira</emphasis>
            </title>, <link xlink:href="https://gukira.wordpress.com/2014/08/24/african-queer-studies/">
              <uri>https://gukira.wordpress.com/2014/08/24/african-queer-studies/</uri>
            </link>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref379">
          <bibliomset relation="article" xml:id="b-9781474207300-2285">
            <author>
              <personname role="last-first">
                <surname>Macmaster</surname> <firstname>Neil</firstname>
              </personname>
            </author> (<pubdate>2004</pubdate>), “<title xml:id="b-9781474207300-2286">Torture: From Algiers to Abu Ghraib</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2287">
            <title xml:id="b-9781474207300-2288">
              <emphasis role="italic">Race and Class</emphasis>
            </title>, <volumenum>46</volumenum> (<issuenum>2</issuenum>): <pagenums>1–21</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref380">
          <author>
            <personname role="last-first">
              <surname>MacMillan</surname> <firstname>Margaret</firstname>
            </personname>
          </author> (<pubdate>2003</pubdate>), <title xml:id="b-9781474207300-2289">
            <emphasis role="italic">Paris 1919:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2290">
            <emphasis role="italic">Six Months that Changed the World</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2291">
            <city>New York</city>
          </address>: <publishername>Random House</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref381">
          <author>
            <personname role="last-first">
              <surname>MacQueen</surname> <firstname>Norrie</firstname>
            </personname>
          </author> (<pubdate>1997</pubdate>), <title xml:id="b-9781474207300-2292">
            <emphasis role="italic">The Decolonization of Portuguese Africa:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2293">
            <emphasis role="italic">Metropolitan Revolution and the Dissolution of Empire</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2294">
            <city>London</city>
          </address>: <publishername>Longman</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref382">
          <bibliomset relation="article" xml:id="b-9781474207300-2295">
            <author>
              <personname role="last-first">
                <surname>Madley</surname> <firstname>Benjamin</firstname>
              </personname>
            </author> (<pubdate>2005</pubdate>), “<title xml:id="b-9781474207300-2296">From Africa to Auschwitz: How German South West Africa Incubated Ideas and Methods Adopted and Developed by the Nazis in Eastern Europe</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2297">
            <title xml:id="b-9781474207300-2298">
              <emphasis role="italic">European History Quarterly</emphasis>
            </title>, <volumenum>35</volumenum> (<issuenum>3</issuenum>): <pagenums>429–64</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref383">
          <bibliomset relation="article" xml:id="b-9781474207300-2299">
            <author>
              <personname role="last-first">
                <surname>Malinowski</surname> <firstname>Stephan</firstname>
              </personname>
            </author> and <author>
              <personname role="first-last">
                <firstname>Robert</firstname> <surname>Gerwarth</surname>
              </personname>
            </author> (<pubdate>2009</pubdate>), “<title xml:id="b-9781474207300-2300">Hannah Arendt’s Ghosts: Reflections on the Disputable Path from Windhoek to Auschwitz</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2301">
            <title>
              <emphasis role="italic">Central European History</emphasis>
            </title>, <volumenum>42</volumenum>: <pagenums>279–300</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref384">
          <author>
            <personname role="last-first">
              <surname>Mamdani</surname> <firstname>Mahmood</firstname>
            </personname>
          </author> (<pubdate>1996</pubdate>), <title xml:id="b-9781474207300-2302">
            <emphasis role="italic">Citizen and Subject:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2303">
            <emphasis role="italic">Contemporary Africa and the Legacy of Late Colonialism</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2304">
            <city>New Haven</city>, <state>CT</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref385">
          <author>
            <personname role="last-first">
              <surname>Mamdani</surname> <firstname>Mahmood</firstname>
            </personname>
          </author> ([<pubdate>1973</pubdate>] <date>2011</date>), <title xml:id="b-9781474207300-2305">
            <emphasis role="italic">From Citizen to Refugee:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2306">
            <emphasis role="italic">Uganda Asians Come to Britain</emphasis>
          </subtitle>, <edition>2nd</edition> edn, <address xml:id="b-9781474207300-2307">
            <city>Cape Town</city>
          </address>: <publishername>Pambazuka Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref386">
          <author>
            <personname role="last-first">
              <surname>Mamdani</surname> <firstname>Mahmood</firstname>
            </personname>
          </author> (<pubdate>2001</pubdate>), <title xml:id="b-9781474207300-2308">
            <emphasis role="italic">When Victims Become Killers:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2309">
            <emphasis role="italic">Colonialism, Nativism, and the Genocide in Rwanda</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2310">
            <city>Princeton</city>, <state>NJ</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref387">
          <author>
            <personname role="last-first">
              <surname>Mamdani</surname> <firstname>Mahmood</firstname>
            </personname>
          </author> (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-2311">
            <emphasis role="italic">Saviors and Survivors:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2312">
            <emphasis role="italic">Darfur, Politics, and the War on Terror</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2313">
            <city>New York</city>
          </address>: <publishername>Pantheon</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref388">
          <author>
            <personname role="last-first">
              <surname>Manela</surname> <firstname>Erez</firstname>
            </personname>
          </author> (<pubdate>2007</pubdate>), <title xml:id="b-9781474207300-2314">
            <emphasis role="italic">The Wilsonian Moment:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2315">
            <emphasis role="italic">Self-Determination and the International Origins of Anticolonial Nationalism</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2316">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref389">
          <bibliomset relation="article" xml:id="b-9781474207300-2317">
            <author>
              <personname role="last-first">
                <surname>Manicom</surname> <firstname>Desireé</firstname>
              </personname>
            </author> (<pubdate>2001</pubdate>), “<title xml:id="b-9781474207300-2318">Review of <emphasis role="italic">The Invention of Women: Making African Sense of Western Gender Discourses</emphasis>, by Oyeronke Oyewumi</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2319">
            <title xml:id="b-9781474207300-2320">
              <emphasis role="italic">Agenda:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2321">
              <emphasis role="italic">Empowering Women for Gender Equity</emphasis>
            </subtitle>, <volumenum>50</volumenum>: <pagenums>134–5</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref390">
          <author>
            <personname role="last-first">
              <surname>Manjapra</surname> <firstname>Kris</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-2322">
            <emphasis role="italic">Age of Entanglement</emphasis>
          </title>, <address>
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref391">
          <author>
            <personname role="last-first">
              <surname>Mao</surname> <firstname>Zedong</firstname>
            </personname>
          </author> (<pubdate>1961</pubdate>), <title xml:id="b-9781474207300-2323">
            <emphasis role="italic">Selected Works of Mao Tse-Tung</emphasis>
          </title>, Vol. <volumenum>IV</volumenum>, <address xml:id="b-9781474207300-2324">
            <city>Oxford</city>
          </address>: <publishername>Pergamon</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref392">
          <author>
            <personname role="last-first">
              <surname>Mao</surname> <firstname>Zedong</firstname>
            </personname>
          </author> ([<pubdate>1937</pubdate>] <date>1978</date>), <title xml:id="b-9781474207300-2325">
            <emphasis role="italic">On Guerilla Warfare</emphasis>
          </title>, <address xml:id="b-9781474207300-2326">
            <city>New York</city>
          </address>: <publishername>Anchor</publishername>.</bibliomixed>
<?page value="219"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref393">
          <author>
            <personname role="last-first">
              <surname>Marsh</surname> <firstname>Steve</firstname>
            </personname>
          </author> (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-2327">
            <emphasis role="italic">Anglo-American Relations and Cold War Oil:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2328">
            <emphasis role="italic">Crisis in Iran</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2329">
            <city>Basingstoke</city>
          </address>: <publishername>Palgrave Macmillan</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref394">
          <bibliomset relation="article" xml:id="b-9781474207300-2330">
            <author>
              <personname role="last-first">
                <surname>Martin</surname> <firstname>Enrique</firstname>
              </personname>
            </author> (<pubdate>2012</pubdate>), “<title xml:id="b-9781474207300-2331">Clandestine Recruitment Networks in the Bight of Biafra: Fernando Pó’s Answer to the Labour Question</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2332">
            <title xml:id="b-9781474207300-2333">
              <emphasis role="italic">International Review of Social History</emphasis>
            </title>, <volumenum>57</volumenum> (<issuenum>S20</issuenum>): <pagenums>39–72</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref395">
          <author>
            <personname role="last-first">
              <surname>Massad</surname> <firstname>Joseph</firstname> <othername role="middle-initials">A.</othername>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-2334">
            <emphasis role="italic">Desiring Arabs</emphasis>
          </title>, <address xml:id="b-9781474207300-2335">
            <city>Chicago</city>, <state>IL</state>
          </address>: <publishername>University of Chicago Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref396">
          <author>
            <personname role="last-first">
              <surname>Matera</surname> <firstname>Marc</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-2336">
            <emphasis role="italic">Black London:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2337">
            <emphasis role="italic">The Imperial Metropolis and Decolonization in the Twentieth Century</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2338">
            <city>Oakland</city>, <state>California</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref397">
          <author>
            <personname role="last-first">
              <surname>Maul</surname> <firstname>Daniel</firstname>
            </personname>
          </author> (<pubdate>2012</pubdate>), <title xml:id="b-9781474207300-2339">
            <emphasis role="italic">Human Rights, Development, and Decolonization:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2340">
            <emphasis role="italic">The International Labour Organization, 1940–70</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2341">
            <city>New York</city>
          </address>: <publishername>Palgrave</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref398">
          <author>
            <personname role="last-first">
              <surname>Mavhunga</surname> <firstname>Clapperton</firstname> <othername role="middle">Chakanetsa</othername>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-2342">
            <emphasis role="italic">Transient Workspaces:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2343">
            <emphasis role="italic">Technologies of Everyday Innovation in Zimbabwe</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2344">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>MIT Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref399">
          <bibliomset relation="article" xml:id="b-9781474207300-2345">
            <author>
              <personname role="last-first">
                <surname>Maxwell</surname> <firstname>Donald</firstname>
              </personname>
            </author> (<pubdate>1924</pubdate>), “<title xml:id="b-9781474207300-2346">Concrete Studies in Empire Building – At Wembley</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2347">
            <title xml:id="b-9781474207300-2348">
              <emphasis role="italic">The Graphic</emphasis>
            </title>, <volumenum>109</volumenum> (<date>March 8</date>): <pagenums>324–5</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref400">
          <author>
            <personname role="last-first">
              <surname>Mazower</surname> <firstname>Mark</firstname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-2349">
            <emphasis role="italic">Hitler’s Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2350">
            <emphasis role="italic">How the Nazis Ruled Europe</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2351">
            <city>New York</city>
          </address>: <publishername>Penguin</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref401">
          <bibliomset relation="article" xml:id="b-9781474207300-2352">
            <author>
              <personname role="last-first">
                <surname>McDonald</surname> <firstname>Judith</firstname> <othername role="middle-initials">A.</othername>
              </personname>
            </author>, <author>
              <personname role="first-last">
                <firstname>Anthony</firstname> <othername role="middle">Patrick</othername> <surname>O’Brien</surname>
              </personname>
            </author>, and <author>
              <personname role="first-last">
                <firstname>Colleen</firstname> <othername role="middle-initials">M.</othername> <surname>Callahan</surname>
              </personname>
            </author> (<pubdate>1997</pubdate>), “<title xml:id="b-9781474207300-2353">Trade Wars: Canada’s Reaction to the Smoot-Hawley Tariff</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2354">
            <title xml:id="b-9781474207300-2355">
              <emphasis role="italic">Journal of Economic History</emphasis>
            </title>, <volumenum>57</volumenum> (<issuenum>4</issuenum>): <pagenums>802–26</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref402">
          <author>
            <personname role="last-first">
              <surname>McDougall</surname> <firstname>James</firstname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-2356">
            <emphasis role="italic">History and the Culture of Nationalism in Algeria</emphasis>
          </title>, <address xml:id="b-9781474207300-2357">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref403">
          <author>
            <personname role="last-first">
              <surname>McMeekin</surname> <firstname>Sean</firstname>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-2358">
            <emphasis role="italic">The Berlin–Baghdad Express:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2359">
            <emphasis role="italic">The Ottoman Empire and Germany’s Bid for World Power</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2360">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Belknap Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref404">
          <author>
            <personname role="last-first">
              <surname>McNeill</surname> <firstname role="initials">J.R.</firstname>
            </personname>
          </author> (<pubdate>2000</pubdate>), <title xml:id="b-9781474207300-2361">
            <emphasis role="italic">Something New Under the Sun:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2362">
            <emphasis role="italic">An Environmental History of the Twentieth-Century World</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2363">
            <city>New York</city>
          </address>: <publishername>W.W. Norton</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref405">
          <author>
            <personname role="last-first">
              <surname>McNeill</surname> <firstname role="initials">J.R.</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Peter</firstname> <surname>Engelke</surname>
            </personname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-2364">
            <emphasis role="italic">The Great Acceleration</emphasis>
          </title>, <address xml:id="b-9781474207300-2365">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref406">
          <bibliomset relation="article" xml:id="b-9781474207300-2366">
            <author>
              <personname role="last-first">
                <surname>Mikhail</surname> <firstname>Alan</firstname>
              </personname>
            </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-2367">Enlightenment Anthropocene</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2368">
            <title xml:id="b-9781474207300-2369">
              <emphasis role="italic">Eighteenth-Century Studies</emphasis>
            </title>, <volumenum>49</volumenum> (<issuenum>2</issuenum>): <pagenums>211–31</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref407">
          <author>
            <personname role="last-first">
              <surname>Miller</surname> <firstname>Robert</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Dennis</firstname> <othername role="middle-initials">D.</othername> <surname>Wainstock</surname>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-2370">
            <emphasis role="italic">Indochina and Vietnam:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2371">
            <emphasis role="italic">The Thirty-Five Year War, 1940–1975</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2372">
            <city>New York</city>
          </address>: <publishername>Enigma Books</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref408">
          <bibliomset relation="part" xml:id="b-9781474207300-2373">
            <author>
              <personname role="last-first">
                <surname>Mirrlees</surname> <firstname>Tanner</firstname>
              </personname>
            </author> (<pubdate>2006</pubdate>), “<title xml:id="b-9781474207300-2374">American Soft Power, or, American Cultural Imperialism</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2375">
            <title xml:id="b-9781474207300-2376">
              <emphasis role="italic">The New Imperialists:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2377">
              <emphasis role="italic">Ideologies of Empire</emphasis>
            </subtitle>, ed. <editor>
              <personname role="first-last">
                <firstname>Colin</firstname> <surname>Mooers</surname>
              </personname>
            </editor>, <pagenums>199–227</pagenums>, <address xml:id="b-9781474207300-2378">
              <city>Oxford</city>
            </address>: <publishername>Oneworld</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref409">
          <author>
            <personname role="last-first">
              <surname>Mitchell</surname> <firstname>Timothy</firstname>
            </personname>
          </author> (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-2379">
            <emphasis role="italic">Rule of Experts:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2380">
            <emphasis role="italic">Egypt, Techno-Politics, Modernity</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2381">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref410">
          <author>
            <personname role="last-first">
              <surname>Mitchell</surname> <firstname>Timothy</firstname>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-2382">
            <emphasis role="italic">Carbon Democracy:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2383">
            <emphasis role="italic">Political Power in the Age of Oil</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2384">
            <city>New York</city>
          </address>: <publishername>Verso</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref411">
          <bibliomset relation="article" xml:id="b-9781474207300-2385">
            <author>
              <personname role="last-first">
                <surname>Mongia</surname> <firstname>Radhika</firstname> <othername role="middle">Viyas</othername>
              </personname>
            </author> (<pubdate>1999</pubdate>), “<title xml:id="b-9781474207300-2386">Race, Nationality, Mobility: A History of the Passport</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2387">
            <title xml:id="b-9781474207300-2388">
              <emphasis role="italic">Public Culture</emphasis>
            </title>, <volumenum>11</volumenum> (<issuenum>3</issuenum>): <pagenums>527–56</pagenums>
          </bibliomset>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref412">
          <editor>
            <personname role="last-first">
              <surname>Mooers</surname> <firstname>Colin</firstname>
            </personname>
          </editor>, ed. (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2389">
            <emphasis role="italic">The New Imperialists:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2390">
            <emphasis role="italic">Ideologies of Empire</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2391">
            <city>Oxford</city>
          </address>: <publishername>Oneworld</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref413">
          <author>
            <personname role="last-first">
              <surname>Morel</surname> <firstname>Edmund</firstname> <othername role="middle">Dene</othername>
            </personname>
          </author> (<pubdate>1906</pubdate>), <title xml:id="b-9781474207300-2392">
            <emphasis role="italic">Red Rubber:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2393">
            <emphasis role="italic">The Story of the Rubber Slave Trade Flourishing on the Congo in the Year of Grace 1906</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2394">
            <city>London</city>
          </address>: <publishername>T. Fisher Unwin</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref414">
          <bibliomset relation="article" xml:id="b-9781474207300-2395">
            <author>
              <personname role="last-first">
                <surname>Mort</surname> <firstname>Frank</firstname>
              </personname>
            </author> (<pubdate>2006</pubdate>), “<title xml:id="b-9781474207300-2396">Scandalous Events: Metropolitan Culture and Moral Change in Post-Second World War London</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2397">
            <title xml:id="b-9781474207300-2398">
              <emphasis role="italic">Representations</emphasis>
            </title>, <volumenum>93</volumenum> (<issuenum>1</issuenum>): <pagenums>106–37</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref415">
          <author>
            <personname role="last-first">
              <surname>Motadel</surname> <firstname>David</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-2399">
            <emphasis role="italic">Islam and Nazi Germany’s War</emphasis>
          </title>, <address xml:id="b-9781474207300-2400">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Belknap Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref416">
          <author>
            <personname role="last-first">
              <surname>Moyd</surname> <firstname>Michelle</firstname> <othername role="middle-initials">R.</othername>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-2401">
            <emphasis role="italic">Violent Intermediaries:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2402">
            <emphasis role="italic">African Soldiers, Conquest, and Everyday Colonialism in German East Africa</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2403">
            <city>Athens</city>, <state>OH</state>
          </address>: <publishername>Ohio University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref417">
          <author>
            <personname role="last-first">
              <surname>Moyn</surname> <firstname>Samuel</firstname>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-2404">
            <emphasis role="italic">The Last Utopia</emphasis>
          </title>, <address xml:id="b-9781474207300-2405">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Belknap Press</publishername>.</bibliomixed>
<?page value="220"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref418">
          <author>
            <personname role="last-first">
              <surname>Mudimbe</surname> <firstname>Valentin</firstname>
            </personname>
          </author> (<pubdate>1988</pubdate>), <title xml:id="b-9781474207300-2406">
            <emphasis role="italic">The Invention of Africa:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2407">
            <emphasis role="italic">Gnosis, Philosophy and the Oder of Knowledge</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2408">
            <city>Bloomington</city>, <state>IN</state>
          </address>: <publishername>Indiana University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref419">
          <bibliomset relation="article" xml:id="b-9781474207300-2409">
            <author>
              <personname role="last-first">
                <surname>Mukherjee</surname> <firstname>Sumita</firstname>
              </personname>
            </author> (<pubdate>2006</pubdate>), “<title xml:id="b-9781474207300-2410">Using the Legislative Assembly for Social Reform: The Sarda Act of 1929</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2411">
            <title xml:id="b-9781474207300-2412">
              <emphasis role="italic">South Asia Research</emphasis>
            </title>, <volumenum>26</volumenum> (<issuenum>3</issuenum>): <pagenums>219–33</pagenums>
          </bibliomset>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref420">
          <author>
            <personname role="last-first">
              <surname>Murphy</surname> <firstname>Cullen</firstname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-2413">
            <emphasis role="italic">Are We Rome?</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2414">
            <emphasis role="italic">The Fall of an Empire and the Fate of America</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2415">
            <city>Boston</city>, <state>MA</state>
          </address>: <publishername>Houghton Mifflin</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref421">
          <bibliomset relation="part" xml:id="b-9781474207300-2416">
            <author>
              <personname role="last-first">
                <surname>Museveni</surname> <firstname>Yoweri</firstname>
              </personname>
            </author> (<pubdate>1971</pubdate>), “<title xml:id="b-9781474207300-2417">Fanon’s Theory on Violence: Its Verification in Liberated Mozambique</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2418">
            <title xml:id="b-9781474207300-2419">
              <emphasis role="italic">Essays on the Liberation of Southern Africa</emphasis>
            </title>, ed. <editor>
              <personname role="first-last">
                <firstname role="initials">N.</firstname> <surname>Shamuyarira</surname>
              </personname>
            </editor>, <pagenums>1–24</pagenums>, <address xml:id="b-9781474207300-2420">
              <city>Dar es Salaam</city>
            </address>: <publishername>Tanzania Publishing House</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref422">
          <author>
            <personname role="last-first">
              <surname>Myers</surname> <firstname>Ramon</firstname> <othername role="middle">Hawley</othername>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Mark</firstname> <othername role="middle-initials">R.</othername> <surname>Peattie</surname>
            </personname>
          </author> (<pubdate>1984</pubdate>), <title xml:id="b-9781474207300-2421">
            <emphasis role="italic">The Japanese Colonial Empire, 1895–1945</emphasis>
          </title>, <address xml:id="b-9781474207300-2422">
            <city>Princeton</city>, <state>NJ</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref423">
          <author>
            <personname role="last-first">
              <surname>Nagl</surname> <firstname>John</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-2423">
            <emphasis role="italic">Learning to Eat Soup with a Knife:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2424">
            <emphasis role="italic">Counterinsurgency Lessons from Malaya and Vietnam</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2425">
            <city>Chicago</city>, <state>IL</state>
          </address>: <publishername>University of Chicago Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref424">
          <bibliomset relation="part" xml:id="b-9781474207300-2426">
            <author>
              <personname role="last-first">
                <surname>Najmabadi</surname> <firstname>Afsaneh</firstname>
              </personname>
            </author> (<pubdate>2008</pubdate>), “<title xml:id="b-9781474207300-2427">Types, Acts, or What? Regulation of Sexuality in Nineteenth-Century Iran</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2428">
            <title xml:id="b-9781474207300-2429">
              <emphasis role="italic">Islamicate Sexualities:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2430">
              <emphasis role="italic">Translations across Temporal Geographies of Desire</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Kathryn</firstname> <surname>Babayan</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Afsaneh</firstname> <surname>Najmabadi</surname>
              </personname>
            </editor>, <pagenums>275–96</pagenums>, <address xml:id="b-9781474207300-2431">
              <city>Cambridge</city>, <state>MA</state>
            </address>: <publishername>Harvard University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref425">
          <author>
            <personname role="last-first">
              <surname>Neep</surname> <firstname>Daniel</firstname>
            </personname>
          </author> (<pubdate>2012</pubdate>), <title xml:id="b-9781474207300-2432">
            <emphasis role="italic">Occupying Syria under the French Mandate:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2433">
            <emphasis role="italic">Insurgency, Space and State Formation</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2434">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref426">
          <author>
            <personname role="last-first">
              <surname>Nehru</surname> <firstname>Jawaharlal</firstname>
            </personname>
          </author> ([<pubdate>1946</pubdate>] <date>1985</date>), <title xml:id="b-9781474207300-2435">
            <emphasis role="italic">The Discovery of India</emphasis>
          </title>, <address xml:id="b-9781474207300-2436">
            <city>Delhi</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref427">
          <bibliomset relation="part" xml:id="b-9781474207300-2437">
            <author>
              <personname role="last-first">
                <surname>Nirenberg</surname> <firstname>David</firstname>
              </personname>
            </author> (<pubdate>2007</pubdate>), “<title xml:id="b-9781474207300-2438">Race and the Middle Ages: The Case of Spain and Its Jews</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2439">
            <title xml:id="b-9781474207300-2440">
              <emphasis role="italic">Rereading the Black Legend:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2441">
              <emphasis role="italic">The Discourses of Religious and Racial Difference in the Renaissance Empires</emphasis>
            </subtitle>, eds <editor>
              <personname role="first-last">
                <firstname>Margaret</firstname> <othername role="middle-initials">R.</othername> <surname>Greer</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname>Walter</firstname> <othername role="middle-initials">D.</othername> <surname>Mignolo</surname>
              </personname>
            </editor>, and <editor>
              <personname role="first-last">
                <firstname>Maureen</firstname> <surname>Quilligan</surname>
              </personname>
            </editor>, <pagenums>71–87</pagenums>, <address xml:id="b-9781474207300-2442">
              <city>Chicago</city>, <state>IL</state>
            </address>: <publishername>University of Chicago Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref428">
          <author>
            <personname role="last-first">
              <surname>Nixon</surname> <firstname>Rob</firstname>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-2443">
            <emphasis role="italic">Slow Violence and the Environmentalism of the Poor</emphasis>
          </title>, <address xml:id="b-9781474207300-2444">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref429">
          <author>
            <personname role="last-first">
              <surname>Nkrumah</surname> <firstname>Kwame</firstname>
            </personname>
          </author> (<pubdate>1965</pubdate>), <title xml:id="b-9781474207300-2445">
            <emphasis role="italic">Neo-Colonialism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2446">
            <emphasis role="italic">The Last Stage of Imperialism</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2447">
            <city>New York</city>
          </address>: <publishername>International Publishers</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref430">
          <author>
            <personname role="last-first">
              <surname>O’Brien</surname> <firstname>Michael</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-2448">
            <emphasis role="italic">John F. Kennedy:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2449">
            <emphasis role="italic">A Biography</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2450">
            <city>New York</city>
          </address>: <publishername>Thomas Dunne Books/St. Martin’s Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref431">
          <bibliomset relation="part" xml:id="b-9781474207300-2451">
            <author>
              <orgname>OECD</orgname>
            </author> (<pubdate>2009</pubdate>), “<title xml:id="b-9781474207300-2452">Trade Rounds and the World Trade Organization</title>,”</bibliomset> <bibliomset relation="book" xml:id="b-9781474207300-2453">
            <title xml:id="b-9781474207300-2454">
              <emphasis role="italic">International Trade:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2455">
              <emphasis role="italic">Free, Fair and Open?</emphasis>
            </subtitle>, <address xml:id="b-9781474207300-2456">
              <city>Paris</city>
            </address>: <publishername>OECD</publishername> Publishing, <link xlink:href="http://dx.doi.org/10.1787/9789264060265-6-en">
              <uri>http://dx.doi.org/10.1787/9789264060265-6-en</uri>
            </link>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref432">
          <author>
            <personname role="last-first">
              <surname>Okihiro</surname> <firstname>Gary</firstname> <othername role="middle-initials">Y.</othername>
            </personname>
          </author> (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-2457">
            <emphasis role="italic">Pineapple Culture:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2458">
            <emphasis role="italic">A History of the Tropical and Temperate Zones</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2459">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref433">
          <bibliomset relation="article" xml:id="b-9781474207300-2460">
            <author>
              <personname role="last-first">
                <surname>Olwig</surname> <firstname>Karen</firstname> <othername role="middle-initials">F.</othername>
              </personname>
            </author> (<pubdate>2015</pubdate>), “<title xml:id="b-9781474207300-2461">Migrating for a Profession: Becoming a Caribbean Nurse in Post- WWII Britain</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2462">
            <title xml:id="b-9781474207300-2463">
              <emphasis role="italic">Identities:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2464">
              <emphasis role="italic">Global Studies in Culture and Power</emphasis>
            </subtitle>, <volumenum>22</volumenum> (<issuenum>3</issuenum>): <pagenums>258–72</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref434">
          <author>
            <personname role="last-first">
              <surname>Omi</surname> <firstname>Michael</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Howard</firstname> <surname>Winant</surname>
            </personname>
          </author> (<pubdate>1994</pubdate>), <title xml:id="b-9781474207300-2465">
            <emphasis role="italic">Racial Formation in the United States:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2466">
            <emphasis role="italic">From the 1960s to the 1990s</emphasis>
          </subtitle>, <edition>2nd</edition> edn, <address xml:id="b-9781474207300-2467">
            <city>New York</city>
          </address>: <publishername>Routledge</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref435">
          <author>
            <personname role="last-first">
              <surname>Orwell</surname> <firstname>George</firstname>
            </personname>
          </author> (<pubdate>1934</pubdate>), <title xml:id="b-9781474207300-2468">
            <emphasis role="italic">Burmese Days:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2469">
            <emphasis role="italic">A Novel</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2470">
            <city>New York</city>
          </address>: <publishername>Harper</publishername>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref436">
          <author>
            <orgname>Oxfam</orgname>
          </author> (<pubdate>2003</pubdate>), “<title xml:id="b-9781474207300-2471">Running into the Sand:</title> <subtitle xml:id="b-9781474207300-2472">Why Failure at the Cancun Trade Talks Threatens the World’s Poorest People</subtitle>,” <bibliomisc role="description">
            <emphasis role="italic">Oxfam Briefing Paper</emphasis> #53</bibliomisc>, <link xlink:href="https://policy-practice.oxfam.org.uk/publications/running-into-the-sand-why-failure-at-the-cancun-trade-talks-threatens-the-world-114588">
            <uri>https://policy-practice.oxfam.org.uk/publications/running-into-the-sand-why-failure-at-the-cancun-trade-talks-threatens-the-world–114588</uri>
          </link>, accessed <date role="accessed">September 14, 2016</date>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref437">
          <author>
            <personname role="last-first">
              <surname>Oyěwùmí</surname> <firstname>Oyèrónkẹ́</firstname>
            </personname>
          </author> (<pubdate>1997</pubdate>), <title xml:id="b-9781474207300-2475">
            <emphasis role="italic">The Invention of Women</emphasis>
          </title>, <address xml:id="b-9781474207300-2476">
            <city>Minneapolis</city>, <state>MN</state>
          </address>: <publishername>University of Minnesota Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref438">
          <bibliomset relation="part" xml:id="b-9781474207300-2477">
            <author>
              <personname role="last-first">
                <surname>Paisley</surname> <firstname>Fiona</firstname>
              </personname>
            </author> (<pubdate>2006</pubdate>), “<title xml:id="b-9781474207300-2478">An ‘Education in White Brutality’:</title> <subtitle xml:id="b-9781474207300-2479">Anthony Martin Fernando and Australian Aboriginal Rights in Transnational Context</subtitle>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2480">
            <title xml:id="b-9781474207300-2481">
              <emphasis role="italic">Rethinking Settler Colonialism</emphasis>
            </title>, ed. <editor>
              <personname role="first-last">
                <firstname role="initials">A.</firstname> <surname>Coombes</surname>
              </personname>
            </editor>, <pagenums>209–26</pagenums>, <address xml:id="b-9781474207300-2482">
              <city>Manchester</city>
            </address>: <publishername>Manchester University Press</publishername>.</bibliomset>
        </bibliomixed>
<?page value="221"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref439">
          <author>
            <personname role="last-first">
              <surname>Paisley</surname> <firstname>Fiona</firstname>
            </personname>
          </author> (<pubdate>2012</pubdate>), <title xml:id="b-9781474207300-2483">
            <emphasis role="italic">The Lone Protestor:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2484">
            <emphasis role="italic">A.M. Fernando in Australia and Europe</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2485">
            <city>Canberra</city>, <state>ACT</state>
          </address>: <publishername>Aboriginal Studies Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref440">
          <author>
            <personname role="last-first">
              <surname>Palmer</surname> <firstname>Colin</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-2486">
            <emphasis role="italic">Freedom’s Children:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2487">
            <emphasis role="italic">The 1938 Labor Rebellion and the Birth of Modern Jamaica</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2488">
            <city>Chapel Hill</city>, <state>NC</state>
          </address>: <publishername>University of North Carolina Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref441">
          <bibliomset relation="article" xml:id="b-9781474207300-2489">
            <author>
              <personname role="last-first">
                <surname>Pande</surname> <firstname>Ishita</firstname>
              </personname>
            </author> (<pubdate>2012</pubdate>), “<title xml:id="b-9781474207300-2490">Coming of Age:</title> <subtitle xml:id="b-9781474207300-2491">Law, Sex and Childhood in Late Colonial India</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2492">
            <title xml:id="b-9781474207300-2493">
              <emphasis role="italic">Gender and History</emphasis>
            </title>, <volumenum>24</volumenum> (<issuenum>1</issuenum>): <pagenums>205–30</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref442">
          <author>
            <personname role="last-first">
              <surname>Pandey</surname> <firstname>Gyanendra</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2494">
            <emphasis role="italic">Routine Violence:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2495">
            <emphasis role="italic">Nations, Fragments, Histories</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2496">
            <city>Stanford</city>, <state>CA</state>
          </address>: <publishername>Stanford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref443">
          <author>
            <personname role="last-first">
              <surname>Pandey</surname> <firstname>Gyanendra</firstname>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-2497">
            <emphasis role="italic">A History of Prejudice:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2498">
            <emphasis role="italic">Race, Caste, and Difference in India and the United States</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2499">
            <city>New York</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref444">
          <author>
            <personname role="last-first">
              <surname>Pannikar</surname> <firstname role="initials">K.N.</firstname>
            </personname>
          </author> (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-2500">
            <emphasis role="italic">Colonialism, Culture and Resistance</emphasis>
          </title>, <address xml:id="b-9781474207300-2501">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref445">
          <author>
            <personname role="last-first">
              <surname>Pappé</surname> <firstname>Ilan</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2502">
            <emphasis role="italic">The Ethnic Cleansing of Palestine</emphasis>
          </title>, <address xml:id="b-9781474207300-2503">
            <city>Oxford</city>
          </address>: <publishername>Oneworld</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref446">
          <bibliomset relation="article" xml:id="b-9781474207300-2504">
            <author>
              <personname role="last-first">
                <surname>Paret</surname> <firstname>Peter</firstname>
              </personname>
            </author> (<pubdate>1991</pubdate>), “<title xml:id="b-9781474207300-2505">The New Military History</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2506">
            <title xml:id="b-9781474207300-2507">
              <emphasis role="italic">Parameters</emphasis>
            </title>, <volumenum>21</volumenum> (<issuenum>3</issuenum>): <pagenums>10–18</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref447">
          <bibliomset relation="article" xml:id="b-9781474207300-2508">
            <author>
              <personname role="last-first">
                <surname>Parry</surname> <firstname>Marc</firstname>
              </personname>
            </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-2509">Uncovering the Brutal Truth about the British Empire</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2510">
            <title xml:id="b-9781474207300-2511">
              <emphasis role="italic">The Guardian</emphasis>
            </title>, <date>August 19</date>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref448">
          <bibliomset relation="part" xml:id="b-9781474207300-2512">
            <author>
              <personname role="last-first">
                <surname>Parsons</surname> <firstname>Timothy</firstname>
              </personname>
            </author> (<pubdate>2015</pubdate>), “<title xml:id="b-9781474207300-2513">The Military Experiences of Ordinary Africans in World War II</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2514">
            <title xml:id="b-9781474207300-2515">
              <emphasis role="italic">Africa and World War II</emphasis>
            </title>, ed. <editor>
              <personname role="first-last">
                <firstname>Judith</firstname> <surname>Byfield</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname>Carolyn</firstname> <othername role="middle-initials">A.</othername> <surname>Brown</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname>Timothy</firstname> <surname>Parsons</surname>
              </personname>
            </editor>, and <editor>
              <personname role="first-last">
                <firstname>Admad</firstname> <othername role="middle">Alawad</othername> <surname>Sikainga</surname>
              </personname>
            </editor>, <pagenums>3–23</pagenums>, <address xml:id="b-9781474207300-2516">
              <city>New York</city>
            </address>: <publishername>Cambridge University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref449">
          <author>
            <personname role="last-first">
              <surname>Passavant</surname> <firstname>Paul</firstname> <othername role="middle-initials">A.</othername>
            </personname>
          </author> and <editor>
            <personname role="first-last">
              <firstname>Jodi</firstname> <surname>Dean</surname>
            </personname>
          </editor> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-2517">
            <emphasis role="italic">Empire’s New Clothes:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2518">
            <emphasis role="italic">Reading Hardt and Negri</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2519">
            <city>New York</city>
          </address>: <publishername>Routledge</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref450">
          <bibliomset relation="article" xml:id="b-9781474207300-2520">
            <author>
              <personname role="last-first">
                <surname>Pedersen</surname> <firstname>Susan</firstname>
              </personname>
            </author> (<pubdate>1991</pubdate>), “<title xml:id="b-9781474207300-2521">National Bodies, Unspeakable Acts:</title> <subtitle xml:id="b-9781474207300-2522">The Sexual Politics of Colonial Policy-Making</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2523">
            <title xml:id="b-9781474207300-2524">
              <emphasis role="italic">Journal of Modern History</emphasis>
            </title>, <volumenum>63</volumenum> (<issuenum>4</issuenum>): <pagenums>647–80</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref451">
          <author>
            <personname role="last-first">
              <surname>Pedersen</surname> <firstname>Susan</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-2525">
            <emphasis role="italic">The Guardians:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2526">
            <emphasis role="italic">The League of Nations and the Crisis of Empire</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2527">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref452">
          <author>
            <personname role="last-first">
              <surname>Pennell</surname> <firstname role="initials">C.</firstname> <othername role="middle">Richard</othername>
            </personname>
          </author> (<pubdate>1986</pubdate>), <title xml:id="b-9781474207300-2528">
            <emphasis role="italic">Country with a Government and a Flag:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2529">
            <emphasis role="italic">The Rif War in Morocco, 1921–1926</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2530">
            <city>Ann Arbor</city>, <state>MI</state>
          </address>: <publishername>University of Michigan Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref453">
          <bibliomset relation="part" xml:id="b-9781474207300-2531">
            <author>
              <personname role="last-first">
                <surname>Perham</surname> <firstname>Margery</firstname>
              </personname>
            </author> (<pubdate>1944</pubdate>), “<title xml:id="b-9781474207300-2532">The View from the Aeroplane</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2533">
            <title xml:id="b-9781474207300-2534">
              <emphasis role="italic">Race and Politics in Kenya:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2535">
              <emphasis role="italic">A Correspondence between Elspeth Huxley and Margery Perham</emphasis>
            </subtitle>, <author>
              <personname role="first-last">
                <firstname>Elspeth</firstname> <surname>Huxley</surname>
              </personname>
            </author> and <author>
              <personname role="first-last">
                <firstname>Margery</firstname> <surname>Perham</surname>
              </personname>
            </author>, <address xml:id="b-9781474207300-2536">
              <city>London</city>
            </address>: <publishername>Faber &amp; Faber</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref453a">
          <author>
            <personname role="last-first">
              <surname>Planche</surname> <firstname>Jean-Louis</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2537">
            <emphasis role="italic">Sétif 1945:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2538">
            <emphasis role="italic">Histoire d’un massacre annoncé</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2539">
            <city>Paris</city>
          </address>: <publishername>Perrin</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref454">
          <author>
            <personname role="last-first">
              <surname>Polanyi</surname> <firstname>Karl</firstname>
            </personname>
          </author> ([<pubdate>1944</pubdate>] <date>2001</date>), <title xml:id="b-9781474207300-2540">
            <emphasis role="italic">The Great Transformation:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2541">
            <emphasis role="italic">The Political and Economic Origins of Our Time</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2542">
            <city>Boston</city>, <state>MA</state>
          </address>: <publishername>Beacon Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref455">
          <bibliomset relation="part" xml:id="b-9781474207300-2543">
            <author>
              <personname role="last-first">
                <surname>Pols</surname> <firstname>Hans</firstname>
              </personname>
            </author> (<pubdate>2010</pubdate>), “<title xml:id="b-9781474207300-2544">Eugenics in the Netherlands and the Dutch East Indies</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2545">
            <title xml:id="b-9781474207300-2546">
              <emphasis role="italic">The Oxford Handbook of the History of Eugenics</emphasis>
            </title>, eds <editor>
              <personname role="first-last">
                <firstname>Alison</firstname> <surname>Bashford</surname>
              </personname>
            </editor> and <editor>
              <personname role="first-last">
                <firstname>Philippa</firstname> <surname>Levine</surname>
              </personname>
            </editor>, <pagenums>347–62</pagenums>, <address xml:id="b-9781474207300-2547">
              <city>Oxford</city>
            </address>: <publishername>Oxford University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref456">
          <author>
            <personname role="last-first">
              <surname>Pomeranz</surname> <firstname>Kenneth</firstname>
            </personname>
          </author> (<pubdate>2000</pubdate>), <title xml:id="b-9781474207300-2548">
            <emphasis role="italic">The Great Divergence, China, Europe, and the Making of the World Economy</emphasis>
          </title>, <address xml:id="b-9781474207300-2549">
            <city>Princeton</city>, <state>NJ</state>
          </address>: <publishername>Princeton University Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref457">
          <bibliomset relation="part" xml:id="b-9781474207300-2550">
            <author>
              <personname role="last-first">
                <surname>Porch</surname> <firstname>Douglas</firstname>
              </personname>
            </author> (<pubdate>1986</pubdate>), “<title xml:id="b-9781474207300-2551">Bugeaud, Gallieni, Lyautey:</title> <subtitle xml:id="b-9781474207300-2552">The Development of French Colonial Warfare</subtitle>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2553">
            <title xml:id="b-9781474207300-2554">
              <emphasis role="italic">Makers of Modern Strategy from Machiavelli to the Nuclear Age</emphasis>
            </title>, ed. <editor>
              <personname role="first-last">
                <firstname>Peter</firstname> <surname>Paret</surname>
              </personname>
            </editor>, <pagenums>376–408</pagenums>, <address xml:id="b-9781474207300-2555">
              <city>Princeton</city>, <state>NJ</state>
            </address>: <publishername>Princeton University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref458">
          <bibliomset relation="article" xml:id="b-9781474207300-2556">
            <author>
              <personname role="last-first">
                <surname>Portuondo</surname> <firstname>María</firstname>
              </personname>
            </author> (<pubdate>2009</pubdate>), “<title xml:id="b-9781474207300-2557">Constructing a Narrative:</title> <subtitle xml:id="b-9781474207300-2558">The History of Science and Technology in Latin America</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2559">
            <title xml:id="b-9781474207300-2560">
              <emphasis role="italic">History Compass</emphasis>
            </title>, <volumenum>7</volumenum> (<issuenum>2</issuenum>): <pagenums>500–22</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref459">
          <author>
            <personname role="last-first">
              <surname>Posel</surname> <firstname>Deborah</firstname>
            </personname>
          </author> (<pubdate>1991</pubdate>), <title xml:id="b-9781474207300-2561">
            <emphasis role="italic">The Making of Apartheid</emphasis>
          </title>, <address xml:id="b-9781474207300-2562">
            <city>Oxford</city>
          </address>: <publishername>Clarendon Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref460">
          <author>
            <personname role="last-first">
              <surname>Prashad</surname> <firstname>Vijay</firstname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-2563">
            <emphasis role="italic">The Darker Nations:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2564">
            <emphasis role="italic">A People’s History of the Third World</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2565">
            <city>New York</city>
          </address>: <publishername>The New Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref461">
          <author>
            <personname role="last-first">
              <surname>Pratt</surname> <firstname>Mary</firstname> <othername role="middle">Louise</othername>
            </personname>
          </author> (<pubdate>1992</pubdate>), <title xml:id="b-9781474207300-2566">
            <emphasis role="italic">Imperial Eyes:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2567">
            <emphasis role="italic">Travel Writing and Transculturation</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2568">
            <city>London</city>
          </address>: <publishername>Routledge</publishername>.</bibliomixed>
<?page value="222"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref462">
          <author>
            <personname role="last-first">
              <surname>Price-Smith</surname> <firstname>Andrew</firstname> <othername role="middle-initials">T.</othername>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-2569">
            <emphasis role="italic">Oil, Illiberalism, and War:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2570">
            <emphasis role="italic">An Analysis of Energy and US Foreign Policy</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2571">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>MIT Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref463">
          <bibliomset relation="article" xml:id="b-9781474207300-2572">
            <author>
              <personname role="last-first">
                <surname>Proschan</surname> <firstname>Frank</firstname>
              </personname>
            </author> (<pubdate>2002</pubdate>), “ <title xml:id="b-9781474207300-2573">‘Syphilis, Opiomania, and Pederasty’:</title> <subtitle xml:id="b-9781474207300-2574">Colonial Constructions of Vietnamese (and French) Social Diseases</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2575">
            <title xml:id="b-9781474207300-2576">
              <emphasis role="italic">Journal of the History of Sexuality</emphasis>
            </title>, <volumenum>11</volumenum> (<issuenum>4</issuenum>): <pagenums>610–36</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref464">
          <author>
            <personname role="last-first">
              <surname>Puar</surname> <firstname>Jasbir</firstname> <othername role="middle-initials">K.</othername>
            </personname>
          </author> (<pubdate>2007</pubdate>), <title xml:id="b-9781474207300-2577">
            <emphasis role="italic">Terrorist Assemblages:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2578">
            <emphasis role="italic">Homonationalism in Queer Times</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2579">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref465">
          <author>
            <personname role="last-first">
              <surname>Ramnath</surname> <firstname>Maia</firstname>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-2580">
            <emphasis role="italic">From Haj to Utopia:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2581">
            <emphasis role="italic">How the Ghadar Movement Charted Global Radicalism and Attempted to Overthrow the British Empire</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2582">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref466">
          <author>
            <personname role="last-first">
              <surname>Ravenhill</surname> <firstname>John</firstname>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-2583">
            <emphasis role="italic">Global Political Economy</emphasis>
          </title>, <address xml:id="b-9781474207300-2584">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref467">
          <bibliomset relation="article" xml:id="b-9781474207300-2585">
            <author>
              <personname role="last-first">
                <surname>Ray</surname> <firstname>Carina</firstname> <othername role="middle-initials">E.</othername>
              </personname>
            </author> (<pubdate>2014</pubdate>), “<title xml:id="b-9781474207300-2586">Decrying White Peril:</title> <subtitle xml:id="b-9781474207300-2587">Interracial Sex and the Rise of Anticolonial Nationalism in the Gold Coast</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2588">
            <title xml:id="b-9781474207300-2589">
              <emphasis role="italic">American Historical Review</emphasis>
            </title>, <volumenum>119</volumenum> (<issuenum>1</issuenum>): <pagenums>78–110</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref468">
          <author>
            <personname role="last-first">
              <surname>Ray</surname> <firstname>Carina</firstname> <othername role="middle-initials">E.</othername>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-2590">
            <emphasis role="italic">Crossing the Color Line:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2591">
            <emphasis role="italic">Race, Sex, and the Contested Politics of Colonialism in Ghana</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2592">
            <city>Athens</city>, <state>OH</state>
          </address>: <publishername>Ohio University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref469">
          <bibliomset relation="article" xml:id="b-9781474207300-2593">
            <author>
              <personname role="last-first">
                <surname>Reagan</surname> <firstname>Leslie</firstname> <othername role="middle-initials">J.</othername>
              </personname>
            </author> (<pubdate>2016</pubdate>), “<title xml:id="b-9781474207300-2594">My Daughter was Genetically Drafted with Me:</title> <subtitle xml:id="b-9781474207300-2595">U.S.–Vietnam War Veterans, Disabilities, and Gender</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2596">
            <title xml:id="b-9781474207300-2597">
              <emphasis role="italic">Gender and History</emphasis>
            </title>, <volumenum>28</volumenum> (<issuenum>3</issuenum>): <pagenums>833–53</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref470">
          <author>
            <personname role="last-first">
              <surname>Reynolds</surname> <firstname>David</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-2598">
            <emphasis role="italic">The Long Shadow:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2599">
            <emphasis role="italic">The Great War and the Twentieth Century</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2600">
            <city>New York</city>
          </address>: <publishername>W.W. Norton</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref471">
          <bibliomset relation="part" xml:id="b-9781474207300-2601">
            <author>
              <personname role="last-first">
                <surname>Robb</surname> <firstname>Peter</firstname>
              </personname>
            </author> (<pubdate>1995</pubdate>), “<title xml:id="b-9781474207300-2602">Introduction:</title> <subtitle xml:id="b-9781474207300-2603">South Asia and the Concept of Race</subtitle>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2604">
            <title xml:id="b-9781474207300-2605">
              <emphasis role="italic">The Concept of Race in South Asia</emphasis>
            </title>, ed. <editor>
              <personname role="first-last">
                <firstname>Peter</firstname> <surname>Robb</surname>
              </personname>
            </editor>, <pagenums>1–76</pagenums>, <address xml:id="b-9781474207300-2606">
              <city>Delhi</city>
            </address>: <publishername>Oxford University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref472">
          <bibliomset relation="article" xml:id="b-9781474207300-2607">
            <author>
              <personname role="last-first">
                <surname>Rodríguez García</surname> <firstname>Magaly</firstname>
              </personname>
            </author> (<pubdate>2012</pubdate>), “<title xml:id="b-9781474207300-2608">The League of Nations and the Moral Recruitment of Women</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2609">
            <title xml:id="b-9781474207300-2610">
              <emphasis role="italic">International Review of Social History</emphasis>
            </title>, <volumenum>57</volumenum> (<issuenum>S20</issuenum>): <pagenums>97–128</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref473">
          <author>
            <personname role="last-first">
              <surname>Rodrik</surname> <firstname>Dani</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), “<title xml:id="b-9781474207300-2611">Premature Deindustrialization</title>,” <bibliomisc role="description">Princeton Institute for Advanced Study (IAS), School of Social Science, <emphasis role="italic">Economics Working Papers</emphasis> #107</bibliomisc>, <link xlink:href="https://www.sss.ias.edu/files/papers/econpaper107.pdf">
            <uri>https://www.sss.ias.edu/files/papers/econpaper107.pdf</uri>
          </link>, accessed <date role="accessed">December 30, 2016</date>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref474">
          <author>
            <personname role="last-first">
              <surname>Roediger</surname> <firstname>David</firstname> <othername role="middle-initials">R.</othername>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Elizabeth</firstname> <surname>Esch</surname>
            </personname>
          </author> (<pubdate>2012</pubdate>), <title xml:id="b-9781474207300-2612">
            <emphasis role="italic">The Production of Difference:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2613">
            <emphasis role="italic">Race and the Management of Labor in U.S. History</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2614">
            <city>New York</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref475">
          <author>
            <personname role="last-first">
              <surname>Rooney</surname> <firstname>David</firstname>
            </personname>
          </author> (<pubdate>1988</pubdate>), <title xml:id="b-9781474207300-2615">
            <emphasis role="italic">Kwame Nkrumah:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2616">
            <emphasis role="italic">The Political Kingdom in the Third World</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2617">
            <city>New York</city>
          </address>: <publishername>St. Martin’s Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref476">
          <author>
            <personname role="last-first">
              <surname>Rosenberg</surname> <firstname>Clifford</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2618">
            <emphasis role="italic">Policing Paris:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2619">
            <emphasis role="italic">The Origins of Immigration Control Between the Wars</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2620">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref477">
          <author>
            <personname role="last-first">
              <surname>Ross</surname> <firstname>Kristin</firstname>
            </personname>
          </author> (<pubdate>1995</pubdate>), <title xml:id="b-9781474207300-2621">
            <emphasis role="italic">Fast Cars, Clean Bodies:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2622">
            <emphasis role="italic">Decolonization and the Reordering of French Culture</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2623">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>MIT Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref478">
          <author>
            <personname role="last-first">
              <surname>Rostow</surname> <firstname role="initials">W.W.</firstname>
            </personname>
          </author> (<pubdate>1960</pubdate>), <title xml:id="b-9781474207300-2624">
            <emphasis role="italic">The Stages of Economic Growth</emphasis>
          </title>, <address xml:id="b-9781474207300-2625">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref479">
          <author>
            <personname role="last-first">
              <surname>Saada</surname> <firstname>Emmanuelle</firstname>
            </personname>
          </author> (<pubdate>2012</pubdate>), <title xml:id="b-9781474207300-2626">
            <emphasis role="italic">Empire’s Children:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2627">
            <emphasis role="italic">Race, Filiation, and Citizenship in the French Colonies</emphasis>
          </subtitle>, trans. <othercredit class="translator">
            <personname role="first-last">
              <firstname>Arthur</firstname> <surname>Goldhammer</surname>
            </personname>
          </othercredit>, <address xml:id="b-9781474207300-2628">
            <city>Chicago</city>, <state>IL</state>
          </address>: <publishername>University of Chicago Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref480">
          <author>
            <personname role="last-first">
              <surname>Said</surname> <firstname>Edward</firstname>
            </personname>
          </author> (<pubdate>1978</pubdate>), <title xml:id="b-9781474207300-2629">
            <emphasis role="italic">Orientalism</emphasis>
          </title>, <address xml:id="b-9781474207300-2630">
            <city>New York</city>
          </address>: <publishername>Pantheon</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref481">
          <bibliomset relation="article" xml:id="b-9781474207300-2631">
            <author>
              <personname role="last-first">
                <surname>Saranillio</surname> <firstname>Dean</firstname> <othername role="middle">Itsuji</othername>
              </personname>
            </author> (<pubdate>2010</pubdate>), “<title xml:id="b-9781474207300-2632">Colliding Histories:</title> <subtitle xml:id="b-9781474207300-2633">Hawai’i Statehood at the Instersection of Asians ‘Ineligible for Citizenship’ and Hawaiians ‘Unfit for Self-Government,’</subtitle> ”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2634">
            <title xml:id="b-9781474207300-2635">
              <emphasis role="italic">Journal of Asian American Studies</emphasis>
            </title>, <volumenum>13</volumenum> (<issuenum>3</issuenum>): <pagenums>283–309</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref482">
          <author>
            <personname role="last-first">
              <surname>Sarraut</surname> <firstname>Albert</firstname>
            </personname>
          </author> (<pubdate>1923</pubdate>), <title xml:id="b-9781474207300-2636">
            <emphasis role="italic">La mise en valeur des colonies françaises</emphasis>
          </title>, <address xml:id="b-9781474207300-2637">
            <city>Paris</city>
          </address>: <publishername>Payot</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref483">
          <author>
            <personname role="last-first">
              <surname>Schneider</surname> <firstname>Leander</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), <title xml:id="b-9781474207300-2638">
            <emphasis role="italic">Government of Development:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2639">
            <emphasis role="italic">Peasants and Politicians in Postcolonial Tanzania</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2640">
            <city>Bloomington</city>, <state>IN</state>
          </address>: <publishername>Indiana University Press</publishername>.</bibliomixed>
<?page value="223"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref484">
          <author>
            <personname role="last-first">
              <surname>Scott</surname> <firstname>James</firstname> <othername role="middle-initials">C.</othername>
            </personname>
          </author> (<pubdate>1990</pubdate>), <title xml:id="b-9781474207300-2641">
            <emphasis role="italic">Domination and the Arts of Resistance:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2642">
            <emphasis role="italic">Hidden Transcripts</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2643">
            <city>New Haven</city>, <state>CT</state>
          </address>: <publishername>Yale University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref485">
          <author>
            <personname role="last-first">
              <surname>Scott</surname> <firstname>James</firstname> <othername role="middle-initials">C.</othername>
            </personname>
          </author> (<pubdate>1998</pubdate>), <title xml:id="b-9781474207300-2644">
            <emphasis role="italic">Seeing Like a State:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2645">
            <emphasis role="italic">How Certain Schemes to Improve the Human Condition Have Failed</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2646">
            <city>New Haven</city>, <state>CT</state>
          </address>: <publishername>Yale University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref486">
          <bibliomset relation="article" xml:id="b-9781474207300-2647">
            <author>
              <personname role="last-first">
                <surname>Sen</surname> <firstname>Amartya</firstname>
              </personname>
            </author> (<pubdate>1977</pubdate>), “<title xml:id="b-9781474207300-2648">Starvation and Exchange Entitlements:</title> <subtitle xml:id="b-9781474207300-2649">A General Approach and its Application to the Great Bengal Famine</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2650">
            <title xml:id="b-9781474207300-2651">
              <emphasis role="italic">Cambridge Journal of Economics</emphasis>
            </title>, <volumenum>1</volumenum> (<issuenum>1</issuenum>): <pagenums>33–59</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref487">
          <author>
            <personname role="last-first">
              <surname>Sharkey</surname> <firstname>Heather</firstname>
            </personname>
          </author> (<pubdate>2003</pubdate>), <title xml:id="b-9781474207300-2652">
            <emphasis role="italic">Living with Colonialism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2653">
            <emphasis role="italic">Nationalism and Culture in the Anglo-Egyptian Sudan</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2654">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref488">
          <bibliomset relation="article" xml:id="b-9781474207300-2655">
            <author>
              <personname role="last-first">
                <surname>Sharpe</surname> <firstname>Jenny</firstname>
              </personname>
            </author> (<pubdate>1989</pubdate>), “<title xml:id="b-9781474207300-2656">Figures of Colonial Resistance</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2657">
            <title xml:id="b-9781474207300-2658">
              <emphasis role="italic">Modern Fiction Studies</emphasis>
            </title>, <volumenum>35</volumenum> (<issuenum>1</issuenum>): <pagenums>137–55</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref489">
          <author>
            <personname role="last-first">
              <surname>Shepard</surname> <firstname>Todd</firstname>
            </personname>
          </author> ([<pubdate>2006</pubdate>] <date>2008</date>), <title xml:id="b-9781474207300-2659">
            <emphasis role="italic">The Invention of Decolonization:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2660">
            <emphasis role="italic">The Algerian War and the Remaking of France</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2661">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref490">
          <bibliomset relation="article" xml:id="b-9781474207300-2662">
            <author>
              <personname role="last-first">
                <surname>Shepard</surname> <firstname>Todd</firstname>
              </personname>
            </author> (<pubdate>2012</pubdate>), “ <title xml:id="b-9781474207300-2663">‘Something Notably Erotic’:</title> <subtitle xml:id="b-9781474207300-2664">Politics, ‘Arab Men,’ and Sexual Revolution in Post-Decolonization France, 1962–1974</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2665">
            <title xml:id="b-9781474207300-2666">
              <emphasis role="italic">Journal of Modern History</emphasis>
            </title>, <volumenum>84</volumenum> (<issuenum>1</issuenum>): <pagenums>80–115</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref491">
          <author>
            <personname role="last-first">
              <surname>Shetler</surname> <firstname>Jan</firstname> <othername role="middle">Bender</othername>
            </personname>
          </author> (<pubdate>2007</pubdate>), <title xml:id="b-9781474207300-2667">
            <emphasis role="italic">Imagining Serengeti:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2668">
            <emphasis role="italic">A History of Landscape Memory in Tanzania from Earliest Times to the Present</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2669">
            <city>Athens</city>, <state>OH</state>
          </address>: <publishername>Ohio University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref492">
          <author>
            <personname role="last-first">
              <surname>Shipway</surname> <firstname>Martin</firstname>
            </personname>
          </author> (<pubdate>1996</pubdate>), <title xml:id="b-9781474207300-2670">
            <emphasis role="italic">The Road to War:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2671">
            <emphasis role="italic">France and Vietnam 1944–1947</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2672">
            <city>Oxford</city>
          </address>: <publishername>Berghahn Books</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref493">
          <author>
            <personname role="last-first">
              <surname>Shipway</surname> <firstname>Martin</firstname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-2673">
            <emphasis role="italic">Decolonization and its Impact:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2674">
            <emphasis role="italic">A Comparative Approach to the End of the Colonial Empires</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2675">
            <city>Oxford</city>
          </address>: <publishername>Blackwell</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref494">
          <bibliomset relation="article" xml:id="b-9781474207300-2676">
            <author>
              <personname role="last-first">
                <surname>Simatei</surname> <firstname>Tirop</firstname>
              </personname>
            </author> (<pubdate>2005</pubdate>), “<title xml:id="b-9781474207300-2677">Colonial Violence, Post-Colonial Violations, Violence, Landscape and Memory in Kenyan Fiction</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2678">
            <title xml:id="b-9781474207300-2679">
              <emphasis role="italic">Research in African Literatures</emphasis>
            </title>, <volumenum>36</volumenum> (<issuenum>2</issuenum>): <pagenums>85–94</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref495">
          <author>
            <personname role="last-first">
              <surname>Simeon</surname> <firstname>Dilip</firstname>
            </personname>
          </author> (<pubdate>1995</pubdate>), <title xml:id="b-9781474207300-2680">
            <emphasis role="italic">The Politics of Labour under Late Colonialism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2681">
            <emphasis role="italic">Workers, Unions and the State in Chota Nagpur, 1928–1939</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2682">
            <city>New Delhi</city>
          </address>: <publishername>Manohar</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref496">
          <author>
            <personname role="last-first">
              <surname>Simons</surname> <firstname>Geoff</firstname> <othername role="middle-initials">L.</othername>
            </personname>
          </author> (<pubdate>1998</pubdate>), <title xml:id="b-9781474207300-2683">
            <emphasis role="italic">Vietnam Syndrome:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2684">
            <emphasis role="italic">Impact on US Foreign Policy</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2685">
            <city>New York</city>
          </address>: <publishername>St Martin’s Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref497">
          <author>
            <personname role="last-first">
              <surname>Sinha</surname> <firstname>Mrinalini</firstname>
            </personname>
          </author> (<pubdate>1995</pubdate>), <title xml:id="b-9781474207300-2686">
            <emphasis role="italic">Colonial Masculinity</emphasis>
          </title>, <address xml:id="b-9781474207300-2687">
            <city>Manchester</city>
          </address>: <publishername>Manchester University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref498">
          <author>
            <personname role="last-first">
              <surname>Sinha</surname> <firstname>Mrinalini</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2688">
            <emphasis role="italic">Specters of Mother India:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2689">
            <emphasis role="italic">The Global Restructuring of an Empire</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2690">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref499">
          <author>
            <personname role="last-first">
              <surname>Sluga</surname> <firstname>Glenda</firstname>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-2691">
            <emphasis role="italic">Internationalism in the Age of Nationalism</emphasis>
          </title>, <address xml:id="b-9781474207300-2692">
            <city>Philadelphia</city>, <state>PA</state>
          </address>: <publishername>University of Pennsylvania Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref500">
          <editor>
            <personname role="last-first">
              <surname>Sluga</surname> <firstname>Glenda</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Patricia</firstname> <surname>Clavin</surname>
            </personname>
          </editor>, eds (<pubdate>2017</pubdate>), <title xml:id="b-9781474207300-2693">
            <emphasis role="italic">Internationalisms:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2694">
            <emphasis role="italic">A Twentieth-Century History</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2695">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref501">
          <author>
            <personname role="last-first">
              <surname>Somerville</surname> <firstname>Siobhan</firstname> <othername role="middle-initials">B.</othername>
            </personname>
          </author> (<pubdate>2000</pubdate>), <title xml:id="b-9781474207300-2696">
            <emphasis role="italic">Queering the Color Line:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2697">
            <emphasis role="italic">Race and the Invention of Homosexuality in American Culture</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2698">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref502">
          <author>
            <personname role="last-first">
              <surname>Sougnenet</surname> <firstname>Leon</firstname>
            </personname>
          </author> (<pubdate>1918</pubdate>), <title xml:id="b-9781474207300-2699">
            <emphasis role="italic">Le Dernier Chameau, Le Premier Pneu, La Primiere Aile</emphasis>
          </title>, <address xml:id="b-9781474207300-2700">
            <city>Bruxelles</city>
          </address>: <publishername>Éditions de l’Éventail</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref503">
          <bibliomset relation="article" xml:id="b-9781474207300-2701">
            <author>
              <personname role="last-first">
                <surname>Spear</surname> <firstname>Thomas</firstname>
              </personname>
            </author> (<pubdate>2003</pubdate>), “<title xml:id="b-9781474207300-2702">Neo-Traditionalism and the Limits of Invention in British Colonial Africa</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2703">
            <title xml:id="b-9781474207300-2704">
              <emphasis role="italic">Journal of African History</emphasis>
            </title>, <volumenum>44</volumenum> (<issuenum>1</issuenum>): <pagenums>3–27</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref504">
          <bibliomset relation="article" xml:id="b-9781474207300-2705">
            <author>
              <personname role="last-first">
                <surname>Stanard</surname> <firstname>Matthew</firstname>
              </personname>
            </author> (<pubdate>2014</pubdate>), “<title xml:id="b-9781474207300-2706">Belgium, the Congo, and Imperial Immobility:</title> <subtitle xml:id="b-9781474207300-2707">A Singular Empire and the Historiography of the Single Analytic Field</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2708">
            <title xml:id="b-9781474207300-2709">
              <emphasis role="italic">French Colonial History</emphasis>
            </title>, <volumenum>15</volumenum>: <pagenums>87–109</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref505">
          <author>
            <personname role="last-first">
              <surname>Statler</surname> <firstname>Kathryn</firstname>
            </personname>
          </author> (<pubdate>2007</pubdate>), <title xml:id="b-9781474207300-2710">
            <emphasis role="italic">Replacing France:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2711">
            <emphasis role="italic">The Origins of American Intervention in Vietnam</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2712">
            <city>Lexington</city>, <state>KY</state>
          </address>: <publishername>University Press of Kentucky</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref506">
          <bibliomset relation="article" xml:id="b-9781474207300-2713">
            <author>
              <personname role="last-first">
                <surname>Stein</surname> <firstname>Rebecca</firstname>
              </personname>
            </author> (<pubdate>2008</pubdate>), “<title xml:id="b-9781474207300-2714">Souvenirs of Conquest:</title> <subtitle xml:id="b-9781474207300-2715">Israeli Occupations as Tourist Events</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2716">
            <title xml:id="b-9781474207300-2717">
              <emphasis role="italic">International Journal of Middle East Studies</emphasis>
            </title>, <volumenum>40</volumenum>: <pagenums>647–69</pagenums>.</bibliomset>
        </bibliomixed>
<?page value="224"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref507">
          <author>
            <personname role="last-first">
              <surname>Stenson</surname> <firstname>Michael</firstname> <othername role="middle-initials">R.</othername>
            </personname>
          </author> (<pubdate>1970</pubdate>), <title xml:id="b-9781474207300-2718">
            <emphasis role="italic">Industrial Conflict in Malaya:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2719">
            <emphasis role="italic">Prelude to the Communist Revolt of 1948</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2720">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref508">
          <bibliomset relation="article" xml:id="b-9781474207300-2721">
            <author>
              <personname role="last-first">
                <surname>Stoler</surname> <firstname>Ann</firstname> <othername role="middle">Laura</othername>
              </personname>
            </author> (<pubdate>1992</pubdate>), “<title xml:id="b-9781474207300-2722">Sexual Affronts and Racial Frontiers:</title> <subtitle xml:id="b-9781474207300-2723">European Identities and the Cultural Politics of Exclusion in Colonial Southeast Asia</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2724">
            <title xml:id="b-9781474207300-2725">
              <emphasis role="italic">Comparative Studies in Society and History</emphasis>
            </title>, <volumenum>34</volumenum> (<issuenum>3</issuenum>): <pagenums>514–51</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref509">
          <author>
            <personname role="last-first">
              <surname>Stoler</surname> <firstname>Ann</firstname> <othername role="middle">Laura</othername>
            </personname>
          </author> (<pubdate>1995</pubdate>), <title xml:id="b-9781474207300-2726">
            <emphasis role="italic">Race and the Education of Desire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2727">
            <emphasis role="italic">Foucault’s History of Sexuality and the Colonial Order of Things</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2728">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref510">
          <bibliomset relation="article" xml:id="b-9781474207300-2729">
            <author>
              <personname role="last-first">
                <surname>Stoler</surname> <firstname>Ann</firstname> <othername role="middle">Laura</othername>
              </personname>
            </author> (<pubdate>1997</pubdate>), “<title xml:id="b-9781474207300-2730">Racial Histories and their Regimes of Truth</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2731">
            <title xml:id="b-9781474207300-2732">
              <emphasis role="italic">Political Power and Social Theory</emphasis>
            </title>, <volumenum>11</volumenum>: <pagenums>183–206</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref511">
          <author>
            <personname role="last-first">
              <surname>Stoler</surname> <firstname>Ann</firstname> <othername role="middle">Laura</othername>
            </personname>
          </author> (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-2733">
            <emphasis role="italic">Carnal Knowledge and Imperial Power:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2734">
            <emphasis role="italic">Race and the Intimate in Colonial Rule</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2735">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref512">
          <editor>
            <personname role="last-first">
              <surname>Stoler</surname> <firstname>Ann</firstname> <othername role="middle">Laura</othername>
            </personname>
          </editor>, ed. (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2736">
            <emphasis role="italic">Haunted by Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2737">
            <emphasis role="italic">Geographies of Intimacy in North American History</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2738">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref513">
          <author>
            <personname role="last-first">
              <surname>Stoler</surname> <firstname>Ann</firstname> <othername role="middle">Laura</othername>
            </personname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-2739">
            <emphasis role="italic">Duress:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2740">
            <emphasis role="italic">Imperial Durabilities in Our Times</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2741">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref514">
          <bibliomset relation="article" xml:id="b-9781474207300-2742">
            <author>
              <personname role="last-first">
                <surname>Stone</surname> <firstname>Dan</firstname>
              </personname>
            </author> (<pubdate>2001</pubdate>), “<title xml:id="b-9781474207300-2743">Race in British Eugenics</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2744">
            <title xml:id="b-9781474207300-2745">
              <emphasis role="italic">European History Quarterly</emphasis>
            </title>, <volumenum>31</volumenum> (<issuenum>3</issuenum>): <pagenums>397–425</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref515">
          <bibliomset relation="article" xml:id="b-9781474207300-2746">
            <author>
              <personname role="last-first">
                <surname>Stovall</surname> <firstname>Tyler</firstname>
              </personname>
            </author> (<pubdate>1998</pubdate>), “<title xml:id="b-9781474207300-2747">The Color Line Behind the Lines:</title> <subtitle xml:id="b-9781474207300-2748">Racial Violence in France During the Great War</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2749">
            <title xml:id="b-9781474207300-2750">
              <emphasis role="italic">American Historical Review</emphasis>
            </title>, <volumenum>103</volumenum> (<issuenum>3</issuenum>): <pagenums>737–69</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref516">
          <author>
            <personname role="last-first">
              <surname>Strauss</surname> <firstname>Scott</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2751">
            <emphasis role="italic">The Order of Genocide:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2752">
            <emphasis role="italic">Race, Power, and War in Rwanda</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2753">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref517">
          <author>
            <personname role="last-first">
              <surname>Streets-Salter</surname> <firstname>Heather</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Trevor</firstname> <othername role="middle-initials">R.</othername> <surname>Getz</surname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-2754">
            <emphasis role="italic">Empires and Colonies in the Modern World</emphasis>
          </title>, <address xml:id="b-9781474207300-2755">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref518">
          <author>
            <personname role="last-first">
              <surname>Stromberg Childers</surname> <firstname>Kristen</firstname>
            </personname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-2756">
            <emphasis role="italic">Seeking Imperialism’s Embrace</emphasis>
          </title>, <address xml:id="b-9781474207300-2757">
            <city>Oxford</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref519">
          <author>
            <personname role="last-first">
              <surname>Stubbs</surname> <firstname>Richard</firstname>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-2758">
            <emphasis role="italic">Hearts and Minds in Guerrilla Warfare:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2759">
            <emphasis role="italic">The Malayan Emergency 1948–1960</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2760">
            <country>Singapore</country>
          </address>: <publishername>Times Academic Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref520">
          <bibliomset relation="article" xml:id="b-9781474207300-2761">
            <author>
              <personname role="last-first">
                <surname>Summers</surname> <firstname>Carol</firstname>
              </personname>
            </author> (<pubdate>1991</pubdate>), “<title xml:id="b-9781474207300-2762">Intimate Colonialism:</title> <subtitle xml:id="b-9781474207300-2763">The Imperial Production of Reproduction in Uganda, 1907–1925</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2764">
            <title xml:id="b-9781474207300-2765">
              <emphasis role="italic">Signs</emphasis>
            </title>, <volumenum>16</volumenum> (<issuenum>4</issuenum>): <pagenums>787–807</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref521">
          <bibliomset relation="article" xml:id="b-9781474207300-2766">
            <author>
              <personname role="last-first">
                <surname>Surkis</surname> <firstname>Judith</firstname>
              </personname>
            </author> (<pubdate>2010</pubdate>), “<title xml:id="b-9781474207300-2767">Ethics and Violence:</title> <subtitle xml:id="b-9781474207300-2768">Simone de Beauvoir, Djamila Boupacha, and the Algerian War</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2769">
            <title xml:id="b-9781474207300-2770">
              <emphasis role="italic">French Politics, Culture and Society</emphasis>
            </title>, <volumenum>28</volumenum> (<issuenum>2</issuenum>): <pagenums>38–55</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref522">
          <bibliomset relation="article" xml:id="b-9781474207300-2771">
            <author>
              <personname role="last-first">
                <surname>Tabili</surname> <firstname>Laura</firstname>
              </personname>
            </author> (<pubdate>1994</pubdate>), “<title xml:id="b-9781474207300-2772">The Construction of Racial Difference in Twentieth-Century Britain:</title> <subtitle xml:id="b-9781474207300-2773">The Special Restriction (Coloured Alien Seaman) Order, 1925</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2774">
            <title xml:id="b-9781474207300-2775">
              <emphasis role="italic">Journal of British Studies</emphasis>
            </title>, <volumenum>33</volumenum> (<issuenum>1</issuenum>): <pagenums>54–98</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref523">
          <bibliomset relation="article" xml:id="b-9781474207300-2776">
            <author>
              <personname role="last-first">
                <surname>Tabili</surname> <firstname>Laura</firstname>
              </personname>
            </author> (<pubdate>2005</pubdate>), “<title xml:id="b-9781474207300-2777">Empire Is the Enemy of Love:</title> <subtitle xml:id="b-9781474207300-2778">Edith Noor’s Progress and Other Stories</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2779">
            <title xml:id="b-9781474207300-2780">
              <emphasis role="italic">Gender and History</emphasis>
            </title>, <volumenum>17</volumenum>(<issuenum>1</issuenum>): <pagenums>5–28</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref524">
          <bibliomset relation="article" xml:id="b-9781474207300-2781">
            <author>
              <personname role="last-first">
                <surname>Taine-Cheikh</surname> <firstname>Catherine</firstname>
              </personname>
            </author> (<pubdate>1989</pubdate>), “<title xml:id="b-9781474207300-2782">La Mauritanie en noir et blanc. Petit Promenade linguistique en Hassaniya</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2783">
            <title xml:id="b-9781474207300-2784">
              <emphasis role="italic">Revue du Monde Musulman et de la Méditerranée</emphasis>
            </title>, <volumenum>54</volumenum>: <pagenums>90–105</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref525">
          <author>
            <personname role="last-first">
              <surname>Taithe</surname> <firstname>Bertrand</firstname>
            </personname>
          </author> (<pubdate>2009</pubdate>), <title xml:id="b-9781474207300-2785">
            <emphasis role="italic">The Killer Trail:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2786">
            <emphasis role="italic">A Colonial Scandal in the Heart of Africa</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2787">
            <city>New York</city>
          </address>: <publishername>Oxford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref526">
          <editor>
            <personname role="last-first">
              <surname>Tal</surname> <firstname>Alon</firstname>
            </personname>
          </editor>, ed. (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2788">
            <emphasis role="italic">Speaking of Earth:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2789">
            <emphasis role="italic">Environmental Speeches that Moved the World</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2790">
            <city>New Brunswick</city>, <state>NJ</state>
          </address>: <publishername>Rutgers University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref527">
          <author>
            <personname role="last-first">
              <surname>Talbott</surname> <firstname>John</firstname>
            </personname>
          </author> (<pubdate>1980</pubdate>), <title xml:id="b-9781474207300-2791">
            <emphasis role="italic">The War Without a Name:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2792">
            <emphasis role="italic">France in Algeria, 1954–1962</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2793">
            <city>New York</city>
          </address>: <publishername>Knopf</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref528">
          <bibliomset relation="article" xml:id="b-9781474207300-2794">
            <author>
              <personname role="last-first">
                <surname>Tambe</surname> <firstname>Ashwini</firstname>
              </personname>
            </author> (<pubdate>2009</pubdate>), “<title xml:id="b-9781474207300-2795">The State as Surrogate Parent:</title> <subtitle xml:id="b-9781474207300-2796">Legislating Nonmarital Sex in Colonial India, 1911–1929</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2797">
            <title xml:id="b-9781474207300-2798">
              <emphasis role="italic">Journal of the History of Childhood and Youth</emphasis>
            </title>, <volumenum>2</volumenum> (<issuenum>3</issuenum>): <pagenums>393–427</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref529">
          <author>
            <personname role="last-first">
              <surname>Tannanbawm</surname> <firstname>Frank</firstname>
            </personname>
          </author> (<pubdate>1946</pubdate>), <title xml:id="b-9781474207300-2799">
            <emphasis role="italic">Slave and Citizen, the Negro in the Americas</emphasis>
          </title>, <address xml:id="b-9781474207300-2800">
            <city>New York</city>
          </address>: <publishername>Knopf</publishername>.</bibliomixed>
<?page value="225"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref530">
          <author>
            <orgname>Tanzanian African National Union (TANU)</orgname>
          </author> (<pubdate>1967</pubdate>), <title xml:id="b-9781474207300-2801">
            <emphasis role="italic">The Arusha Declaration</emphasis>
          </title>, <address xml:id="b-9781474207300-2802">
            <city>Dar es Salaam</city>
          </address>: <publishername>TANU</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref531">
          <author>
            <personname role="last-first">
              <surname>Taraud</surname> <firstname>Christelle</firstname>
            </personname>
          </author> (<pubdate>2003</pubdate>), <title xml:id="b-9781474207300-2803">
            <emphasis role="italic">La Prostitution Coloniale: d’Algérie, Tunisie, Maroc (1830–1962)</emphasis>
          </title>, <address xml:id="b-9781474207300-2804">
            <city>Paris</city>
          </address>: <publishername>Payot</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref532">
          <author>
            <personname role="last-first">
              <surname>Taussig</surname> <firstname>Michael</firstname>
            </personname>
          </author> (<pubdate>1993</pubdate>), <title xml:id="b-9781474207300-2805">
            <emphasis role="italic">Mimesis and Alterity</emphasis>
          </title>, <address xml:id="b-9781474207300-2806">
            <city>New York</city>
          </address>: <publishername>Routledge</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref533">
          <editor>
            <personname role="last-first">
              <surname>Taylor</surname> <firstname>Robert</firstname> <othername role="middle-initials">H.</othername>
            </personname>
          </editor>, ed. (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-2807">
            <emphasis role="italic">The Idea of Freedom in Asia and Africa</emphasis>
          </title>, <address xml:id="b-9781474207300-2808">
            <city>Stanford</city>, <state>CA</state>
          </address>: <publishername>Stanford University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref534">
          <bibliomset relation="article" xml:id="b-9781474207300-2809">
            <author>
              <personname role="last-first">
                <surname>Teo</surname> <firstname>Hsu-Ming</firstname>
              </personname>
            </author> (<pubdate>2010</pubdate>), “<title xml:id="b-9781474207300-2810">Historicizing <emphasis role="italic">The Sheik</emphasis>:</title> <subtitle xml:id="b-9781474207300-2811">Comparisons of the British Novel and the American Film</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2812">
            <title xml:id="b-9781474207300-2813">
              <emphasis role="italic">Journal of Popular Romance Studies</emphasis>
            </title>, <volumenum>1</volumenum> (<issuenum>1</issuenum>).</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref535">
          <author>
            <personname role="last-first">
              <surname>Thénault</surname> <firstname>Sylvie</firstname>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-2814">
            <emphasis role="italic">Violence Ordinaire dans l’Algérie Coloniale:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2815">
            <emphasis role="italic">Camps, Internements, Assignations à Residence</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2816">
            <city>Paris</city>
          </address>: <publishername>Odile Jacob</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref536">
          <bibliomset relation="article" xml:id="b-9781474207300-2817">
            <author>
              <personname role="last-first">
                <surname>Thomas</surname> <firstname>Lynn</firstname> <othername role="middle-initials">M.</othername>
              </personname>
            </author> (<pubdate>1998</pubdate>), “<title xml:id="b-9781474207300-2818">Imperial Concerns and ‘Women’s Affairs’:</title> <subtitle xml:id="b-9781474207300-2819">State Efforts to Regulate Clitoridectomy and Eradicate Abortion in Meru, Kenya, <emphasis role="italic">c</emphasis>. 1910–1950</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2820">
            <title xml:id="b-9781474207300-2821">
              <emphasis role="italic">Journal of African History</emphasis>
            </title>, <volumenum>39</volumenum> (<issuenum>1</issuenum>): <pagenums>121–45</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref537">
          <author>
            <personname role="last-first">
              <surname>Thomas</surname> <firstname>Martin</firstname>
            </personname>
          </author> (<pubdate>2005</pubdate>), <title xml:id="b-9781474207300-2822">
            <emphasis role="italic">The French Empire between the Wars:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2823">
            <emphasis role="italic">Imperialism, Politics and Society</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2824">
            <city>Manchester</city>
          </address>: <publishername>Manchester University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref538">
          <editor>
            <personname role="last-first">
              <surname>Thomas</surname> <firstname>Martin</firstname>
            </personname>
          </editor>, ed. (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-2825">
            <emphasis role="italic">The French Colonial Mind, Vol. 2:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2826">
            <emphasis role="italic">Violence, Military Encounters, and Colonialism</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2827">
            <city>Lincoln</city>, <state>NE</state>
          </address>: <publishername>University of Nebraska Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref539">
          <editor>
            <personname role="last-first">
              <surname>Thomas</surname> <firstname>Martin</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Gareth</firstname> <surname>Curless</surname>
            </personname>
          </editor>, eds (<pubdate>2017</pubdate>), <title xml:id="b-9781474207300-2828">
            <emphasis role="italic">Decolonization and Conflict:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2829">
            <emphasis role="italic">Colonial Comparisons and Legacies</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2830">
            <city>London</city>
          </address>: <publishername>Bloomsbury Academic</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref540">
          <editor>
            <personname role="last-first">
              <surname>Thomas</surname> <firstname>Martin</firstname>
            </personname>
          </editor>, <editor>
            <personname role="first-last">
              <firstname>Bob</firstname> <surname>Moore</surname>
            </personname>
          </editor>, and <editor>
            <personname role="first-last">
              <firstname role="initials">L.J.</firstname> <surname>Butler</surname>
            </personname>
          </editor>, eds ([<pubdate>2007</pubdate>] <date>2015</date>), <title xml:id="b-9781474207300-2831">
            <emphasis role="italic">Crises of Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2832">
            <emphasis role="italic">Decolonization and Europe’s Imperial States, 1918–1975</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2833">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref541">
          <author>
            <personname role="last-first">
              <surname>Thompson</surname> <firstname>Elizabeth</firstname>
            </personname>
          </author> ([<pubdate>2000</pubdate>] <date>2013</date>), <title xml:id="b-9781474207300-2834">
            <emphasis role="italic">Colonial Citizens:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2835">
            <emphasis role="italic">Republican Rights, Paternal Privilege, and Gender in French Syria and Lebanon</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2836">
            <city>New York</city>
          </address>: <publishername>Columbia University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref542">
          <author>
            <personname role="last-first">
              <surname>Torpey</surname> <firstname>John</firstname>
            </personname>
          </author> (<pubdate>2000</pubdate>), <title xml:id="b-9781474207300-2837">
            <emphasis role="italic">The Invention of the Passport:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2838">
            <emphasis role="italic">Surveillance, Citizenship and the State</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2839">
            <city>Cambridge</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref543">
          <bibliomset relation="article" xml:id="b-9781474207300-2840">
            <author>
              <personname role="last-first">
                <surname>Towle</surname> <firstname>Evan</firstname> <othername role="middle-initials">B.</othername>
              </personname>
            </author> and <author>
              <personname role="first-last">
                <firstname>Lynn</firstname> <othername role="middle">Marie</othername> <surname>Morgan</surname>
              </personname>
            </author> (<pubdate>2002</pubdate>), “<title xml:id="b-9781474207300-2841">Romancing the Transgender Native:</title> <subtitle xml:id="b-9781474207300-2842">Rethinking the Use of the ‘Third Gender’ Concept</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2843">
            <title xml:id="b-9781474207300-2844">
              <emphasis role="italic">GLQ:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2845">
              <emphasis role="italic">A Journal of Lesbian and Gay Studies</emphasis>
            </subtitle>, <volumenum>8</volumenum> (<issuenum>4</issuenum>): <pagenums>469–97</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref544">
          <bibliomset relation="part" xml:id="b-9781474207300-2846">
            <author>
              <personname role="last-first">
                <surname>Toye</surname> <firstname>Richard</firstname>
              </personname>
            </author> (<pubdate>2012</pubdate>), “<title xml:id="b-9781474207300-2847">The International Trade Organization</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2848">
            <title xml:id="b-9781474207300-2849">
              <emphasis role="italic">The Oxford Handbook on the World Trade Organization</emphasis>
            </title>, eds <editor>
              <personname role="first-last">
                <firstname>Amrita</firstname> <surname>Narlikar</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname>Martin</firstname> <surname>Daunton</surname>
              </personname>
            </editor>, and <editor>
              <personname role="first-last">
                <firstname>Robert</firstname> <othername role="middle-initials">M.</othername> <surname>Stern</surname>
              </personname>
            </editor>, <pagenums>85–101</pagenums>, <address xml:id="b-9781474207300-2850">
              <city>Oxford</city>
            </address>: <publishername>Oxford University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref545">
          <author>
            <personname role="last-first">
              <surname>Trautmann</surname> <firstname>Thomas</firstname>
            </personname>
          </author> (<pubdate>1997</pubdate>), <title xml:id="b-9781474207300-2851">
            <emphasis role="italic">Aryans and British India</emphasis>
          </title>, <address xml:id="b-9781474207300-2852">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref546">
          <author>
            <personname role="last-first">
              <surname>Trautmann</surname> <firstname>Thomas</firstname>
            </personname>
          </author> (<pubdate>2006</pubdate>), <title xml:id="b-9781474207300-2853">
            <emphasis role="italic">Languages and Nations:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2854">
            <emphasis role="italic">The Dravidian Proof in Colonial Madras</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2855">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref547">
          <author>
            <personname role="last-first">
              <surname>Tronchon</surname> <firstname>Jacques</firstname>
            </personname>
          </author> (<pubdate>1986</pubdate>), <title xml:id="b-9781474207300-2856">
            <emphasis role="italic">L’insurrection malgache de 1947</emphasis>
          </title>, <address xml:id="b-9781474207300-2857">
            <city>Karthala</city>
          </address>: <publishername>Paris</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref548">
          <author>
            <personname role="last-first">
              <surname>Troutt Powell</surname> <firstname>Eve</firstname>
            </personname>
          </author> (<pubdate>2003</pubdate>), <title xml:id="b-9781474207300-2858">
            <emphasis role="italic">A Different Shade of Colonialism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2859">
            <emphasis role="italic">Egypt, Great Britain, and the Mastery of the Sudan</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2860">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref549">
          <author>
            <personname role="last-first">
              <surname>Troutt Powell</surname> <firstname>Eve</firstname>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-2861">
            <emphasis role="italic">Tell This in My Memory:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2862">
            <emphasis role="italic">Stories of Enslavement from Egypt, Sudan, and the Ottoman Empire</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2863">
            <city>Stanford</city>, <state>CA</state>
          </address>: <publishername>Stanford University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref550">
          <author>
            <personname role="last-first">
              <surname>Trumpbour</surname> <firstname>John</firstname>
            </personname>
          </author> (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-2864">
            <emphasis role="italic">Selling Hollywood to the World:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2865">
            <emphasis role="italic">U.S. and European Struggles for Mastery of the Global Film Industry, 1920–1950</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2866">
            <city>New York</city>
          </address>: <publishername>Cambridge University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref551">
          <author>
            <personname role="last-first">
              <surname>Uchida</surname> <firstname>Jun</firstname>
            </personname>
          </author> (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-2867">
            <emphasis role="italic">Brokers of Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2868">
            <emphasis role="italic">Japanese Settler Colonialism in Korea, 1876–1945</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2869">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref552">
          <author>
            <personname role="last-first">
              <surname>Ulloa</surname> <firstname>Marie</firstname> <othername role="middle">Pierre</othername>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-2870">
            <emphasis role="italic">Francis Jeanson:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2871">
            <emphasis role="italic">A Dissident Intellectual from the French Resistance to the Algerian War</emphasis>
          </subtitle>, trans. <othercredit class="translator">
            <personname role="first-last">
              <firstname>Jane</firstname> <othername role="middle">Marie</othername> <surname>Todd</surname>
            </personname>
          </othercredit>, <address xml:id="b-9781474207300-2872">
            <city>Stanford</city>, <state>CA</state>
          </address>: <publishername>Stanford University Press</publishername>.</bibliomixed>
<?page value="226"?>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref553">
          <author>
            <orgname>United Nations</orgname>
          </author> (<pubdate>1948</pubdate>), <title xml:id="b-9781474207300-2873">
            <emphasis role="italic">The Universal Declaration of Human Rights</emphasis>
          </title>, <address xml:id="b-9781474207300-2874">
            <city>New York</city>
          </address>: <publishername>United Nations</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref554">
          <author>
            <orgname>United Nations Department of Economic and Social Affairs</orgname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-2875">
            <emphasis role="italic">International Migration Report, United States, 2015</emphasis>
          </title>, <address xml:id="b-9781474207300-2876">
            <city>New York</city>
          </address>: <publishername>United Nations</publishername>.</bibliomixed>
<bibliomixed role="unpublished" xml:id="b-9781474207300-ref555">
          <author>
            <orgname>United Nations General Assembly (UNGA)</orgname>
          </author> (<date>1960</date>), <title xml:id="b-9781474207300-2877">
            <emphasis role="italic">Declaration on the Granting of Independence to Colonial Countries and Peoples</emphasis>
          </title>, <bibliomisc role="description">Resolution 1514</bibliomisc>, <date>December 14</date>.</bibliomixed>
<bibliomixed role="unpublished" xml:id="b-9781474207300-ref556">
          <author>
            <orgname>United Nations General Assembly (UNGA)</orgname>
          </author> (<date>1974</date>a), <title xml:id="b-9781474207300-2878">
            <emphasis role="italic">Charter of Economic Rights and Duties of States</emphasis>
          </title>, <bibliomisc role="description">Resolution 3281</bibliomisc>, <date>December 12</date>.</bibliomixed>
<bibliomixed role="unpublished" xml:id="b-9781474207300-ref557">
          <author>
            <orgname>United Nations General Assembly (UNGA)</orgname>
          </author> (<date>1974</date>b), <title xml:id="b-9781474207300-2879">
            <emphasis role="italic">Declaration on the Establishment of a New International Economic Order</emphasis>
          </title>, <bibliomisc role="description">Resolution 3201</bibliomisc>, <date>May 1</date>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref558">
          <author>
            <orgname>US Census Bureau</orgname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-2880">
            <emphasis role="italic">Vintage 2016 Population Estimates:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2881">
            <emphasis role="italic">Population Estimates, Related Statistics about United States Population</emphasis>
          </subtitle>, <link xlink:href="http://www.census.gov/search-results.html?q=2015+state+population+&amp;search.x=0&amp;search.y=0&amp;search=submit&amp;page=1&amp;stateGeo=none&amp;searchtype=web&amp;cssp=SERP">
            <uri>http://www.census.gov/search-results.html?q=2015+state+population+&amp;search.x=0&amp;search.y=0&amp;search=submit&amp;page=1&amp;stateGeo=none&amp;searchtype=web&amp;cssp=SERP</uri>
          </link>, accessed <date role="accessed">December 27, 2016</date>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref559">
          <author>
            <orgname>USDA Economic Research Service</orgname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-2882">
            <emphasis role="italic">Data Files:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2883">
            <emphasis role="italic">U.S. and State-Level Farm Income and Wealth Statistics</emphasis>
          </subtitle>, <link xlink:href="https://data.ers.usda.gov/reports.aspx?ID=49642">
            <uri>https://data.ers.usda.gov/reports.aspx?ID=49642</uri>
          </link>, data posted <date>November 30, 2016</date>, accessed <date role="accessed">December 27, 2016</date>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref560">
          <author>
            <personname role="last-first">
              <surname>van der Linden</surname> <firstname>Marcel</firstname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-2884">
            <emphasis role="italic">Workers of the World:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2885">
            <emphasis role="italic">Essays Towards a Global Labor History</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2886">
            <city>Leiden</city>
          </address>: <publishername>Brill</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref561">
          <author>
            <personname role="last-first">
              <surname>Van de Velde</surname> <firstname>Theodoor</firstname> <othername role="middle-initials">H.</othername>
            </personname>
          </author> ([<pubdate>1926</pubdate>] <date>1930</date>), <title xml:id="b-9781474207300-2887">
            <emphasis role="italic">Ideal Marriage:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2888">
            <emphasis role="italic">Its Physiology and Technique</emphasis>
          </subtitle>, trans. <othercredit class="translator">
            <personname role="first-last">
              <firstname>Stella</firstname> <surname>Browne</surname>
            </personname>
          </othercredit>, <address xml:id="b-9781474207300-2889">
            <city>New York</city>
          </address>: <publishername>Random House</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref562">
          <author>
            <personname role="last-first">
              <surname>Van Galen Last</surname> <firstname>Dick</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-2890">
            <emphasis role="italic">Black Shame:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2891">
            <emphasis role="italic">African Soldiers in Europe, 1914–1922</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2892">
            <city>London</city>
          </address>: <publishername>Bloomsbury</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref563">
          <author>
            <personname role="last-first">
              <surname>Vaughan</surname> <firstname>Megan</firstname>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-2893">
            <emphasis role="italic">Curing Their Ills:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2894">
            <emphasis role="italic">Colonial Power and African Illness</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2895">
            <city>Oxford</city>
          </address>: <publishername>Polity Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref564">
          <author>
            <personname role="last-first">
              <surname>Vazzadini</surname> <firstname>Elena</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-2896">
            <emphasis role="italic">Lost Nationalism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2897">
            <emphasis role="italic">Revolution, Memory, and Anti-colonial Resistance in Sudan</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2898">
            <city>London</city>
          </address>: <publishername>James Currey</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref565">
          <bibliomset relation="article" xml:id="b-9781474207300-2899">
            <author>
              <personname role="last-first">
                <surname>Vine</surname> <firstname>David</firstname>
              </personname>
            </author> (<pubdate>2015</pubdate>), “<title xml:id="b-9781474207300-2900">The United States Probably Has More Foreign Military Bases Than Any Other People, Nation, or Empire in History</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2901">
            <title xml:id="b-9781474207300-2902">
              <emphasis role="italic">The Nation</emphasis>
            </title>, <date>September 14</date>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref566">
          <author>
            <personname role="last-first">
              <surname>Visram</surname> <firstname>Rozina</firstname>
            </personname>
          </author> (<pubdate>2002</pubdate>), <title xml:id="b-9781474207300-2903">
            <emphasis role="italic">Asians in Britain:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2904">
            <emphasis role="italic">Four Hundred Years of History</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2905">
            <city>London</city>
          </address>: <publishername>Pluto Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref567">
          <bibliomset relation="article" xml:id="b-9781474207300-2906">
            <author>
              <personname role="last-first">
                <surname>Vitalis</surname> <firstname>Robert</firstname>
              </personname>
            </author> (<pubdate>2013</pubdate>), “<title xml:id="b-9781474207300-2907">The Midnight Ride of Kwame Nkrumah and Other Fables of Bandung</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2908">
            <title xml:id="b-9781474207300-2909">
              <emphasis role="italic">Humanity</emphasis>
            </title>, <volumenum>4</volumenum> (<issuenum>2</issuenum>): <pagenums>261–88</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref568">
          <author>
            <personname role="last-first">
              <surname>von Eschen</surname> <firstname>Penny</firstname> <othername role="middle-initials">M.</othername>
            </personname>
          </author> (<pubdate>1997</pubdate>), <title xml:id="b-9781474207300-2910">
            <emphasis role="italic">Race Against Empire:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2911">
            <emphasis role="italic">Black Americans and Anticolonialism, 1937–1957</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2912">
            <city>Ithaca</city>, <state>NY</state>
          </address>: <publishername>Cornell University Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref569">
          <bibliomset relation="article" xml:id="b-9781474207300-2913">
            <author>
              <personname role="last-first">
                <surname>Wacquant</surname> <firstname>Loïc</firstname>
              </personname>
            </author> (<pubdate>1997</pubdate>), “<title xml:id="b-9781474207300-2914">For an Analytic of Racial Domination</title>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2915">
            <title xml:id="b-9781474207300-2916">
              <emphasis role="italic">Political Power and Social Theory</emphasis>
            </title>, <volumenum>11</volumenum>: <pagenums>221–34</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref570">
          <author>
            <personname role="last-first">
              <surname>Walia</surname> <firstname>Harsha</firstname>
            </personname>
          </author> (<pubdate>2013</pubdate>), <title xml:id="b-9781474207300-2917">
            <emphasis role="italic">Undoing Border Imperialism</emphasis>
          </title>, <address xml:id="b-9781474207300-2918">
            <city>Oakland</city>, <state>CA</state>
          </address>: <publishername>AK Press</publishername>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref571">
          <author>
            <personname role="last-first">
              <surname>Walker</surname> <firstname>Tim</firstname>
            </personname>
          </author> (<pubdate>2014</pubdate>), “<title xml:id="b-9781474207300-2919">How Uganda was Seduced by Anti-Gay Conservative Evangelicals</title>,” <emphasis role="italic">The Independent</emphasis>, <date>March 14</date>, <link xlink:href="http://www.independent.co.uk/news/world/africa/how-uganda-was-seduced-by-anti-gay-conservative-evangelicals-9193593.html">
            <uri>http://www.independent.co.uk/news/world/africa/how-uganda-was-seduced-by-anti-gay-conservative-evangelicals-9193593.html</uri>
          </link>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref572">
          <author>
            <personname role="last-first">
              <surname>Wall</surname> <firstname>Irwin</firstname> <othername role="middle-initials">M.</othername>
            </personname>
          </author> (<pubdate>2001</pubdate>), <title xml:id="b-9781474207300-2920">
            <emphasis role="italic">France, the United States, and the Algerian War</emphasis>
          </title>, <address xml:id="b-9781474207300-2921">
            <city>Berkeley</city>, <state>CA</state>
          </address>: <publishername>University of California Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref573">
          <author>
            <personname role="last-first">
              <surname>Wallach</surname> <firstname>Janet</firstname>
            </personname>
          </author> ([<pubdate>1996</pubdate>] <date>2005</date>), <title xml:id="b-9781474207300-2922">
            <emphasis role="italic">Desert Queen:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2923">
            <emphasis role="italic">The Extraordinary Life of Gertrude Bell, Adventurer, Adviser to Kings, Ally of Lawrence of Arabia</emphasis>
          </subtitle>, <edition>2nd</edition> edn, <address xml:id="b-9781474207300-2924">
            <city>New York</city>
          </address>: <publishername>Anchor Books</publishername>.</bibliomixed>
<?page value="227"?>
<bibliomixed role="article" xml:id="b-9781474207300-ref574">
          <bibliomset relation="article" xml:id="b-9781474207300-2925">
            <author>
              <personname role="last-first">
                <surname>Walther</surname> <firstname>Daniel</firstname> <othername role="middle-initials">J.</othername>
              </personname>
            </author> (<pubdate>2013</pubdate>), “<title xml:id="b-9781474207300-2926">Sex, Public Health and Colonial Control:</title> <subtitle xml:id="b-9781474207300-2927">The Campaign Against Venereal Diseases in Germany’s Overseas Possessions, 1884–1914</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2928">
            <title xml:id="b-9781474207300-2929">
              <emphasis role="italic">Social History of Medicine</emphasis>
            </title>, <volumenum>26</volumenum> (<issuenum>2</issuenum>): <pagenums>182–203</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref575">
          <editor>
            <personname role="last-first">
              <surname>Walz</surname> <firstname>Terrence</firstname>
            </personname>
          </editor> and <editor>
            <personname role="first-last">
              <firstname>Kenneth</firstname> <surname>Cuno</surname>
            </personname>
          </editor>, eds (<pubdate>2011</pubdate>), <title xml:id="b-9781474207300-2930">
            <emphasis role="italic">Race and Slavery in the Middle East:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2931">
            <emphasis role="italic">Histories of Trans-Saharan Africans in 19th-Century Egypt, Sudan, and the Ottoman Mediterranean</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2932">
            <city>Cairo</city>
          </address>: <publishername>The American University in Cairo Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref576">
          <author>
            <personname role="last-first">
              <surname>Wattenberg</surname> <firstname>Ben</firstname> <othername role="middle-initials">J.</othername>
            </personname>
          </author> (<pubdate>1991</pubdate>), <title xml:id="b-9781474207300-2933">
            <emphasis role="italic">The First Universal Nation:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2934">
            <emphasis role="italic">Leading Indicators and Ideas about the Surge of America in the 1990s</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2935">
            <city>New York</city>
          </address>: <publishername>Free Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref577">
          <bibliomset relation="article" xml:id="b-9781474207300-2936">
            <author>
              <personname role="last-first">
                <surname>Webb</surname> <firstname>Clive</firstname>
              </personname>
            </author> (<pubdate>2017</pubdate>), “<title xml:id="b-9781474207300-2937">Special Relationships:</title> <subtitle xml:id="b-9781474207300-2938">Mixed-Race Couples in Post-War Britain and the United States</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2939">
            <title xml:id="b-9781474207300-2940">
              <emphasis role="italic">Women’s History Review</emphasis>
            </title>, <volumenum>26</volumenum> (<issuenum>1</issuenum>): <pagenums>1–20</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref578">
          <author>
            <personname role="last-first">
              <surname>Wekker</surname> <firstname>Gloria</firstname>
            </personname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-2941">
            <emphasis role="italic">White Innocence:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2942">
            <emphasis role="italic">Paradoxes of Colonialism and Race</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2943">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref579">
          <author>
            <personname role="last-first">
              <surname>Wesseling</surname> <firstname role="initials">H.L.</firstname>
            </personname>
          </author> (<pubdate>1997</pubdate>), <title xml:id="b-9781474207300-2944">
            <emphasis role="italic">Imperialism and Colonialism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2945">
            <emphasis role="italic">Essays on the History of European Expansion</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2946">
            <city>Westport</city>, <state>CT</state>
          </address>: <publishername>Greenwood Press</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref580">
          <bibliomset relation="article" xml:id="b-9781474207300-2947">
            <author>
              <personname role="last-first">
                <surname>Wheatley</surname> <firstname>Natasha</firstname>
              </personname>
            </author> (<pubdate>2015</pubdate>), “Mandatory Interpretation: Legal Hermeneutics and the New International Order in Arab and Jewish Petitions to the League of Nations,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2948">
            <title xml:id="b-9781474207300-2949">
              <emphasis role="italic">Past and Present</emphasis>
            </title>, <volumenum>227</volumenum>: <pagenums>205–48</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref581">
          <author>
            <personname role="last-first">
              <surname>Wheeler</surname> <firstname>Roxann</firstname>
            </personname>
          </author> (<pubdate>2000</pubdate>), <title xml:id="b-9781474207300-2950">
            <emphasis role="italic">The Complexion of Race:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2951">
            <emphasis role="italic">Categories of Difference in Eighteenth-Century British Culture</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2952">
            <city>Philadelphia</city>, <state>PA</state>
          </address>: <publishername>University of Pennsylvania Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref582">
          <author>
            <personname role="last-first">
              <surname>White</surname> <firstname>Luise</firstname>
            </personname>
          </author> (<pubdate>1980</pubdate>), <title xml:id="b-9781474207300-2953">
            <emphasis role="italic">Women’s Domestic Labor in Colonial Kenya:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2954">
            <emphasis role="italic">Prostitution in Nairobi, 1909–1950</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2955">
            <city>Boston</city>, <state>MA</state>
          </address>: <publishername>African Studies Centre</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref583">
          <author>
            <personname role="last-first">
              <surname>Whitehead</surname> <firstname>John</firstname> <othername role="middle-initials">S.</othername>
            </personname>
          </author> (<pubdate>2004</pubdate>), <title xml:id="b-9781474207300-2956">
            <emphasis role="italic">Completing the Union:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2957">
            <emphasis role="italic">Alaska, Hawai’i, and the Battle for Statehood</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2958">
            <city>Albuquerque</city>, <state>NM</state>
          </address>: <publishername>University of New Mexico Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref584">
          <author>
            <personname role="last-first">
              <surname>Wieviorka</surname> <firstname>Olivier</firstname>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-2959">
            <emphasis role="italic">Normandy:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2960">
            <emphasis role="italic">The Landings to the Liberation of Paris</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2961">
            <city>Cambridge</city>, <state>MA</state>
          </address>: <publishername>Harvard University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref585">
          <author>
            <personname role="last-first">
              <surname>Wilder</surname> <firstname>Gary</firstname>
            </personname>
          </author> (<pubdate>2015</pubdate>), <title xml:id="b-9781474207300-2962">
            <emphasis role="italic">Freedom Time:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2963">
            <emphasis role="italic">Negritude, Decolonization, and the Future of the World</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2964">
            <city>Durham</city>, <state>NC</state>
          </address>: <publishername>Duke University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref586">
          <author>
            <personname role="last-first">
              <surname>Wilkinson</surname> <firstname role="initials">R.C.</firstname>
            </personname>
          </author> (<pubdate>1939</pubdate>), <title xml:id="b-9781474207300-2965">
            <emphasis role="italic">Annual Report of the Department of Labour</emphasis>
          </title>, <address xml:id="b-9781474207300-2966">
            <city>Port Louis</city>, <country>Mauritius</country>
          </address>: <publishername>Government of Mauritius</publishername>.</bibliomixed>
<bibliomixed role="article" xml:id="b-9781474207300-ref587">
          <bibliomset relation="article" xml:id="b-9781474207300-2967">
            <author>
              <personname role="last-first">
                <surname>Wilks</surname> <firstname>Jennifer</firstname> <othername role="middle-initials">M.</othername>
              </personname>
            </author> (<pubdate>2015</pubdate>), “<title xml:id="b-9781474207300-2968">Revolutionary Genealogies:</title> <subtitle xml:id="b-9781474207300-2969">Suzanne Césaire’s and Christiane Taubira’s Writings of Dissent</subtitle>,”</bibliomset> <bibliomset relation="journal" xml:id="b-9781474207300-2970">
            <title xml:id="b-9781474207300-2971">
              <emphasis role="italic">Small Axe</emphasis>
            </title>, <volumenum>19</volumenum> (<issuenum>3</issuenum>): <pagenums>91–101</pagenums>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref588">
          <bibliomset relation="part" xml:id="b-9781474207300-2972">
            <author>
              <personname role="last-first">
                <surname>Winham</surname> <firstname>Gilbert</firstname> <othername role="middle-initials">R.</othername>
              </personname>
            </author> (<pubdate>2009</pubdate>), “<title xml:id="b-9781474207300-2973">The Evolution of the World Trading System—The Economic and Policy Context</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2974">
            <title xml:id="b-9781474207300-2975">
              <emphasis role="italic">The Oxford Handbook of International Trade Law</emphasis>
            </title>, eds <editor>
              <personname role="first-last">
                <firstname>Daniel</firstname> <surname>Bethlehem</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname>Donald</firstname> <surname>McRae</surname>
              </personname>
            </editor>, <editor>
              <personname role="first-last">
                <firstname>Rodney</firstname> <surname>Neufeld</surname>
              </personname>
            </editor>, and <editor>
              <personname role="first-last">
                <firstname>Isabelle</firstname> <othername role="middle">Van</othername> <surname>Damme</surname>
              </personname>
            </editor>, <pagenums>5–29</pagenums>, <address xml:id="b-9781474207300-2976">
              <city>Oxford</city>
            </address>: <publishername>Oxford University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref589">
          <author>
            <personname role="last-first">
              <surname>Wipplinger</surname> <firstname>Jonathan</firstname> <othername role="middle-initials">O.</othername>
            </personname>
          </author> (<pubdate>2017</pubdate>), <title xml:id="b-9781474207300-2977">
            <emphasis role="italic">The Jazz Republic:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2978">
            <emphasis role="italic">Music, Race, and American Culture in Weimar Germany</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2979">
            <city>Ann Arbor</city>, <state>MI</state>
          </address>: <publishername>University of Michigan Press</publishername>.</bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref590">
          <bibliomset relation="part" xml:id="b-9781474207300-2980">
            <author>
              <personname role="last-first">
                <surname>Wolski</surname> <firstname role="initials">N.</firstname>
              </personname>
            </author> (<pubdate>2001</pubdate>), “<title xml:id="b-9781474207300-2981">All’s Not Quiet on the Western Front</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2982">
            <title xml:id="b-9781474207300-2983">
              <emphasis role="italic">Colonial Frontiers:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2984">
              <emphasis role="italic">Indigenous-European Encounters in Settler Societies</emphasis>
            </subtitle>, ed. <editor>
              <personname role="first-last">
                <firstname role="initials">L.</firstname> <surname>Russell</surname>
              </personname>
            </editor>, <pagenums>216–36</pagenums>, esp. <pagenums>218–21</pagenums>, <address xml:id="b-9781474207300-2985">
              <city>Manchester</city>
            </address>: <publishername>Manchester University Press</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="contribution" xml:id="b-9781474207300-ref591">
          <bibliomset relation="part" xml:id="b-9781474207300-2986">
            <author>
              <personname role="last-first">
                <surname>Wood</surname> <firstname>Ellen</firstname> <othername role="middle">Meiksins</othername>
              </personname>
            </author> (<pubdate>2006</pubdate>), “<title xml:id="b-9781474207300-2987">Democracy as Ideology of Empire</title>,”</bibliomset> in <bibliomset relation="book" xml:id="b-9781474207300-2988">
            <title xml:id="b-9781474207300-2989">
              <emphasis role="italic">The New Imperialists:</emphasis>
            </title> <subtitle xml:id="b-9781474207300-2990">
              <emphasis role="italic">Ideologies of Empire</emphasis>
            </subtitle>, ed. <editor>
              <personname role="first-last">
                <firstname>Colin</firstname> <surname>Mooers</surname>
              </personname>
            </editor>, <pagenums>9–24</pagenums>, <address xml:id="b-9781474207300-2991">
              <city>Oxford</city>
            </address>: <publishername>Oneworld</publishername>.</bibliomset>
        </bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref592">
          <author>
            <orgname>World Trade Organization (WTO)</orgname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-2992">
            <emphasis role="italic">Dispute DS2; United States—Standards for Reformulated and Conventional Gasoline</emphasis>
          </title>, <link xlink:href="https://www.wto.org/english/tratop_e/dispu_e/cases_e/ds2_e.htm">
            <uri>https://www.wto.org/english/tratop_e/dispu_e/cases_e/ds2_e.htm</uri>
          </link>, webpage updated <date>February 24, 2010</date>, accessed <date role="accessed">December 29, 2016</date>.</bibliomixed>
<bibliomixed role="website" xml:id="b-9781474207300-ref593">
          <author>
            <orgname>World Trade Organization (WTO)</orgname>
          </author> (<pubdate>2016</pubdate>), <title xml:id="b-9781474207300-2993">
            <emphasis role="italic">Statistical Review</emphasis>
          </title>, <link xlink:href="https://www.wto.org/english/res_e/statis_e/wts2016_e/wts2016_e.pdf">
            <uri>https://www.wto.org/english/res_e/statis_e/wts2016_e/wts2016_e.pdf</uri>
          </link>, accessed <date role="accessed">December 29, 2016</date>.</bibliomixed>
<?page value="228"?>
<bibliomixed role="website" xml:id="b-9781474207300-ref594">
          <author>
            <orgname>World Trade Organization (WTO)</orgname>
          </author> (n.d.), <title xml:id="b-9781474207300-2994">
            <emphasis role="italic">Legal Texts:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2995">
            <emphasis role="italic">The WTO Agreements, A Summary of the Final Act of the Uruguay Round</emphasis>
          </subtitle>, <link xlink:href="https://www.wto.org/english/docs_e/legal_e/ursum_e.htm">
            <uri>https://www.wto.org/english/docs_e/legal_e/ursum_e.htm</uri>
          </link>, accessed <date role="accessed">December 27, 2016</date>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref595">
          <author>
            <personname role="last-first">
              <surname>Wright</surname> <firstname>Helena</firstname>
            </personname>
          </author> ([<pubdate>1931</pubdate>] <date>1937</date>), <title xml:id="b-9781474207300-2996">
            <emphasis role="italic">The Sex Factor in Marriage:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-2997">
            <emphasis role="italic">A Book for Those Who Are or Are About to Be Married</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-2998">
            <city>New York</city>
          </address>: <publishername>Vanguard Press</publishername> [reprint, twentieth printing].</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref596">
          <author>
            <personname role="last-first">
              <surname>Wright</surname> <firstname>Richard</firstname>
            </personname>
          </author> (<pubdate>1956</pubdate>), <title xml:id="b-9781474207300-2999">
            <emphasis role="italic">The Colour Curtain</emphasis>
          </title>, <address xml:id="b-9781474207300-3000">
            <city>London</city>
          </address>: <publishername>Dobson</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref597">
          <author>
            <personname role="last-first">
              <surname>Yergin</surname> <firstname>Daniel</firstname>
            </personname>
          </author> (<pubdate>1991</pubdate>), <title xml:id="b-9781474207300-3001">
            <emphasis role="italic">The Prize:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-3002">
            <emphasis role="italic">The Epic Quest for Oil, Money and Power</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-3003">
            <city>New York</city>
          </address>: <publishername>Simon &amp; Schuster</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref598">
          <author>
            <personname role="last-first">
              <surname>Young</surname> <firstname>Marilyn</firstname> <othername role="middle-initials">B.</othername>
            </personname>
          </author> (<pubdate>1991</pubdate>), <title xml:id="b-9781474207300-3004">
            <emphasis role="italic">The Vietnam Wars, 1945–1990</emphasis>
          </title>, <address xml:id="b-9781474207300-3005">
            <city>New York</city>
          </address>: <publishername>Harper Collins</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref599">
          <author>
            <personname role="last-first">
              <surname>Young</surname> <firstname>Robert</firstname> <othername role="middle-initials">J.C.</othername>
            </personname>
          </author> (<pubdate>2001</pubdate>), <title xml:id="b-9781474207300-3006">
            <emphasis role="italic">Postcolonialism:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-3007">
            <emphasis role="italic">An Historical Introduction</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-3008">
            <city>London</city>
          </address>: <publishername>Blackwell</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref600">
          <author>
            <personname role="last-first">
              <surname>Zarobell</surname> <firstname>John</firstname>
            </personname>
          </author> (<pubdate>2010</pubdate>), <title xml:id="b-9781474207300-3009">
            <emphasis role="italic">Empire of Landscape:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-3010">
            <emphasis role="italic">Space and Ideology in French Colonial Algeria</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-3011">
            <city>University Park</city>, <state>PA</state>
          </address>: <publishername>Pennsylvania State University Press</publishername>.</bibliomixed>
<bibliomixed role="monograph" xml:id="b-9781474207300-ref601">
          <author>
            <personname role="last-first">
              <surname>Zimmerer</surname> <firstname>Jürgen</firstname>
            </personname>
          </author> and <author>
            <personname role="first-last">
              <firstname>Joachim</firstname> <surname>Zeller</surname>
            </personname>
          </author> (<pubdate>2008</pubdate>), <title xml:id="b-9781474207300-3012">
            <emphasis role="italic">Genocide in German South-West Africa:</emphasis>
          </title> <subtitle xml:id="b-9781474207300-3013">
            <emphasis role="italic">The Colonial War (1904–1908) in Namibia and Its Aftermath</emphasis>
          </subtitle>, <address xml:id="b-9781474207300-3014">
            <city>Monmouth</city>
          </address>: <publishername>Merlin Press</publishername>.</bibliomixed>
</bibliography>
<chapter xml:id="b-9781474207300-3015">
<info xml:id="b-9781474207300-3016">
<title xml:id="b-9781474207300-3017">
            <?page value="229"?>Notes on Contributors</title>
<pagenums>229–232</pagenums>
<biblioid class="doi">10.5040/9781474207300.0008</biblioid>
<mediaobject xml:id="b-9781474207300-3018">
<imageobject xml:id="b-9781474207300-3019">
<imagedata fileref="pdfs/9781474207300.0008.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
<copyright>
            <year>2019</year>
            <holder>Bloomsbury Publishing</holder>
          </copyright>
        </info>
<para xml:id="b-9781474207300-C0001">
          <emphasis role="bold">Daniel Bender</emphasis> is the Canada Research Chair in Global Culture, a Professor of History, and the founding director of the Culinaria Research Centre at the University of Toronto. He is the author of <emphasis role="italic">The Animal Game: Searching for Wildness at the American Zoo</emphasis> (Harvard University Press, 2016), <emphasis role="italic">American Abyss: Savagery and Civilization in an Age of Industry</emphasis> (Cornell University Press, 2009), and <emphasis role="italic">Sweated Work, Weak Bodies: Anti-Sweatshop Campaigns and Languages of Labor</emphasis> (Rutgers University Press, 2004), and the co-editor of <emphasis role="italic">Making the Empire Work: Labor and United States Imperialism</emphasis> (with J.K. Lipman, New York University Press, 2015) and <emphasis role="italic">Sweatshop U.S.A.: The American Sweatshop in Historical and Global Perspective</emphasis> (with R.A. Greenwald, Routledge, 2003). He is currently working on a new book project on food, empire, and global tourism entitled <emphasis role="italic">Travelling on Their Stomachs: Round the World in Search of Flavor.</emphasis>
        </para>
<para xml:id="b-9781474207300-C0002">
          <emphasis role="bold">Roland Burke</emphasis> is a lecturer in the Department of History and Archeology at La Trobe University in Australia. He is the author of <emphasis role="italic">Decolonization and the Evolution of Human Rights</emphasis> (University of Pennsylvania Press, 2010) and numerous articles in edited volumes and journals. He is at present working on a project that will examine the intellectual history of the arguments made against human rights. He has been the recipient of several prestigious awards and fellowships, including the R.M. Crawford Medal from the Australian Academy of the Humanities.</para>
<para xml:id="b-9781474207300-C0003">
          <emphasis role="bold">Anna Clark</emphasis> is Professor of History at the University of Minnesota. She is the author of <emphasis role="italic">Alternative Histories of the Self: A Cultural History of Sexuality and Secrets</emphasis> (Bloomsbury, 2017), <emphasis role="italic">Desire: A History of European Sexuality</emphasis> (Routledge, 2008), <emphasis role="italic">Scandal: The Sexual Politics of the British Constitution</emphasis> <?page value="230"?>(Princeton University Press, 2004), <emphasis role="italic">The Struggle for the Breeches: Gender and the Making of the British Working Class</emphasis> (University of California Press, 1995), and <emphasis role="italic">Women’s Silence, Men’s Violence: Sexual Assault in England 1770–1845</emphasis> (Pandora, 1987), as well as articles on human rights and humanitarianism, lesbian history, domestic violence, and imperialism.</para>
<para xml:id="b-9781474207300-C0004">
          <emphasis role="bold">Richard S. Fogarty</emphasis> is Associate Professor of History at the University at Albany, State University of New York, and specializes in the histories of modern France and Europe, war in its social and cultural contexts, colonialism, and race and racism. He is the author of <emphasis role="italic">Race War in France: Colonial Subjects in the French Army, 1914–1918</emphasis> (winner of the Phi Alpha Theta Best First Book Prize, Johns Hopkins University Press, 2008) and co-editor, with Andrew Tait Jarboe, of <emphasis role="italic">Empires in World War I: Shifting Frontiers and Imperial Dynamics in a Global Conflict</emphasis> (I.B. Tauris, 2014). His current research focuses on North African Muslims in the French army and as German prisoners of war, with special attention to the place of Islam and Muslims in France and Germany, as well as in the wider military and ideological struggle in Europe and the Middle East.</para>
<para xml:id="b-9781474207300-C0005">
          <emphasis role="bold">Bruce S. Hall</emphasis> is a specialist in African history. He is currently an Associate Professor in the Department of History at the University of California, Berkeley. He previously held positions at Duke University, University at Buffalo (SUNY), and the Johns Hopkins University. His book <emphasis role="italic">A History of Race in Muslim West Africa, 1600–1960</emphasis> (Cambridge University Press, 2011) was the co-winner of the American Historical Association’s Martin Klein Prize for best book in African history.</para>
<para xml:id="b-9781474207300-C0006">
          <emphasis role="bold">Patricia M.E. Lorcin</emphasis> is holder of the Samuel Russell Chair in Humanities and Professor of History at the University of Minnesota-Twin Cities. She is the author of <emphasis role="italic">Imperial Identities: Stereotyping, Prejudice, and Race in Colonial Algeria</emphasis> (I.B. Taurus, 1995) and <emphasis role="italic">Historicizing Colonial Nostalgia: European Women’s Narratives of Algeria and Kenya 1900–present</emphasis> (Palgrave Macmillan, 2011). She has edited or co-edited five volumes and three special issues, the most recent being <emphasis role="italic">French Mediterraneans: Transnational and Imperial Histories</emphasis> (with T. Shepard, University of Nebraska Press, 2016), and a special issue of <emphasis role="italic">Gender and History</emphasis> on global war. She has published numerous articles and book chapters on different aspects of French and western imperialism. She is at present working on a project tentatively entitled <emphasis role="italic">The Cold War, Art, Politics and Transnational Activism during Decolonization</emphasis>.</para>
<para xml:id="b-9781474207300-C0007">
          <emphasis role="bold">David A. Lynch</emphasis> is Professor in the Department of Social Science at Saint Mary’s University of Minnesota where he has taught political science since 1996. He is the author of <emphasis role="italic">Trade and Globalization: An Introduction to Regional Trade Agreements</emphasis> (Rowman &amp; Littlefield, 2010) and has written over a dozen chapters on international relations, international political economy, and American foreign <?page value="231"?>policy, including the chapter on trade in the UN Association of the USA’s <emphasis role="italic">A Global Agenda</emphasis> from 1996 to 2005. He received his PhD in political science from the University of California, Santa Barbara and his B.A. in political science from Iowa State University.</para>
<para xml:id="b-9781474207300-C0008">
          <emphasis role="bold">Jessica Namakkal</emphasis> is Assistant Professor of International Comparative Studies and Gender, Sexuality, and Feminist Studies at Duke University. She works on histories of decolonization, migration, and diaspora in the twentieth century.</para>
<para xml:id="b-9781474207300-C0009">
          <emphasis role="bold">Robert M. Rouphail</emphasis> is a doctoral candidate at the University of Illinois at Urbana-Champaign. He writes on the social, cultural, and environmental history of Indian Ocean Africa. His research ranges from the history of tropical meteorology, natural disasters, and biological science across the Indian Ocean world to histories of race, gender, and development in colonial and postcolonial Mauritius.</para>
<para xml:id="b-9781474207300-C0010">
          <emphasis role="bold">Elizabeth W. Williams</emphasis> is a Visiting Lecturer in the Department of Women, Gender, and Sexuality Studies at the University of Massachusetts, Amherst. She completed her PhD in History at the University of Minnesota-Twin Cities in 2017. Her research focuses on discourses of race and sexuality in the British Empire. Elizabeth’s book project, tentatively titled <emphasis role="italic">Sexual Trusteeship: Constructing Race and Sexuality in Colonial Kenya, 1895–1963</emphasis>, explores discourses of sexual deviance and normativity in colonial East Africa.</para>
<?page value="232"?>
</chapter>
<index xml:id="b-9781474207300-3020">
<info xml:id="b-9781474207300-3021">
<title xml:id="b-9781474207300-3022">
            <?page value="233"?>Index</title>
<pagenums>233–245</pagenums>
<mediaobject xml:id="b-9781474207300-3023">
<imageobject xml:id="b-9781474207300-3024">
<imagedata fileref="pdfs/9781474207300.0009.pdf" format="application/pdf"/>
</imageobject>
</mediaobject>
</info>
</index>
</part>
</book>
